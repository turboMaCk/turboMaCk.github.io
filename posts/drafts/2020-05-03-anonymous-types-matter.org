---
title: Anonymous types matter
subtitle: Anonymous type synonyms are great tool for opening your APIs.
description: In typed FP we sometimes tend to overuse closed design with opaque data. I'll try to make my case that in some situations we should actually go in exact opposite direction.
tags: functional-programming, elm, haskell, purescript
---

So I recently released another Elm library. I wished to have library like this for a long
time but I was hoping someone else will come up the same design idea eventually.
Few weeks ago I finally found enough motivation to do the tedious work and code it.
Usually I don't write announcements to my releases but I think in this particular case
the design idea might be a bit controversial so I think it's worth the explanation.
I want to keep this post relatively general so it's not really an announcement post neither.
I just want to talk a bit about anonymous types.

This post will be primarily about Elm but I'm going to compare it to Haskell and PureScript as well.
It should be also simple to map these ideas to OCaml and F# (or any other language
with similar type system ML, Rust, Idris..) if that's your cup of tea.

* What is an Anonymous Type?

Term "/anonymous type/" is somewhat semi-technical. If you lookup [[https://en.wikipedia.org/wiki/Anonymous_type][Wikipedia article]] you find
some programming languages do actually include feature named "/anonymous types/" though.
So hopefully there are some similarities between these implementations.

#+BEGIN_QUOTE
Anonymous types are a feature of C# 3.0, Visual Basic .NET 9.0, Oxygene, Scala and Go that allows data types to encapsulate
a set of properties into a single object without having to first explicitly define a type.
#+END_QUOTE

If you look closer into how these features work you would find out that it
essentially allows programmer to construct ~record~ ~struct~ or ~object~ value (depending on language terminology and features)
without need to declare the corresponding type first.

For purposes of this post I'm going to generalize the definition to include all [[https://en.wikipedia.org/wiki/Product_type][product types]]
to potentially satisfy (or not) the condition of being anonymous.
In particular I mean that traditional tuple types from Haskell or ML are also anonymous types.

#+BEGIN_note
If I would attempt to define what /Anonymous Type/ is it the definition would be something like this:

*Anonymous type is a product type who's values can be constructed without explicit type declaration*.
Since all the information about the shape of product type can be infered at the time of construction
(which is not true about variant) type can be deduced directly from the value.
This should also already suggest that anonymity is provided by language itself not by its libraries.

This is not to be confused by type inference which is able to deduce the type of a value.
However type inference still requires the type to be declared, it just doesn't require
declaration of type on a value. For instance in this example Elm code:

#+BEGIN_SRC elm
type Object = Earth | Mars | Moon | Sun

destination = Mars
#+END_SRC

the type of ~destination~ is infered as ~Object~ but the declaration of ~Object~ type is required.

If you want to diff into much more advanced topic of anonymous variants check
[[http://comonad.com/reader/2008/the-cofree-comonad-and-the-expression-problem/][The Cofree Comonad and the Expression Problem]] by Edward Kmett.
#+END_note

* Anonymous Types in a Wild

I will be primary talking about records and tuples as I don't really want to attempt to solve [[https://en.wikipedia.org/wiki/Expression_problem][the expression problem]] here.
Perhaps I should also mention that *I'm not going to talk about extensible records or row polymorphism.*
This post it about plain simple boring records and tuples.

Since I don't want to assume deep familiarity with all or even just a single language I'm going to mention I will use
simple code examples for demonstrations. I've chosen Haskell Elm and PureScript as these
are good examples I'm familiar with myself.

#+BEGIN_note
Be aware that Elm has some (arguably confusing) naming inconsistency with Haskell and PureScript:

| Language   | Data Type | Unboxed Data Type | Type Synonym |
|------------+-----------+-------------------+--------------|
| Haskell    | data      | newtype           | type         |
| PureScript | data      | newtype           | type         |
| Elm        | type      | type (inferred)   | type alias   |
#+END_note

** Anonymous Tuples

Tuple is a sequence of elements. You can think about it as about struct which values are accessed by index.
It has fixed size and each value in a slot has specific type.

In examples below I'm also defining custom type just to make it obvious that tuple can hold any type of value
even the one which is not know to the standard library.

*** Haskell

This is the Haskell syntax for defining a tuple (pair in this case):

#+BEGIN_SRC haskell
newtype MyData = MyData { unMyData :: Int }

myPair = ("Foo", MyData 42)
#+END_SRC

If we run the ~ghci~ and load the module we can inspect the type of the value:

#+BEGIN_SRC haskell
λ :l Tuples.hs
[1 of 1] Compiling Main             ( Tuples.hs, interpreted )
Ok, one module loaded.
λ :t myPair
myPair :: ([Char], MyData)
#+END_SRC

This is the behavior we would expect from anonymous type.
We're given syntax to construct tuple in any module which results
in value of compatible type.

*** Elm

Elm has tuples very similar to the Haskell:

#+BEGIN_SRC elm
-- Elm requires module definition
module Tuples exposing (myPair)

type MyData = MyData Int

myPair = ("Foo", MyData 42)
#+END_SRC

To check the type we can fire repl again (use ~elm repl~ command. Be aware that presence of ~elm.json~ file required):

#+BEGIN_SRC elm
---- Elm 0.19.1 ----------------------------------------------------------------
Say :help for help and :exit to exit! More at <https://elm-lang.org/0.19.1/repl>
--------------------------------------------------------------------------------
> import Tuples exposing (..)
> myPair
("Foo",MyData 42) : ( String, MyData )
#+END_SRC

This is the same situation as with Haskell.

*** PureScript

PureScript is interesting as it does ship only with minimal language support
but without standard library. This design decision which makes
sense in wider design context but it also means that PureScript
doesn't contain support for tuples in core language.
Tuples are provided by [[https://pursuit.purescript.org/packages/purescript-tuples/5.1.0][optional library]] instead.

#+BEGIN_note
I'm using [[https://github.com/purescript/spago][spago]] as a build tool for PS (which is sort of similar to [[https://docs.haskellstack.org][stack]] in Haskell world)
as because we need to manage dependencies in this case.
#+END_note

#+BEGIN_SRC haskell
module Tuples where

import Data.Tuple

newtype MyData = MyData Int

myPair = Tuple "Foo" (MyData 42)
#+END_SRC

Run ~spago repl~ to inspect the type:

#+BEGIN_SRC haskell
[info] Installation complete.
PSCi, version 0.13.6
Type :? for help

import Prelude

> import Tuples
> :t myPair
Tuple String MyData
#+END_SRC

If we look into definition of
~Tuple~, we can see it's good old custom product type:

#+BEGIN_SRC haskell
data Tuple a b = Tuple a b
#+END_SRC

~Data.Tuple.Nested~ provides bunch of aliases and type and value operator (~/\~) for convenience.
When importing this module we can also define our pair as following:

#+BEGIN_SRC haskell
myPair :: String /\ MyData
myPair = "Foo" /\ MyData 42
#+END_SRC

In fact this way of defining tuples is pretty close to [[https://en.wikipedia.org/wiki/Tuple][the mathematical definition]].

Since tuples in PureScript are not first-class language construct, we definitely can't considered them as being anonymous.
Anyway the PureScript implementation also nicely demonstrates how it
is possible to emulate absence of anonymous type within a laguage with parametric polymorphism.

- Define parametric custom type (eg. ~Tuple a b~)
- Provide general functions to work with this type (~fst~, ~snd~...)
- Make sure everybody is using the same this definition of type (community standard)

I also want to point out that absence of built-in tuples in not much of a problem in PureScript in practice.
PureScript's product types are all about records as we will see later.
I personally still think that it's good to have first class tuples as in some cases the positional
nature of tuples works better than named keys of records. That's being said in most cases
however records are nicer to work with.

** Records

Record is another example of product type which we might want to make anonymous. Lets look at the three languages again.

*** Haskell

The lack of anonymous records [[https://duckduckgo.com/?t=ffab&q=haskell+records][is causing some headaches in Haskell for ages]]. Some folks
went even as far as solving at least parts which are solvable in user space
(without compiler changes) in projects like [[https://hackage.haskell.org/package/record][record]] or [[https://hackage.haskell.org/package/superrecord][superrecord]].

Lets have a look on this idiomatic Haskell code:

#+BEGIN_SRC haskell
data User = User { name :: String, age :: Int }
data Project = Project { name :: String, description :: String }
#+END_SRC

This fails with an error.

#+BEGIN_SRC shell
Records.hs:2:26: error:
    Multiple declarations of ‘name’
    Declared at: Records.hs:1:20
                 Records.hs:2:26
  |
2 | data Project = Project { name :: String, description :: String }
  |                          ^^^^
Failed, no modules loaded.
#+END_SRC

Haskell records are just regular custom product types like ~data User = User String Int~.
This is why record declaration is using ~data~. Records are new data types not type synonyms.
Record syntax just provides extra getter and setter functions.
These functions are where ~multiple declarations~ problem happens -- Haskell wants to generate two ~name~
accessors and these collide.

To fix this problem we need to ~:set -XDuplicateRecordFields~.
Anyway if we do so we loose ability to use getter and setter functions:

#+BEGIN_SRC shell
λ :t name

<interactive>:1:1: error:
    Ambiguous occurrence ‘name’
    It could refer to
       either the field ‘name’, defined at Records.hs:2:26
           or the field ‘name’, defined at Records.hs:1:20
#+END_SRC

So in order to make records usable we need to allow other extension like ~-XRecordWildCards~.

Since there are so many extensions and recommended practices around Haskell's records
I can't possibly talk or even list all of them. Feel free to refer to these articles for more information though:

- 24 Days of GHC Extensions: [[https://ocharles.org.uk/blog/posts/2014-12-04-record-wildcards.html][Record Wildcards]] by Ollie Charles
- [[https://kodimensional.dev/recordwildcards][The Power of RecordWildCards]] by Dmitrii Kovanikov
- GHC docs [[https://ghc.gitlab.haskell.org/ghc/doc/users_guide/exts/disambiguate_record_fields.html][DisambiguateRecordFields]]
- [[https://www.athiemann.net/2017/07/02/superrecord.html][SuperRecord: Anonymous Records for Haskell]] by Alexander Thiemann

Idiomatic Haskell's records are definitely not anonymous though. Common usage of [[https://en.wikipedia.org/wiki/Hungarian_notation][Hungarian notation]] is a ever-present reminder
that of Haskell's relation to [[https://www.microsoft.com/en-us/research/people/simonpj/][Microsoft research]] [insert troll face].

*** Elm

In Elm, on the other hand, we can easily do this.

#+BEGIN_SRC elm
module Records exposing (..)

type alias User = { name : String, age : Int }
type alias Project = { name : String, description : String }
#+END_SRC

As you can see these records are defined as synonyms (aliases) to "already existing" record type.
We in fact don't even need to declare these aliases at all:

#+BEGIN_SRC elm
> foo = { asdf = "asdf", lkj = -1 }
{ asdf = "asdf", lkj = -1 }
    : { asdf : String, lkj : number }
#+END_SRC

If we define record alias though, we get a value constructor for free:

#+BEGIN_SRC elm
> User
<function> : String -> Int -> User
#+END_SRC

Further more, Elm gives us polymorphic getters (and setters):

#+BEGIN_SRC elm
> .name
<function> : { b | name : a } -> a
#+END_SRC

~.name~ as well as ~{record}.name~ will work with any records which has name field what ever its type might be.
This is much like a ~fst~ or ~Tupple.first~ functions but it also with named rather than positional keys.
Don't confuse this with maps with string based keys (so common in dynamic languages). This is nothing
like map with string because records have known shape. Querying record for key it doesn't have is a type error.

Elm's records are anonymous. They are also so called [[https://www.microsoft.com/en-us/research/publication/extensible-records-with-scoped-labels/][extensible records]].
[[https://elm.christmas/2018/19][You won't belive what these records can do!]] article by Jonas Berdal goes a bit more deeper into this.

*** PureScript

I already said that records are a big deal in PureScript so let's just dive right into it.
This is the idiomatic declaration of specific record type.

#+BEGIN_SRC haskell
module Records where

type User = { name :: String, age :: Int }
type Project = { name :: String, description :: String }
#+END_SRC

Unlike Haskell (without language extension) and like Elm, this code is perfectly fine.
Also you can see that records declaration uses keyword for synonym (similarly to Elm).

We, of course, don't need to declare synonyms unless we want to:

#+BEGIN_SRC haskell
> foo = { asdf : "asdf", lkj : -1 }
> :t foo
{ asdf :: String
, lkj :: Int
}
#+END_SRC

In PureScript, aliases won't give us function constructors (~User : String -> Int -> User~) like they did in Elm.
Instead, there is special syntax for declaring value constructor we can use even without declaration of synonym:

#+BEGIN_SRC haskell
:t { foo : _, bar : _ }
forall t1 t2.
  t1
  -> t2
     -> { bar :: t2
        , foo :: t1
        }
#+END_SRC

We also don't get ~.name~ style getters so we need to use ~{record}.{field}~ syntax:

#+BEGIN_SRC haskell
> { name : "Jane Doe"}.name
"Jane Doe"
#+END_SRC

PureScript records has even more powers provided by [[https://en.wikipedia.org/wiki/Row_polymorphism][row polymorphism]] abilities of the language.
You can check [[https://qiita.com/kimagure/items/ca229cb4ba76db0c24a8][Making Diffs of differently-typed Records in PureScript]] article by Justin Woo
if you're keen to learn more.

** Overview

Based on our findings we can compile this overview of three languages:

| Language   | Anonymous Tuples | Anonymous Records | Other Records Feature |
|------------+------------------+-------------------+-----------------------|
| Haskell    | yes              | no                | via extensions        |
| Elm        | yes              | yes               | extensibility         |
| PureScript | no               | yes               | row polymorphism      |

* So Why Anonymous Types Matter?

Anonymous types fill certain needs in software design pretty well.
This goes back to the open/closed principles [[/posts/2019-08-14-avoiding-pattern-matching-refunctionalization.html][I wrote about some time ago]].

In all three languages we have whole spectrum of features which help to craft APIs
with right properties.

| Type           | Opened/Closed   | Description                                                                 |
|----------------+-----------------+-----------------------------------------------------------------------------|
| Opaque type    | strictly closed | Type can't be constructed and deconstructed outside of module               |
| Custom ADT     | closed          | Type is defined in specific module which id required for working with type  |
| Common ADT     | almost opened   | Like custom ADT just expected to universally available (part of stdlib etc) |
| Anonymous type | opened          | Completely independent of it's definition, compatible by structure          |

Depending on the nature of the API, different level of openness/closeness might be appropriate.

The three languages we've look into while being generally fairly similar has some obvious differences.
This is why often the best API for a problem might look a bit different across the three.

For example ~uncons~ function has different API in PureScript because it's desirable to return anonymous product type.
It also seems to be preferable to use positional Tuple over record is language has anonymous tuple (at least Elm which has choice
uses tuple).


 - Elm (elm-community/list-extra): ~uncons : List a -> Maybe ( a, List a )~
 - PureScript (purescript-lists) : ~uncons :: forall a. List a -> Maybe { head :: a, tail :: List a }~
 - Haskell ~uncons :: [a] -> Maybe (a, [a])~

An example where both Elm and PureScript might favor record (and Haskell is likely using just multiple arguments) is in
functions with a bit more complicated API. In these cases, records can work as substitution for named arguments (which Haskell does not, but OCaml does).
Using record with named fields brings additional semantic clarity, making it easier to understand the API.
Example might be function that performs HTTP request.

* Non-Empty List as Synonym

About a week ago I've published [[https://package.elm-lang.org/packages/turboMaCk/non-empty-list-alias/latest/][non-empty-list-alias library]] for Elm.
In my opinion there are several benefits of defining non-empty list
in terms of ~(a, List a)~. Especially in Elm.

Currently it's common to define non-empty list as custom ~type NonEmpty a = Cons a (List a)~.
This is what all existing libraries do.
It is also how [[https://hackage.haskell.org/package/base-4.14.0.0/docs/Data-List-NonEmpty.html#g:1][Data.List.NonEmpty]] in Haskell's base is defined.

I think synonym definition is especially well suited in Elm because:

1. Elm doesn't have [[https://en.wikipedia.org/wiki/Ad_hoc_polymorphism][ad hoc polymorphism]] -- Unlike in Haskell and PureScript, we can't make non empty instance of any type-class.
2. elm/core doesn't come with definition of NonEmpty -- There is no single implementation of this type everyone is expected to use.
3. It's easy enough to work directly with tuple -- It's virtually free to opt in and out of such library.
4. ~elm-community/list-extra~ already provides ~uncons~ -- this function is a compatible constructor with this definition.

That's not to say there wouldn't be any benefits in having similar definition in language like Haskell.
[[https://twitter.com/fried_brice/status/1232773993507147776][There are folks who would prefer such definition]]. I think in case of Elm the case is even stronger.

That's being said, I'm well aware of downsides of this approach:

1. Less semantically expressive constructor (in pattern matching)
2. Potentially encouraging even more fragmentation in implementations (or diversity, depends on where you stand).

The library also comes with [[https://en.wikipedia.org/wiki/Zipper_(data_structure)][zipper]] module.
Unlike the ~NonEmpty~, [[https://package.elm-lang.org/packages/turboMaCk/non-empty-list-alias/latest/List-NonEmpty-Zipper][~Zipper~]] type is opaque.
Zipper type contains private data field users are not suppose to be able to mess with --
therefore opaque type is a right choice in this case.

Both ~NonEmpty~ and ~Zipper~ comes with full featured implementations including but not limited to
[[https://en.wikipedia.org/wiki/Functor][Fucntor]] [[https://en.wikipedia.org/wiki/Applicative_functor][Applicative Functor]] and [[https://en.wikipedia.org/wiki/Monad_(category_theory)][Comonad]] functions.

If you want to learn more there are some links:

 - [[https://package.elm-lang.org/packages/turboMaCk/non-empty-list-alias/latest/][Documentation]]
 - [[https://github.com/turboMaCk/non-empty-list-alias][Repository]]

* Conclusion

I'm pretty sure there are and will always be some folks who won't like to give up semantically
more expressive definition of custom constructors. And I think that's fine as long
as we all understand the trade-off. Both alias to pair and custom ADTs
are isomorphic anyway so it's just matter of practicality in the end.
I'm personally often willing to sacrifice some expressiveness to make APIs a bit easier to work with myself.

Anonymous types do change the ergonomics of a language and APIs which exploit their power.
For what it's worth, I think that we should always think about what is an appropriate level of openness or closeness
when designing APIs. Especially if language which offers bunch of them.
