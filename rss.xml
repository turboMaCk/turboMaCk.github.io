<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel>
        <title>turbo_MaCk - All posts</title>
        <link>http://turbomack.github.iuo</link>
        <description><![CDATA[Personal website of turbo_MaCk]]></description>
        <atom:link href="http://turbomack.github.iuo/rss.xml" rel="self"
                   type="application/rss+xml" />
        <lastBuildDate>Tue, 12 May 2020 00:00:00 UT</lastBuildDate>
        <item>
    <title>Anonymous types matter</title>
    <link>http://turbomack.github.iuo/posts/2020-05-12-anonymous-types-matter.html</link>
    <description><![CDATA[<p>So I recently released another Elm library. I wished to have a library like this for a long
time but I was hoping someone else will come up with the same design idea eventually.
A few weeks ago I finally found enough motivation to do the tedious work and code it.
Usually, I don’t write announcements to my releases but I think in this particular case
the design idea might be a bit controversial so I think it’s worth the explanation.
I want to keep this post relatively general so it’s not an announcement post neither.
I just want to talk a bit about anonymous types.</p>
<p>This post will be primarily about Elm but I’m going to compare it to Haskell and PureScript as well.
It should be also simple to map these ideas to OCaml and F# (or any other language
with similar type system ML, Rust, Idris..) if that’s your cup of tea.</p>
<h1 id="what-is-an-anonymous-type">What is an Anonymous Type?</h1>
<p>The term “<em>anonymous type</em>” is somewhat semi-technical. If you look up <a href="https://en.wikipedia.org/wiki/Anonymous_type">the Wikipedia article</a> you find
some programming languages do include a feature named “<em>anonymous types</em>” though.
So hopefully there are some similarities between these implementations.</p>
<blockquote>
<p>Anonymous types are a feature of C# 3.0, Visual Basic .NET 9.0, Oxygene, Scala, and Go that allows data types to encapsulate
a set of properties into a single object without having to first explicitly define a type.</p>
</blockquote>
<p>If you look closer into how these features work you find out that it
essentially allows a programmer to construct <code>record</code> <code>struct</code> or <code>object</code> value (depending on language terminology and features)
without need to declare the corresponding type first.</p>
<p>For purposes of this post, I’m actually going to generalize the definition to include all <a href="https://en.wikipedia.org/wiki/Product_type">product types</a>
to potentially satisfy (or not) the condition of being anonymous.
In particular, I mean that traditional tuple types from Haskell or ML are also anonymous types.</p>
<div class="note">
<p>If I should attempt to define what <em>Anonymous Type</em> is, the definition would be something like this:</p>
<p><strong>Anonymous type is a product type whose values can be constructed without an explicit type declaration</strong>.
Since all the information about the shape of product type can be inferred at the time of construction
(which is not true about variant) type can be deduced directly from the value.
This should also already suggest that anonymity is provided by the language itself, not by its libraries.</p>
<p>This is not to be confused by type inference which is an ability to deduce the type of a value.
However type inference still requires the type to be declared, it just doesn’t require
a declaration of type on a value. For instance, in this example Elm code:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">Object</span> <span class="op">=</span> <span class="dt">Earth</span> <span class="op">|</span> <span class="dt">Mars</span> <span class="op">|</span> <span class="dt">Moon</span> <span class="op">|</span> <span class="dt">Sun</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="fu">destination</span> <span class="op">=</span> <span class="dt">Mars</span></span></code></pre></div>
<p>the type of <code>destination</code> is inferred as <code>Object</code> but the declaration of an <code>Object</code> type is required.</p>
<p>If you want to dive into much more advanced topic of anonymous variants, check
<a href="http://comonad.com/reader/2008/the-cofree-comonad-and-the-expression-problem/">The Cofree Comonad and the Expression Problem</a> by Edward Kmett.</p>
</div>
<h1 id="anonymous-types-in-a-wild">Anonymous Types in a Wild</h1>
<p>I will be primarily talking about records and tuples as I don’t want to attempt to solve <a href="https://en.wikipedia.org/wiki/Expression_problem">the expression problem</a> here.
Perhaps I should also mention that <strong>I’m not going to talk about extensible records or row polymorphism.</strong>
This post is about plain simple boring records and tuples.</p>
<p>Since I don’t want to assume deep familiarity with all, or even just a single language I’m going to mention, I will use
simple code examples for demonstrations. I’ve chosen Haskell Elm and PureScript as these
are good examples I’m familiar with myself.</p>
<div class="note">
<p>Be aware that Elm has some (arguably confusing) naming inconsistency with Haskell and PureScript:</p>
<table>
<thead>
<tr class="header">
<th>Language</th>
<th>Data Type</th>
<th>Unboxed Data Type</th>
<th>Type Synonym</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Haskell</td>
<td>data</td>
<td>newtype</td>
<td>type</td>
</tr>
<tr class="even">
<td>PureScript</td>
<td>data</td>
<td>newtype</td>
<td>type</td>
</tr>
<tr class="odd">
<td>Elm</td>
<td>type</td>
<td>type (inferred)</td>
<td>type alias</td>
</tr>
</tbody>
</table>
</div>
<h2 id="anonymous-tuples">Anonymous Tuples</h2>
<p>A tuple is a sequence of elements. You can think about it as about struct in which values are accessed by index.
It has a fixed size and each value in a slot has a specific type.</p>
<p>In examples below, I’m also defining custom type just to make it obvious that tuple can hold any type of value
even the one which is not known to the standard library.</p>
<h3 id="haskell">Haskell</h3>
<p>This is the Haskell syntax for defining a tuple (pair in this case):</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">newtype</span> <span class="dt">MyData</span> <span class="ot">=</span> <span class="dt">MyData</span> {<span class="ot"> unMyData ::</span> <span class="dt">Int</span> }</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>myPair <span class="ot">=</span> (<span class="st">&quot;Foo&quot;</span>, <span class="dt">MyData</span> <span class="dv">42</span>)</span></code></pre></div>
<p>If we run the <code>ghci</code> and load the module we can inspect the type of the value:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>λ <span class="op">:</span>l Tuples.hs</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>[<span class="dv">1</span> <span class="kw">of</span> <span class="dv">1</span>] <span class="dt">Compiling</span> <span class="dt">Main</span>             ( Tuples.hs, interpreted )</span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="dt">Ok</span>, one <span class="kw">module</span> loaded<span class="op">.</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>λ <span class="op">:</span>t myPair</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a><span class="ot">myPair ::</span> ([<span class="dt">Char</span>], <span class="dt">MyData</span>)</span></code></pre></div>
<p>This is the behavior we would expect from an anonymous type.
We’re given syntax to construct tuple in any module which results
in a value of compatible type.</p>
<h3 id="elm">Elm</h3>
<p>Elm has tuples very similar to the Haskell:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- Elm requires module definition</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a><span class="kw">module</span> <span class="dt">Tuples</span> <span class="kw">exposing</span> (<span class="fu">myPair</span>)</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">MyData</span> <span class="op">=</span> <span class="dt">MyData</span> <span class="dt">Int</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a><span class="fu">myPair</span> <span class="op">=</span> (<span class="st">&quot;Foo&quot;</span><span class="op">,</span> <span class="dt">MyData</span> <span class="dv">42</span>)</span></code></pre></div>
<p>To check the type we can fire repl again (use <code>elm repl</code> command. Be aware that the presence of <code>elm.json</code> file required):</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="co">---- Elm 0.19.1 ----------------------------------------------------------------</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="dt">Say</span> :<span class="fu">help</span> <span class="fu">for</span> <span class="fu">help</span> <span class="fu">and</span> :<span class="fu">exit</span> <span class="fu">to</span> <span class="fu">exit</span><span class="op">!</span> <span class="dt">More</span> <span class="fu">at</span> <span class="op">&lt;</span><span class="fu">https</span>:<span class="op">//</span><span class="fu">elm</span><span class="op">-</span><span class="fu">lang</span><span class="op">.</span><span class="fu">org</span><span class="op">/</span><span class="dv">0</span><span class="op">.</span><span class="dv">19</span><span class="op">.</span><span class="dv">1</span><span class="op">/</span><span class="fu">repl</span><span class="op">&gt;</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a><span class="co">--------------------------------------------------------------------------------</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> <span class="kw">import</span> <span class="dt">Tuples</span> <span class="kw">exposing</span> (<span class="op">..</span>)</span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> <span class="fu">myPair</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a>(<span class="st">&quot;Foo&quot;</span><span class="op">,</span><span class="dt">MyData</span> <span class="dv">42</span>) : ( <span class="dt">String</span><span class="op">,</span> <span class="dt">MyData</span> )</span></code></pre></div>
<p>This is the same situation as with Haskell.</p>
<h3 id="purescript">PureScript</h3>
<p>PureScript is interesting as it does ship only with minimal language support,
but without the standard library. This design decision makes
sense in a wider design context but it also means that PureScript
doesn’t contain support for tuples in the core language.
Tuples are provided by <a href="https://pursuit.purescript.org/packages/purescript-tuples/5.1.0">optional library</a> instead.</p>
<div class="note">
<p>I’m using <a href="https://github.com/purescript/spago">spago</a> as a build tool for PS (which is sort of similar to <a href="https://docs.haskellstack.org">stack</a> in Haskell world)
because we need to manage dependencies in this case.</p>
</div>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="kw">module</span> <span class="dt">Tuples</span> <span class="kw">where</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Data.Tuple</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a><span class="kw">newtype</span> <span class="dt">MyData</span> <span class="ot">=</span> <span class="dt">MyData</span> <span class="dt">Int</span></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a>myPair <span class="ot">=</span> <span class="dt">Tuple</span> <span class="st">&quot;Foo&quot;</span> (<span class="dt">MyData</span> <span class="dv">42</span>)</span></code></pre></div>
<p>Run <code>spago repl</code> to inspect the type:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a>[info] <span class="dt">Installation</span> complete<span class="op">.</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a><span class="dt">PSCi</span>, version <span class="fl">0.13</span><span class="op">.</span><span class="dv">6</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a><span class="dt">Type</span> <span class="op">:?</span> for help</span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Prelude</span></span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> <span class="kw">import</span> <span class="dt">Tuples</span></span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> <span class="op">:</span>t myPair</span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a><span class="dt">Tuple</span> <span class="dt">String</span> <span class="dt">MyData</span></span></code></pre></div>
<p>If we look into the definition of
<code>Tuple</code>, we can see it’s a good old custom product type:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Tuple</span> a b <span class="ot">=</span> <span class="dt">Tuple</span> a b</span></code></pre></div>
<p><code>Data.Tuple.Nested</code> provides a bunch of aliases and type and value operator (<code>/\</code>) for convenience.
When importing this module, we can also define our pair as follows:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="ot">myPair ::</span> <span class="dt">String</span> <span class="op">/</span>\ <span class="dt">MyData</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a>myPair <span class="ot">=</span> <span class="st">&quot;Foo&quot;</span> <span class="op">/</span>\ <span class="dt">MyData</span> <span class="dv">42</span></span></code></pre></div>
<p>In fact, this way of defining tuples is pretty close to <a href="https://en.wikipedia.org/wiki/Tuple">the mathematical definition</a>.</p>
<p>Since tuples in PureScript are not first-class language construct, we definitely can’t consider them as being anonymous.
Anyway, the PureScript implementation also nicely demonstrates how it
is possible to emulate the absence of anonymous type within a language with parametric polymorphism.</p>
<ul>
<li>Define parametric custom type (eg. <code>Tuple a b</code>)</li>
<li>Provide general functions to work with this type (<code>fst</code>, <code>snd</code>…)</li>
<li>Make sure everybody is using the same this definition of type (community standard)</li>
</ul>
<p>I also want to point out that the absence of built-in tuples is not much of a problem in PureScript in practice.
PureScript’s product types are all about records as we will see later.
I personally still think that it’s good to have first-class tuples as in some cases, the positional
nature of tuples works better than named keys of records. That being said, in most cases,
however, records are nicer to work with.</p>
<h2 id="records">Records</h2>
<p>Record is another example of product type which we might want to make anonymous. Let’s look at the three languages again.</p>
<h3 id="haskell-1">Haskell</h3>
<p>The lack of anonymous records <a href="https://duckduckgo.com/?t=ffab&amp;q=haskell+records">is causing some headaches in Haskell for ages</a>. Some folks
went even as far as solving at least parts that are solvable in user space
(without compiler changes) in projects like <a href="https://hackage.haskell.org/package/record">record</a> or <a href="https://hackage.haskell.org/package/superrecord">superrecord</a>.</p>
<p>Lets have a look at this idiomatic Haskell code:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">User</span> <span class="ot">=</span> <span class="dt">User</span> {<span class="ot"> name ::</span> <span class="dt">String</span>,<span class="ot"> age ::</span> <span class="dt">Int</span> }</span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Project</span> <span class="ot">=</span> <span class="dt">Project</span> {<span class="ot"> name ::</span> <span class="dt">String</span>,<span class="ot"> description ::</span> <span class="dt">String</span> }</span></code></pre></div>
<p>This fails with an error.</p>
<pre class="shell"><code>Records.hs:2:26: error:
    Multiple declarations of ‘name’
    Declared at: Records.hs:1:20
                 Records.hs:2:26
  |
2 | data Project = Project { name :: String, description :: String }
  |                          ^^^^
Failed, no modules loaded.
</code></pre>
<p>Haskell records are just regular custom product types like <code>data User = User String Int</code>.
This is why record declaration is using <code>data</code>. Records are new data types not type synonyms.
Record syntax just provides extra getter and setter functions.
These functions are where <code>multiple declarations</code> problem happens – Haskell wants to generate two <code>name</code>
accessors and these collide.</p>
<p>To fix this problem, we need to <code>:set -XDuplicateRecordFields</code>.
Anyway if we do so we lose the ability to use getter and setter functions:</p>
<pre class="shell"><code>λ :t name

&lt;interactive&gt;:1:1: error:
    Ambiguous occurrence ‘name’
    It could refer to
       either the field ‘name’, defined at Records.hs:2:26
           or the field ‘name’, defined at Records.hs:1:20
</code></pre>
<p>So in order to make records usable, we need to allow other extensions like <code>-XRecordWildCards</code>.</p>
<p>Since there are so many extensions and recommended practices around Haskell’s records,
I can’t possibly talk or even list all of them. Feel free to refer to these articles for more information though:</p>
<ul>
<li>24 Days of GHC Extensions: <a href="https://ocharles.org.uk/blog/posts/2014-12-04-record-wildcards.html">Record Wildcards</a> by Ollie Charles</li>
<li><a href="https://kodimensional.dev/recordwildcards">The Power of RecordWildCards</a> by Dmitrii Kovanikov</li>
<li>GHC docs <a href="https://ghc.gitlab.haskell.org/ghc/doc/users_guide/exts/disambiguate_record_fields.html">DisambiguateRecordFields</a></li>
<li><a href="https://www.athiemann.net/2017/07/02/superrecord.html">SuperRecord: Anonymous Records for Haskell</a> by Alexander Thiemann</li>
</ul>
<p>Idiomatic Haskell’s records are definitely not anonymous though. Common usage of <a href="https://en.wikipedia.org/wiki/Hungarian_notation">Hungarian notation</a> is an ever-present reminder
that of Haskell’s relation to <a href="https://www.microsoft.com/en-us/research/people/simonpj/">Microsoft research</a> [insert troll face].</p>
<h3 id="elm-1">Elm</h3>
<p>In Elm, on the other hand, we can easily do this.</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="kw">module</span> <span class="dt">Records</span> <span class="kw">exposing</span> (<span class="op">..</span>)</span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="kw">alias</span> <span class="dt">User</span> <span class="op">=</span> { <span class="fu">name</span> : <span class="dt">String</span><span class="op">,</span> <span class="fu">age</span> : <span class="dt">Int</span> }</span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="kw">alias</span> <span class="dt">Project</span> <span class="op">=</span> { <span class="fu">name</span> : <span class="dt">String</span><span class="op">,</span> <span class="fu">description</span> : <span class="dt">String</span> }</span></code></pre></div>
<p>As you can see, these records are defined as synonyms (aliases) to “already existing” record type.
We, in fact, don’t even need to declare these aliases at all:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> <span class="fu">foo</span> <span class="op">=</span> { <span class="fu">asdf</span> <span class="op">=</span> <span class="st">&quot;asdf&quot;</span><span class="op">,</span> <span class="fu">lkj</span> <span class="op">=</span> <span class="op">-</span><span class="dv">1</span> }</span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a>{ <span class="fu">asdf</span> <span class="op">=</span> <span class="st">&quot;asdf&quot;</span><span class="op">,</span> <span class="fu">lkj</span> <span class="op">=</span> <span class="op">-</span><span class="dv">1</span> }</span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a>    : { <span class="fu">asdf</span> : <span class="dt">String</span><span class="op">,</span> <span class="fu">lkj</span> : <span class="fu">number</span> }</span></code></pre></div>
<p>If we define record alias though, we get a value constructor for free:</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> <span class="dt">User</span></span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true" tabindex="-1"></a><span class="op">&lt;</span><span class="fu">function</span><span class="op">&gt;</span> : <span class="dt">String</span> <span class="op">-&gt;</span> <span class="dt">Int</span> <span class="op">-&gt;</span> <span class="dt">User</span></span></code></pre></div>
<p>Further more, Elm gives us polymorphic getters (and setters):</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> <span class="op">.</span><span class="fu">name</span></span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true" tabindex="-1"></a><span class="op">&lt;</span><span class="fu">function</span><span class="op">&gt;</span> : { <span class="fu">b</span> <span class="op">|</span> <span class="fu">name</span> : <span class="fu">a</span> } <span class="op">-&gt;</span> <span class="fu">a</span></span></code></pre></div>
<p><code>.name</code> as well as <code>{record}.name</code> will work with any records which has name field what ever its type might be.
This is much like a <code>fst</code> or <code>Tupple.first</code> functions but it also with named rather than positional keys.
Don’t confuse this with maps with string based keys (so common in dynamic languages). This is nothing
like map with string because records have known shape. Querying record for key it doesn’t have is a type error.</p>
<p>Elm’s records are anonymous. They are also so-called <a href="https://www.microsoft.com/en-us/research/publication/extensible-records-with-scoped-labels/">extensible records</a>.
<a href="https://elm.christmas/2018/19">You won’t believe what these records can do!</a> article by Jonas Berdal goes deeper into this.</p>
<h3 id="purescript-1">PureScript</h3>
<p>I already said that records are a big deal in PureScript, so let’s just dive right into it.
This is the idiomatic declaration of a specific record type.</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true" tabindex="-1"></a><span class="kw">module</span> <span class="dt">Records</span> <span class="kw">where</span></span>
<span id="cb17-2"><a href="#cb17-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb17-3"><a href="#cb17-3" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">User</span> <span class="ot">=</span> {<span class="ot"> name ::</span> <span class="dt">String</span>,<span class="ot"> age ::</span> <span class="dt">Int</span> }</span>
<span id="cb17-4"><a href="#cb17-4" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">Project</span> <span class="ot">=</span> {<span class="ot"> name ::</span> <span class="dt">String</span>,<span class="ot"> description ::</span> <span class="dt">String</span> }</span></code></pre></div>
<p>Unlike Haskell (without language extension) and like Elm, this code is perfectly fine.
Also, you can see that records declaration uses keyword for a synonym (similar to Elm).</p>
<p>We, of course, don’t need to declare synonyms unless we want to:</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> foo <span class="ot">=</span> { asdf <span class="op">:</span> <span class="st">&quot;asdf&quot;</span>, lkj <span class="op">:</span> <span class="op">-</span><span class="dv">1</span> }</span>
<span id="cb18-2"><a href="#cb18-2" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> <span class="op">:</span>t foo</span>
<span id="cb18-3"><a href="#cb18-3" aria-hidden="true" tabindex="-1"></a>{<span class="ot"> asdf ::</span> <span class="dt">String</span></span>
<span id="cb18-4"><a href="#cb18-4" aria-hidden="true" tabindex="-1"></a>,<span class="ot"> lkj ::</span> <span class="dt">Int</span></span>
<span id="cb18-5"><a href="#cb18-5" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>In PureScript, aliases won’t give us function constructors (<code>User : String -&gt; Int -&gt; User</code>) like they did in Elm.
Instead, there is special syntax for declaring value constructor we can use even without declaration of synonym:</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb19-1"><a href="#cb19-1" aria-hidden="true" tabindex="-1"></a><span class="op">:</span>t { foo <span class="op">:</span> _, bar <span class="op">:</span> _ }</span>
<span id="cb19-2"><a href="#cb19-2" aria-hidden="true" tabindex="-1"></a><span class="kw">forall</span> t1 t2<span class="op">.</span></span>
<span id="cb19-3"><a href="#cb19-3" aria-hidden="true" tabindex="-1"></a>  t1</span>
<span id="cb19-4"><a href="#cb19-4" aria-hidden="true" tabindex="-1"></a>  <span class="ot">-&gt;</span> t2</span>
<span id="cb19-5"><a href="#cb19-5" aria-hidden="true" tabindex="-1"></a>     <span class="ot">-&gt;</span> {<span class="ot"> bar ::</span> t2</span>
<span id="cb19-6"><a href="#cb19-6" aria-hidden="true" tabindex="-1"></a>        ,<span class="ot"> foo ::</span> t1</span>
<span id="cb19-7"><a href="#cb19-7" aria-hidden="true" tabindex="-1"></a>        }</span></code></pre></div>
<p>We also don’t get <code>.name</code> style getters so we need to use <code>{record}.{field}</code> syntax:</p>
<div class="sourceCode" id="cb20"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb20-1"><a href="#cb20-1" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> { name <span class="op">:</span> <span class="st">&quot;Jane Doe&quot;</span>}<span class="op">.</span>name</span>
<span id="cb20-2"><a href="#cb20-2" aria-hidden="true" tabindex="-1"></a><span class="st">&quot;Jane Doe&quot;</span></span></code></pre></div>
<p>PureScript records have even more powers provided by <a href="https://en.wikipedia.org/wiki/Row_polymorphism">row polymorphism</a> abilities of the language.
You can check <a href="https://qiita.com/kimagure/items/ca229cb4ba76db0c24a8">Making Diffs of differently-typed Records in PureScript</a> article by Justin Woo
if you’re keen to learn more.</p>
<h2 id="overview">Overview</h2>
<p>Based on our findings we can compile this overview of three languages:</p>
<table>
<thead>
<tr class="header">
<th>Language</th>
<th>Anonymous Tuples</th>
<th>Anonymous Records</th>
<th>Other Records Feature</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Haskell</td>
<td>yes</td>
<td>no</td>
<td>via extensions</td>
</tr>
<tr class="even">
<td>Elm</td>
<td>yes</td>
<td>yes</td>
<td>extensibility</td>
</tr>
<tr class="odd">
<td>PureScript</td>
<td>no</td>
<td>yes</td>
<td>row polymorphism</td>
</tr>
</tbody>
</table>
<h1 id="so-why-anonymous-types-matter">So Why Anonymous Types Matter?</h1>
<p>Anonymous types fill certain needs in software design pretty well.
This goes back to the open/closed principles <a href="./2019-08-14-avoiding-pattern-matching-refunctionalization.html">I wrote about some time ago</a>.</p>
<p>In all three languages, we have the whole spectrum of features that help to craft APIs
with the right properties.</p>
<table>
<thead>
<tr class="header">
<th>Type</th>
<th>Opened/Closed</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Opaque type</td>
<td>strictly closed</td>
<td>Type can’t be constructed and deconstructed outside of the module</td>
</tr>
<tr class="even">
<td>Custom ADT</td>
<td>closed</td>
<td>Type is defined in a specific module which id required for working with type</td>
</tr>
<tr class="odd">
<td>Common ADT</td>
<td>almost opened</td>
<td>Like custom ADT just expected to universally available (part of stdlib etc)</td>
</tr>
<tr class="even">
<td>Anonymous type</td>
<td>opened</td>
<td>Completely independent of its definition, compatible by a structure</td>
</tr>
</tbody>
</table>
<p>Depending on the nature of the API, different level of openness/closeness might be appropriate.</p>
<p>The three languages we have looked into, while being generally fairly similar, have some obvious differences.
This is why the best API for a problem might often look a bit different across the three.</p>
<p>For example, <code>uncons</code> function has different API in PureScript because it’s desirable to return anonymous product type.
It also seems to be preferable to use positional tuple over the record provided language does have anonymous tuple (at least Elm which has choice
uses tuple).</p>
<ul>
<li>Elm (elm-community/list-extra): <code>uncons : List a -&gt; Maybe ( a, List a )</code></li>
<li>PureScript (purescript-lists) : <code>uncons :: forall a. List a -&gt; Maybe { head :: a, tail :: List a }</code></li>
<li>Haskell <code>uncons :: [a] -&gt; Maybe (a, [a])</code></li>
</ul>
<p>An example where both Elm and PureScript might favor record (and Haskell is likely using just multiple arguments) is in
functions with a bit more complicated API. In these cases, records can work as a substitution for named arguments (which Haskell does not, but OCaml does).
Using records with named fields brings additional semantic clarity, making it easier to understand the API.
An example might be a function that performs HTTP requests.</p>
<h1 id="non-empty-list-as-synonym">Non-Empty List as Synonym</h1>
<p>About a week ago, I published <a href="https://package.elm-lang.org/packages/turboMaCk/non-empty-list-alias/latest/">non-empty-list-alias library</a> for Elm.
In my opinion, there are several benefits of defining non-empty list
in terms of <code>(a, List a)</code>. Especially in Elm.</p>
<p>Currently, it’s common to define non-empty list as custom <code>type NonEmpty a = Cons a (List a)</code>.
This is what all existing libraries do.
It is also how <a href="https://hackage.haskell.org/package/base-4.14.0.0/docs/Data-List-NonEmpty.html#g:1">Data.List.NonEmpty</a> in Haskell’s base is defined.</p>
<p>I think synonym definition is especially well suited in Elm because:</p>
<ol type="1">
<li>Elm doesn’t have <a href="https://en.wikipedia.org/wiki/Ad_hoc_polymorphism">ad hoc polymorphism</a> – Unlike in Haskell and PureScript, we can’t make non empty instance of any type-class.</li>
<li>elm/core doesn’t come with a definition of NonEmpty – There is no single implementation of this type everyone is expected to use.</li>
<li>It’s easy enough to work directly with tuple – It’s virtually free to opt-in and out of such a library.</li>
<li><code>elm-community/list-extra</code> already provides <code>uncons</code> – this function is a compatible constructor with this definition.</li>
</ol>
<p>That’s not to say there wouldn’t be any benefits in having a similar definition in a language like Haskell.
<a href="https://twitter.com/fried_brice/status/1232773993507147776">There are folks who would prefer such definition</a>. I think in the case of Elm, the case is even stronger.</p>
<p>That being said, I’m well aware of downsides of this approach:</p>
<ol type="1">
<li>Less semantically expressive constructor (in pattern matching)</li>
<li>Potentially encouraging even more fragmentation in implementations (or diversity, depends on where you stand).</li>
</ol>
<p>The library also comes with a <a href="https://en.wikipedia.org/wiki/Zipper_(data_structure)">zipper</a> module.
Unlike the <code>NonEmpty</code>, the <a href="https://package.elm-lang.org/packages/turboMaCk/non-empty-list-alias/latest/List-NonEmpty-Zipper"><code>Zipper</code></a> type is opaque.
Zipper type contains private data field users are not supposed to be able to mess with –
therefore the opaque type is the right choice in this case.</p>
<p>Both <code>NonEmpty</code> and <code>Zipper</code> modules come with full-featured implementations, including but not limited to
<a href="https://en.wikipedia.org/wiki/Functor">Functor</a> <a href="https://en.wikipedia.org/wiki/Applicative_functor">Applicative Functor</a> and <a href="https://en.wikipedia.org/wiki/Monad_(category_theory)">Comonad</a> functions.</p>
<p>If you want to learn more, there are some links:</p>
<ul>
<li><a href="https://package.elm-lang.org/packages/turboMaCk/non-empty-list-alias/latest/">Documentation</a></li>
<li><a href="https://github.com/turboMaCk/non-empty-list-alias">Repository</a></li>
</ul>
<h1 id="conclusion">Conclusion</h1>
<p>I’m pretty sure there are and will always be some folks who won’t like to give up the semantically
more expressive definition of custom constructors. And I think that’s fine as long
as we all understand the trade-off. Both alias to pair and custom ADTs
are isomorphic anyway, so it’s just a matter of practicality in the end.
I’m personally often willing to sacrifice some expressiveness to make APIs a bit easier to work with myself.</p>
<p>Anonymous types do change the ergonomics of a language and APIs which exploit their power.
For what it’s worth, I think that we should always think about what is an appropriate level of openness or closeness
when designing APIs. Especially if language offers a bunch of them.</p>]]></description>
    <pubDate>Tue, 12 May 2020 00:00:00 UT</pubDate>
    <guid>http://turbomack.github.iuo/posts/2020-05-12-anonymous-types-matter.html</guid>
    <dc:creator>Marek Fajkus</dc:creator>
</item>
<item>
    <title>Dealing with Multiple Dropbox Accounts</title>
    <link>http://turbomack.github.iuo/posts/2020-04-29-multiple-dropbox-accounts.html</link>
    <description><![CDATA[<p>It’s pretty common for a company to require its long-term consultants and employees to use
all sorts of tools and accounts.
On a contrary, the way these products often operate though is that they expect user to
have a single account. For organizations,
there is usually an ability to create teams - a group of multiple individual accounts.
The problem is that this is not exactly how companies like to do things.</p>
<p>Companies often like to provide @company email address and create all other
accounts under it. This means that if you have a personal account
for any of the service company requires you to use, you’re likely in a situation which most of these
apps are not prepared for. Two accounts on a single machine.</p>
<p>Lets, for instance, have a look at <a href="https://www.dropbox.com">Dropbox</a>.</p>
<p>There is no option to add an account without logging-out the existing one.
There are some <a href="https://help.dropbox.com/teams-admins/team-member/team-folders">options for teams</a> but you can’t use them if your use-case
involves multiple accounts.</p>
<p>However, it must be still possible to have multiple Dropbox accounts
for multiple users on a single system, right? How does that work?</p>
<h1 id="analyzing-dropbox">Analyzing Dropbox</h1>
<p>Dropbox seems to be creating <code>.dropbox</code> directory in to <code>$HOME</code> so lets have a look what is going on there.</p>
<pre class="shell"><code>$ tree ~/.dropbox
/home/marek/.dropbox
├── command_socket
├── dropbox.pid
├── events
│   ├── store
│   └── store1
├── host.db
├── iface_socket
├── info.json
├── instance1
│   ├── aggregation.dbx
│   ├── config.db
│   ├── config.dbx
│   ├── hostkeys
│   ├── sync
│   │   ├── nucleus.sqlite3
│   │   ├── nucleus.sqlite3-shm
│   │   ├── nucleus.sqlite3-wal
│   │   └── temp
│   │       └── 04625d37a5e6b439.sqlite3
│   └── unlink.db
├── instance_db
│   ├── hostkeys
│   └── instance.dbx
├── logs
│   ├── 0
│   ├── 1
│   │   ├── 1-6999-5ea575c4.tmp
│   │   ├── 1-6ac8-5ea81628.tmp
│   │   └── 1-9231-5ea575c5.tmp
│   └── 1ro
│       └── 1-249f-5db03970.tmp
├── machine_storage
├── metrics
│   └── store.bin
└── unlink.db

11 directories, 24 files
</code></pre>
<p>We don’t even need to analyze this too deeply as on a first look it already seems
that all the information associated with the account and its state is within this directory.</p>
<p>The first thing that comes to mind is to create a new fake HOME directory, set the <code>HOME</code> environment variable
to point to this folder, and then run Dropbox within this environment.</p>
<pre class="shell"><code>$ mkdir -p ~/Holmusk-Home
$ HOME=$HOME/Holmusk-Home dropbox
</code></pre>
<p>And sure enough, Dropbox seems to start the bootstrapping of the new <code>.dropbox</code> folder
and, after successful login to the company account, it also starts pulling the data it should.</p>
<p>This means we can simply create a shell script that wraps the <code>dropbox</code> binary in this way.
It may be worth mentioning that this solution should work across <strong><strong>Linux &amp; MacOS</strong></strong></p>
<div class="sourceCode" id="cb3"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="co">#!/usr/bin/env bash</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="bu">set</span> <span class="at">-e</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a><span class="va">CUSTOM_HOME</span><span class="op">=</span><span class="va">$HOME</span>/Holmusk-Home</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a><span class="fu">mkdir</span> <span class="at">-p</span> <span class="va">$CUSTOM_HOME</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a><span class="va">HOME</span><span class="op">=</span><span class="va">$CUSTOM_HOME</span> <span class="ex">dropbox</span></span></code></pre></div>
<div class="note">
<p>As far as I know, Dropbox doesn’t support Unix like systems other than Linux and MacOS,
but if it does, it will surely work for these as well.</p>
</div>
<p>Now all that is needed is to <code>chmod +x</code> the script and move it to <code>$PATH</code>.
On MacOS it might also be practical to use <a href="https://support.apple.com/guide/automator/welcome/mac">Automator</a> to wrap the script
as an application.</p>
<h1 id="nix">Nix</h1>
<p>Since I’m using <a href="https://nixos.org/nixos/">NixOS</a> I like to do things like this in a nix way.
So in fact in my case, I have <code>profile/holmusk.nix</code> file in my <a href="https://github.com/turboMaCk/Dotfiles/">Dotfiles</a>
and I’m putting things like this in there.</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="op">{</span> <span class="va">config</span><span class="op">,</span> <span class="va">pkgs</span><span class="op">,</span> <span class="op">...</span> <span class="op">}</span>:</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a><span class="kw">let</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>  <span class="va">custom-home</span> <span class="op">=</span> <span class="st">&quot;~/Holmusk-Home&quot;</span><span class="op">;</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>  <span class="va">holmusk-dropbox</span> <span class="op">=</span> <span class="kw">with</span> pkgs<span class="op">;</span> writeScriptBin <span class="st">&quot;dropbox-holmusk&quot;</span> <span class="st">&#39;&#39;</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a><span class="st">    #!/usr/bin/env bash</span></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a><span class="st">    set -e</span></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a><span class="st">    # create home directory if it doesn&#39;t exist</span></span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a><span class="st">    mkdir -p </span><span class="sc">${</span>custom<span class="op">-</span>home<span class="sc">}</span></span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a><span class="st">    # start dropbox for Holmusk team</span></span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a><span class="st">    HOME=</span><span class="sc">${</span>custom<span class="op">-</span>home<span class="sc">}</span><span class="st"> </span><span class="sc">${</span>dropbox<span class="sc">}</span><span class="st">/bin/dropbox</span></span>
<span id="cb4-14"><a href="#cb4-14" aria-hidden="true" tabindex="-1"></a><span class="st">  &#39;&#39;</span><span class="op">;</span></span>
<span id="cb4-15"><a href="#cb4-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-16"><a href="#cb4-16" aria-hidden="true" tabindex="-1"></a>  <span class="va">sync-rwe-assets</span> <span class="op">=</span> <span class="kw">with</span> pkgs<span class="op">;</span> writeScriptBin <span class="st">&quot;sync-rwe-assets&quot;</span> <span class="st">&#39;&#39;</span></span>
<span id="cb4-17"><a href="#cb4-17" aria-hidden="true" tabindex="-1"></a><span class="st">    #!/usr/bin/env bash</span></span>
<span id="cb4-18"><a href="#cb4-18" aria-hidden="true" tabindex="-1"></a><span class="st">    set -e</span></span>
<span id="cb4-19"><a href="#cb4-19" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-20"><a href="#cb4-20" aria-hidden="true" tabindex="-1"></a><span class="st">    if [[ ! -f package.json ]]; then</span></span>
<span id="cb4-21"><a href="#cb4-21" aria-hidden="true" tabindex="-1"></a><span class="st">      echo &quot;This command must be ran from frontend project directory!&quot;</span></span>
<span id="cb4-22"><a href="#cb4-22" aria-hidden="true" tabindex="-1"></a><span class="st">      exit 1</span></span>
<span id="cb4-23"><a href="#cb4-23" aria-hidden="true" tabindex="-1"></a><span class="st">    fi</span></span>
<span id="cb4-24"><a href="#cb4-24" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-25"><a href="#cb4-25" aria-hidden="true" tabindex="-1"></a><span class="st">    PROJECT_NAME=$(</span><span class="sc">${</span>jq<span class="sc">}</span><span class="st">/bin/jq &#39;.name&#39; package.json | sed &#39;s/&quot;//g&#39;)</span></span>
<span id="cb4-26"><a href="#cb4-26" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-27"><a href="#cb4-27" aria-hidden="true" tabindex="-1"></a><span class="st">    if [[ $PROJECT_NAME != &quot;pi-frontend&quot; ]]; then</span></span>
<span id="cb4-28"><a href="#cb4-28" aria-hidden="true" tabindex="-1"></a><span class="st">      echo &quot;This is not RWE project!&quot;</span></span>
<span id="cb4-29"><a href="#cb4-29" aria-hidden="true" tabindex="-1"></a><span class="st">      exit 1</span></span>
<span id="cb4-30"><a href="#cb4-30" aria-hidden="true" tabindex="-1"></a><span class="st">    fi</span></span>
<span id="cb4-31"><a href="#cb4-31" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-32"><a href="#cb4-32" aria-hidden="true" tabindex="-1"></a><span class="st">    cp -r public/assets/theme </span><span class="sc">${</span>custom<span class="op">-</span>home<span class="sc">}</span><span class="st">/Dropbox\ \(Holmusk\)/RWE\ Design/Assets\ -\ Web</span></span>
<span id="cb4-33"><a href="#cb4-33" aria-hidden="true" tabindex="-1"></a><span class="st">  &#39;&#39;</span><span class="op">;</span></span>
<span id="cb4-34"><a href="#cb4-34" aria-hidden="true" tabindex="-1"></a><span class="kw">in</span> <span class="op">{</span></span>
<span id="cb4-35"><a href="#cb4-35" aria-hidden="true" tabindex="-1"></a>  <span class="va">environment</span>.<span class="va">systemPackages</span> <span class="op">=</span> <span class="op">[</span></span>
<span id="cb4-36"><a href="#cb4-36" aria-hidden="true" tabindex="-1"></a>    holmusk-dropbox</span>
<span id="cb4-37"><a href="#cb4-37" aria-hidden="true" tabindex="-1"></a>    sync-rwe-assets</span>
<span id="cb4-38"><a href="#cb4-38" aria-hidden="true" tabindex="-1"></a>  <span class="op">];</span></span>
<span id="cb4-39"><a href="#cb4-39" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>As you can see, I also have another small script that automates the synchronization
of assets between the project and a shared Dropbox folder.
My workflow is to export SVG files for UI from <a href="https://www.figma.com/files/recent">Figma</a>, optimize them, and put them to the project assets.
I use this script for sharing processed files back to the design team in case they need them.
It roughly works like this.</p>
<ol type="1">
<li>Check the presence of <code>package.json</code> in the directory.</li>
<li>Check <code>name</code> value in <code>package.json</code> - this script is related to the specific project.</li>
<li>Copy files to the <code>Dropbox</code> folder.</li>
</ol>
<h1 id="wrap-up">Wrap Up</h1>
<p>Shell scripts are terrible because the shell languages mostly are.
Still, it’s the simplest way to automate smaller tasks in your workflow.
Also, Nix is awesome.</p>]]></description>
    <pubDate>Wed, 29 Apr 2020 00:00:00 UT</pubDate>
    <guid>http://turbomack.github.iuo/posts/2020-04-29-multiple-dropbox-accounts.html</guid>
    <dc:creator>Marek Fajkus</dc:creator>
</item>
<item>
    <title>Value Space Decoding for Aeson</title>
    <link>http://turbomack.github.iuo/posts/2020-02-21-value-space-decoding-for-aeson.html</link>
    <description><![CDATA[<p>I’ve learned to like the way JSON decoding works in Elm<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a>.
I see some advantages of using combinators to decode values from JSONs.
In some situations, I would very much prefer
this style of decoding over type class instances used by <a href="https://hackage.haskell.org/package/aeson">Aeson</a>.</p>
<div class="updates">
<p>Since originally writing this post I’ve released full implementation
of this idea as a package to both Hackage and Stackage:</p>
<ul>
<li><a href="https://hackage.haskell.org/package/aeson-combinators-0.0.1.0">aeson-combinators on Hackage</a></li>
<li><a href="https://github.com/commercialhaskell/stackage/pull/5216">PR to Stackage</a> - should become available soon</li>
<li><a href="https://github.com/turboMaCk/aeson-combinators">GitHub repository</a></li>
</ul>
</div>
<h1 id="conceptual-model-of-type-classes">Conceptual Model of Type Classes</h1>
<p>Type classes allow us to define that type is a member of larger groups of types (classes).
Or the other way around, to define classes of data types.
The important aspect, though, is that <strong>given specific type there is exactly
one way in which it can be made an instance of the class</strong>.
Even type classes like <code>Applicative</code> “<em>suffer</em>” from this limitation.
List <code>[a]</code> data type, for instance, has two completely valid, but different, implementations
of <code>Applicative</code> instance. Let me be clear, I’m not saying this is a huge problem in cases like <code>[a]</code>.
But this aspect will come back to haunt us, even more,
when we start using type classes for JSON decoding where it is even less clear
to know what we mean by “instance of <code>FromJSON</code>”.
<a href="http://comonad.com/reader/">Edward Kmett</a> had <a href="https://www.youtube.com/watch?v=hIZxTQP1ifo">a briliant talk about type classes in Boston Haskell Meetup</a> so don’t forget to check it out if you haven’t.</p>
<p>I hope I’ve managed to establish that with classes (like Aeson’s <code>FromJSON</code>) we’re essentially closing
the JSON decoding implementation over types.
I think that this, in many cases, is not a good model for translating data between different representations.
A much better way would be to allow for an arbitrary number of functions from JSON values to the same type.
It’s fair to assume that the same data type can be decoded from different JSONs structures
(problematic with type classes) as it is to assume that the same JSON structure
can be decoded to multiple data types (no problem with classes).</p>
<p>Because of this, it’s a common practice to define type wrappers around existing data types
just to make it possible to define “another” instance of <code>FromJSON</code> around the type.
While this solution works, I personally don’t find it satisfying.
To me, all these types are just unnecessary noise. I don’t like to have types
which are, in my opinion at least, not important in the conceptual model of my domain at all.</p>
<h1 id="solution">Solution</h1>
<p>What I would like to have is not a complete replacement for <code>FromJSON</code> class.
There are in fact cases where it makes sense to have a single definition
of a mapping between JSON and data type. So I still want to be able to define <code>FromJSON</code>
instance but I also want an option to define “decoders” not as an instance of a class of some type but as a value.</p>
<p>What I mean I that is to be able to do something like this (<code>ACD</code> being our library):</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Person</span> <span class="ot">=</span> <span class="dt">Person</span> {</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="ot">      name ::</span> <span class="dt">Text</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>    ,<span class="ot"> age  ::</span> <span class="dt">Int</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>    } <span class="kw">deriving</span> (<span class="dt">Generic</span>, <span class="dt">Show</span>)</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">FromJSON</span> <span class="dt">Person</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a><span class="ot">decodeEmbeded ::</span> <span class="dt">FromJSON</span> a <span class="ot">=&gt;</span> [<span class="dt">Text</span>] <span class="ot">-&gt;</span> <span class="dt">ByteString</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> a</span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>decodeEmbeded path json <span class="ot">=</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>    ACD.decode (ACD.at path ACD.auto) json</span></code></pre></div>
<p>Which can be used to extract <code>Person</code> embedded in
any JSON structure as following:</p>
<pre class="shell"><code>&gt;&gt;&gt; decodeEmbeded [&quot;data&quot;, &quot;person&quot;] &quot;{\&quot;data\&quot;:{\&quot;person\&quot;:{\&quot;name\&quot;:\&quot;Joe\&quot;,\&quot;age\&quot;:12}}}&quot;
Just (Person {name = &quot;Joe&quot;, age = 12})
</code></pre>
<p>Or I want to be able to define anonymous product (tuple) decoder:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">Token</span> <span class="ot">=</span> <span class="dt">Text</span> <span class="co">-- using alias for simplicity</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="ot">decodePersonWithToken ::</span> <span class="dt">ByteString</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> (<span class="dt">Token</span>, <span class="dt">Person</span>)</span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>decodePersonWithToken json <span class="ot">=</span> ACD.decode decoder json</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>    <span class="kw">where</span> decoder <span class="ot">=</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>            (,) <span class="op">&lt;$&gt;</span> ACD.field <span class="st">&quot;token&quot;</span> ACD.auto</span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>                <span class="op">&lt;*&gt;</span> ACD.field <span class="st">&quot;person&quot;</span> ACD.auto</span></code></pre></div>
<p>which works as following:</p>
<pre class="shell"><code>&gt;&gt;&gt; decodePersonWithToken &quot;{\&quot;person\&quot;:{\&quot;name\&quot;:\&quot;Joe\&quot;,\&quot;age\&quot;:12},\&quot;token\&quot;:\&quot;foo\&quot;}&quot;
Just (&quot;foo&quot;,Person {name = &quot;Joe&quot;, age = 12})
</code></pre>
<h1 id="implementation">Implementation</h1>
<p>The idea is to be able to define <code>Decoder a</code> type which is essentially just <code>parseJSON</code>
method from <code>FromJSON</code> class. Since we want to make this work with Aeson’s type classes
without introducing more than necessary overhead, we simply just wrap its member function <code>parseJSON</code> to a <code>newtype</code>:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="kw">newtype</span> <span class="dt">Decoder</span> a <span class="ot">=</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>  <span class="dt">Decoder</span> (<span class="dt">Value</span> <span class="ot">-&gt;</span> <span class="dt">Parser</span> a)</span></code></pre></div>
<p>The simplest constructor of this type is from types which are member of <code>FromJSON</code> class:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="ot">auto ::</span> <span class="dt">FromJSON</span> a <span class="ot">=&gt;</span> <span class="dt">Decoder</span> a</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>auto <span class="ot">=</span> <span class="dt">Decoder</span> parseJSON</span></code></pre></div>
<p>I don’t want to spent much time defining other constructors as this alone provides
enough but as an example this is how we can easily define constructor which turns any <code>Decoder a</code>
to <code>Decoder [a]</code>:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="ot">list ::</span> <span class="dt">Decoder</span> a <span class="ot">-&gt;</span> <span class="dt">Decoder</span> [a]</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>list (<span class="dt">Decoder</span> d) <span class="ot">=</span> <span class="dt">Decoder</span> <span class="op">$</span> listParser d</span></code></pre></div>
<p>where <a href="https://hackage.haskell.org/package/aeson-1.4.6.0/docs/Data-Aeson-Types.html#v:listParser"><code>listParser</code></a> is a function provided by Aeson itself.</p>
<p>To make <code>Decoder</code> more useful we’re going to define instances of Functor, Applicative and Monad
which should be enough for providing most of important functionality.</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">Functor</span> <span class="dt">Decoder</span> <span class="kw">where</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>  <span class="fu">fmap</span> f (<span class="dt">Decoder</span> d) <span class="ot">=</span> <span class="dt">Decoder</span> <span class="op">$</span> <span class="fu">fmap</span> f <span class="op">.</span> d</span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">Applicative</span> <span class="dt">Decoder</span> <span class="kw">where</span></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a>  <span class="fu">pure</span> val <span class="ot">=</span> <span class="dt">Decoder</span> <span class="op">$</span> \_ <span class="ot">-&gt;</span> <span class="fu">pure</span> val</span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a>  (<span class="dt">Decoder</span> f&#39;) <span class="op">&lt;*&gt;</span> (<span class="dt">Decoder</span> d) <span class="ot">=</span> <span class="dt">Decoder</span> <span class="op">$</span></span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a>    \val <span class="ot">-&gt;</span></span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a>        (\f <span class="ot">-&gt;</span> <span class="fu">fmap</span> f (d val)) <span class="op">=&lt;&lt;</span> f&#39; val</span>
<span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-10"><a href="#cb8-10" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">Monad</span> <span class="dt">Decoder</span> <span class="kw">where</span></span>
<span id="cb8-11"><a href="#cb8-11" aria-hidden="true" tabindex="-1"></a>  (<span class="dt">Decoder</span> a) <span class="op">&gt;&gt;=</span> f <span class="ot">=</span> <span class="dt">Decoder</span> <span class="op">$</span></span>
<span id="cb8-12"><a href="#cb8-12" aria-hidden="true" tabindex="-1"></a>    \val <span class="ot">-&gt;</span> <span class="kw">case</span> parse a val <span class="kw">of</span></span>
<span id="cb8-13"><a href="#cb8-13" aria-hidden="true" tabindex="-1"></a>      <span class="dt">Success</span> v <span class="ot">-&gt;</span> <span class="kw">let</span> (<span class="dt">Decoder</span> res) <span class="ot">=</span> f v</span>
<span id="cb8-14"><a href="#cb8-14" aria-hidden="true" tabindex="-1"></a>                   <span class="kw">in</span> res val</span>
<span id="cb8-15"><a href="#cb8-15" aria-hidden="true" tabindex="-1"></a>      _ <span class="ot">-&gt;</span> unexpected val</span></code></pre></div>
<p>And finally some combinators specific for JSON. We need a function then can extract value from
JSON filed. And then we can define another function for “drilling” a few fields deep into JSON Object.</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="ot">field ::</span> <span class="dt">Text</span> <span class="ot">-&gt;</span> <span class="dt">Decoder</span> a <span class="ot">-&gt;</span> <span class="dt">Decoder</span> a</span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a>field t (<span class="dt">Decoder</span> d) <span class="ot">=</span> <span class="dt">Decoder</span> <span class="op">$</span></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a>  \val <span class="ot">-&gt;</span> <span class="kw">case</span> val <span class="kw">of</span></span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Object</span> v <span class="ot">-&gt;</span> d <span class="op">=&lt;&lt;</span> v <span class="op">.:</span> t</span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a>    _        <span class="ot">-&gt;</span> typeMismatch <span class="st">&quot;Object&quot;</span> val</span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a><span class="ot">at ::</span> [<span class="dt">Text</span>] <span class="ot">-&gt;</span> <span class="dt">Decoder</span> a <span class="ot">-&gt;</span> <span class="dt">Decoder</span> a</span>
<span id="cb9-8"><a href="#cb9-8" aria-hidden="true" tabindex="-1"></a>at path d <span class="ot">=</span></span>
<span id="cb9-9"><a href="#cb9-9" aria-hidden="true" tabindex="-1"></a>  <span class="fu">foldr</span> field d path</span></code></pre></div>
<p>Once again this is using functions already provided by Aeson.</p>
<p>Last step is to define new <a href="https://hackage.haskell.org/package/aeson-1.4.6.0/docs/Data-Aeson.html#v:decode">decode</a> which will work with <code>Decoder</code>.</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="ot">decode ::</span> <span class="dt">Decoder</span> a <span class="ot">-&gt;</span> <span class="dt">LB.ByteString</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> a</span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a>decode (<span class="dt">Decoder</span> d) <span class="ot">=</span></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a>  Parser.decodeWith ParserI.jsonEOF (parse d)</span></code></pre></div>
<p>All functions used here are provided by Aeson. <code>LB</code> is a lazy version of <code>ByteString</code>.</p>
<p>And this is all we need to make examples from section above working.</p>
<h1 id="elm-style-decoding">Elm Style Decoding</h1>
<p>It’s of course possible to use this <code>Decoder</code> type exclusively.
This makes writing Aeson decoders feel like elm/json.</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Person</span> <span class="ot">=</span> <span class="dt">Person</span> {</span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a><span class="ot">      name ::</span> <span class="dt">Text</span></span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a>    ,<span class="ot"> age  ::</span> <span class="dt">Int</span></span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a>    } <span class="kw">deriving</span> (<span class="dt">Show</span>)</span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-6"><a href="#cb11-6" aria-hidden="true" tabindex="-1"></a><span class="ot">personDecoder ::</span> <span class="dt">Decoder</span> <span class="dt">Person</span></span>
<span id="cb11-7"><a href="#cb11-7" aria-hidden="true" tabindex="-1"></a>personDecoder <span class="ot">=</span></span>
<span id="cb11-8"><a href="#cb11-8" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Person</span></span>
<span id="cb11-9"><a href="#cb11-9" aria-hidden="true" tabindex="-1"></a>        <span class="op">&lt;$&gt;</span> field <span class="st">&quot;name&quot;</span> auto</span>
<span id="cb11-10"><a href="#cb11-10" aria-hidden="true" tabindex="-1"></a>        <span class="op">&lt;*&gt;</span> field <span class="st">&quot;age&quot;</span> auto</span></code></pre></div>
<h1 id="additional-resources">Additional Resources</h1>
<p>Full implementation of this Idea can be found in <a href="https://github.com/turboMaCk/aeson-combinators">this GitHub repository</a>.
Feel free to provide any feedback including criticism.
Just be aware that this is not published and is still missing some important bits.</p>
<p><a href="https://hackage.haskell.org/package/waargonaut">Waargonaut</a> package is Aeson alternative which has API similar to our <code>Decoder</code> approach
if you want to avoid whole Aeson.</p>
<p>While writing this post I’ve discovered that <a href="https://chris-martin.org/">Chris Martin</a> had a similar idea
implemented in <a href="https://hackage.haskell.org/package/aeson-decode-0.1.0.0/docs/AesonDecode.html">aeson-decode</a> package but the actual implementation uses <code>Value -&gt; Maybe a</code>
function similar to <a href="https://twitter.com/turbo_MaCk/status/1227247541336641536">my original prototype</a>.</p>
<section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>In fact I mean combination of <a href="https://package.elm-lang.org/packages/elm/json/latest/Json-Decode">elm/json</a> and <a href="https://package.elm-lang.org/packages/elm-community/json-extra/latest/Json-Decode-Extra">elm-comunity/json-extra</a> for Applicative “andMap”
or <a href="https://package.elm-lang.org/packages/NoRedInk/elm-json-decode-pipeline/latest/">NoRedInk/elm-json-decode-pipeline.</a><a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>]]></description>
    <pubDate>Fri, 21 Feb 2020 00:00:00 UT</pubDate>
    <guid>http://turbomack.github.iuo/posts/2020-02-21-value-space-decoding-for-aeson.html</guid>
    <dc:creator>Marek Fajkus</dc:creator>
</item>
<item>
    <title>Cabal Flags With and Without Nix</title>
    <link>http://turbomack.github.iuo/posts/2020-02-17-cabal-flags-and-nix.html</link>
    <description><![CDATA[<p><a href="https://en.wiktionary.org/wiki/yak_shaving">Yak shaving</a> for every day. I wanted to write post about something completely
different but I needed to shave a beast and figured I can as well share “a quick how to”
in hope I might safe someone else’s time.</p>
<p>I’ve been using <a href="https://nixos.org">NixOS</a> exclusively on basically all of my machines.
I also like to abuse nix for all sort of stuff - for creating project environments using
<a href="https://nixos.org/nix/manual/#sec-nix-shell">nix-shell</a>, deployment etc. Anyway as it is pretty common at least in my case, the software
gods were pretty angry with me again. Even though I have this site “<em>nixified</em>” for over a year
<strong>it turned out Hakyll in nixpkgs is not built with <code>previewServer</code> and <code>watchServer</code> which I would
pretty much like to use.</strong></p>
<div class="updates">
<p><a href="https://github.com/NixOS/cabal2nix/issues/442">Discussion under issue 442 in cabal2nix</a> shed a bit more light onto the issues described
within this post.
The issue with</p>
<ol type="1">
<li>There are good reasons why <code>doJailbreak</code> ignores conditional dependencies. See <a href="https://github.com/peti/jailbreak-cabal/issues/7#issuecomment-87445882">this comment for more informations</a>.</li>
<li>The reason why Hakyll in nixpkgs is not built with default <code>previewServer</code> and <code>watchServer</code> is due to Cabal Install. Nixpkgs set doesn’t contain compatible version of <code>warp</code> package so <code>Hakyll</code> can’t be built with those flags. In situations like this Cabal simply silently ignores the flag. This behaviour seems at best odd to me. There is currently some <a href="https://github.com/NixOS/cabal2nix/issues/442#issuecomment-595954664">dicussion about making flags explicit</a>. Change like this might make maintenance of nixpkgs a bit more difficult so we will see how this goes.</li>
</ol>
</div>
<h1 id="cabal-flags">Cabal Flags</h1>
<p>Lets start by familiarizing ourselves with <a href="https://www.haskell.org/cabal/release/cabal-1.10.1.0/doc/users-guide/#example-a-package-containing-a-library-and-executable-programs-1">Cabal Flags</a> first.
Cabal allows user to define custom build configuration flags within cabal file.
Declaration of custom flags is usually in top section of Cabal file. <strong>Flag has to be <code>Bool</code> value</strong>
and can be both <code>True</code> or <code>False</code> by default.</p>
<p>Looking into <a href="https://github.com/jaspervdj/hakyll/blob/a312fd4972f9add0736a9f8335bcd51e0e163b06/hakyll.cabal#L88-L108">hakyll.cabal</a> we can see two flags <code>watchServer</code> and <code>previewServer</code>.
Interestingly enough, both are set to <code>True</code> by default. This is can configure
to overwrite default flags:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> cabal configure <span class="at">-f</span> watchServer <span class="at">-f</span> previewServer</span></code></pre></div>
<div class="note">
<p>Frankly it was more difficult for me to found this information than I think it should have been.
It’s hard to point a finger to why so. Maybe it’s hard to navigate cabal documentation,
maybe the error message Hakyll logs when it’s missing a flag is not helpful enough or maybe it
was purely my own stupidity. Anyway Hackage lists available flags on <a href="https://hackage.haskell.org/package/hakyll-4.13.0.1">package description page</a> including
a link to <a href="https://www.haskell.org/cabal/users-guide/installing-packages.html#controlling-flag-assignments">relevant part of documentation of cabal</a> so it’s not like folks didn’t try to be helpful.</p>
</div>
<h1 id="haskell-infrastructure-for-nix">Haskell Infrastructure for Nix</h1>
<p>Like <a href="https://docs.haskellstack.org/en/stable/README/">Stack</a>, <a href="https://nixos.org/nixpkgs/">nixpkgs</a> provide curated Haskell package sets but with both flexibility
and user experience (meaning complexity) of Nix. <a href="https://hackage.haskell.org/package/cabal2nix">Cabal2Nix</a> is a standard tool
for generating Nix expressions for Cabal projects.</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> cabal2nix . <span class="op">&gt;</span> site.nix</span></code></pre></div>
<div class="note">
<p>If you don’t want to pre-generate nix expressions you can as well use
<code>haskellPackages.cabal2nix "site" ./.</code> as a part of build rather than generating it upfront.</p>
</div>
<p>There are two gotchas though. First Hakyll within nix packages is build with <code>watchServer</code> and <code>previewServer</code>
disabled so these features are not available, second the standard <code>jailbreak</code><a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a> seems not to be compatible with cabal
flags.</p>
<h2 id="overriding-hakyll">Overriding Hakyll</h2>
<p>To fix these two problems we’re going to override the definition of Hakyll.
For general structure of <code>default.nix</code> file I’m roughly following Gabriel’s <a href="https://github.com/Gabriel439/haskell-nix">haskell-nix</a>
way which looks like this:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="kw">let</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>  <span class="va">config</span> <span class="op">=</span> <span class="op">{</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>    <span class="va">packageOverrides</span> <span class="op">=</span> <span class="va">pkgs</span><span class="op">:</span> <span class="op">{</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>      <span class="va">haskellPackages</span> <span class="op">=</span> pkgs.haskellPackages.override <span class="op">{</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>        <span class="va">overrides</span> <span class="op">=</span> <span class="va">haskellPackagesNew</span><span class="op">:</span> <span class="va">haskellPackagesOld</span><span class="op">:</span> <span class="op">{</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>          <span class="va">site</span> <span class="op">=</span> haskellPackagesNew.callPackage <span class="ss">./site.nix</span> <span class="op">{};</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>        <span class="op">};</span></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>      <span class="op">};</span></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>    <span class="op">};</span></span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>  <span class="op">};</span></span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a>  <span class="va">pkgs</span> <span class="op">=</span> <span class="bu">import</span> &lt;nixpkgs&gt; <span class="op">{</span> <span class="kw">inherit</span> config<span class="op">;</span> <span class="op">};</span></span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a><span class="kw">in</span> pkgs.haskellPackages.site;</span></code></pre></div>
<p>This will extend default package set with my custom <code>site</code> package.</p>
<p>Next thing we need to do is to add overrides for Hakyll. We’re going to use
version already available to us in haskellPackages and just apply desired changes.
For start we need to configure projects with <code>watchServer</code> and <code>previewServer</code> flags:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="co">#...</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>      haskellPackages = pkgs.haskellPackages.override <span class="op">{</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>        <span class="va">overrides</span> <span class="op">=</span> <span class="va">haskellPackagesNew</span><span class="op">:</span> <span class="va">haskellPackagesOld</span><span class="op">:</span> <span class="op">{</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>          <span class="va">hakyll</span> <span class="op">=</span> haskellPackagesOld.hakyll.overrideAttrs<span class="op">(</span><span class="va">old</span><span class="op">:</span> <span class="op">{</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>            <span class="va">configureFlags</span> <span class="op">=</span> <span class="st">&quot;-f watchServer -f previewServer&quot;</span><span class="op">;</span> <span class="co"># pass configure flags</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>            <span class="va">jailbreak</span> <span class="op">=</span> <span class="cn">true</span><span class="op">;</span> <span class="co"># jailbreak dependecies</span></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>          <span class="op">});</span></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a>          <span class="va">site</span> <span class="op">=</span> haskellPackagesNew.callPackage <span class="ss">./site.nix</span> <span class="op">{};</span></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>        <span class="op">};</span></span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a>      <span class="op">}</span>;</span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a><span class="co">#...</span></span></code></pre></div>
<p>This is as far as I know not documented but it’s easy enough to reverse engineer from the <a href="https://github.com/NixOS/nixpkgs/blob/3285f0f2ff36aea7d5e87520a3e9ef66c44f87b8/pkgs/development/haskell-modules/generic-builder.nix#L21">generir-builder.nix</a>.</p>
<p>At this stage build fails for me though because of unavailable version of <a href="https://hackage.haskell.org/package/warp">warp</a>.
I assume this is because <code>jailbreak</code> doesn’t work correctly with flag directive.</p>
<p>To solve this problem I’m going to define custom patch for Hakyll.
I usually use git to produce patches.</p>
<ol type="1">
<li>git clone the repository</li>
<li>do desired changes to source locally</li>
<li>run <code>git diff &gt; file.patch</code> to produce patch file</li>
</ol>
<p><strong><a href="https://github.com/turboMaCk/turboMaCk.github.io/blob/33a9435e81e241ec2ea6251101e35b9a522e2793/hakyll.patch">Patch file</a> I’m using.</strong></p>
<p>The simplest way to apply custom patches in nix expression is to use <code>patches</code> attribute as follows:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="co">#...</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>      haskellPackages = pkgs.haskellPackages.override <span class="op">{</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>        <span class="va">overrides</span> <span class="op">=</span> <span class="va">haskellPackagesNew</span><span class="op">:</span> <span class="va">haskellPackagesOld</span><span class="op">:</span> <span class="op">{</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>          <span class="va">hakyll</span> <span class="op">=</span> haskellPackagesOld.hakyll.overrideAttrs<span class="op">(</span><span class="va">old</span><span class="op">:</span> <span class="op">{</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>            <span class="va">configureFlags</span> <span class="op">=</span> <span class="st">&quot;-f watchServer -f previewServer&quot;</span><span class="op">;</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a>            <span class="va">patches</span> <span class="op">=</span> <span class="op">[</span><span class="ss">./hakyll.patch</span><span class="op">];</span> <span class="co"># applying our custom patch</span></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a>          <span class="op">});</span></span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a>          <span class="va">site</span> <span class="op">=</span> haskellPackagesNew.callPackage <span class="ss">./site.nix</span> <span class="op">{};</span></span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a>        <span class="op">};</span></span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a>      <span class="op">}</span>;</span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a><span class="co">#...</span></span></code></pre></div>
<p>Now we have build for our <code>site</code> binary using the customized version of Hakyll
with support for <code>watch</code> command.</p>
<h1 id="conclusion">Conclusion</h1>
<p>More than anything this demonstrates how frustrating it sometimes can be to use software.
I wanted to blog about something but ended up fixing build and then writing this tutorial instead.
A big part of using software is about putting through with
things like this. There is always some trade-off with tools and approaches we use.
For me personally it’s important above all to be able to go and fix issues myself without going completely crazy
in the process. Both Haskell and Nix are good tools for this. On the other hand neither of them
is the most effective way of avoiding problems like in first place.</p>
<p>I’m not going to rant about the state of the software.
Neither I’m going to praise tools I use. I’m writing this post with two goals:</p>
<ol type="1">
<li>As a mostly copy paste tutorial for folks who might run into similar issues.</li>
<li>As an exercise for reader to see both power and cost of getting things done with tools like these.</li>
</ol>
<p><strong><strong>Whole code can be found on <a href="https://github.com/turboMaCk/turboMaCk.github.io/tree/33a9435e81e241ec2ea6251101e35b9a522e2793">GitHub</a></strong></strong></p>
<section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p><code>jailbreak</code> attribute or <code>doJailbreak</code> function are used to remove version constrains from cabal file
so package can be build with other version of dependencies present in used haskellPackages set.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>]]></description>
    <pubDate>Mon, 17 Feb 2020 00:00:00 UT</pubDate>
    <guid>http://turbomack.github.iuo/posts/2020-02-17-cabal-flags-and-nix.html</guid>
    <dc:creator>Marek Fajkus</dc:creator>
</item>
<item>
    <title>Avoiding Pattern Matching</title>
    <link>http://turbomack.github.iuo/posts/2019-08-14-avoiding-pattern-matching-refunctionalization.html</link>
    <description><![CDATA[<p>A few days ago, my colleague <a href="https://twitter.com/janiczek">Martin Janiczek</a> published a post on his blog called
<a href="http://martin.janiczek.cz/clanek/defunctionalization-in-elm/">Defunctionalization in Elm</a>. In the post, he talks about applying technique from <a href="http://www.jameskoppel.com/">James Koppel</a>’s talk
<a href="https://www.youtube.com/watch?v=vNwukfhsOME">The Best Refactoring You’ve Never Heard Of</a>.</p>
<p>The talk itself describes a sort of isomorphism between continuations and data and
a way to refactor between the two. This is probably not as life changing information
for experienced functional programmers as it might be for people with only imperative
programming background but I recommend you to watch this talk especially because it
establishes a good base and terminology for talking about this relationship.</p>
<p>The talk also describes a relation between CSP and iteration, which is what I wanted to talk about in the last part
of my “Deeper Dive To (Tail) Recursion” series of write-ups that I haven’t finished
as my focus shifted. You can find <a href="./2017-02-12-recursion.html">part 1</a> and <a href="./2017-04-09-tail-recursion.html">part 2</a> in <a href="../archive.html">archive</a>.</p>
<p>I’m personally not a fan of “over-usage” of sum types and pattern matching and I disagree
that changes Martin describes in his post are better than the original code.
But I haven’t planned to write a post about this until
another friend of mine asked me if I can write something about the topic we’ve discussed together
on several occations — <em>Why I believe that the pattern matching is often misused
and why I think that in many cases it’s desirable to avoid it completely.</em></p>
<p>I’m going to use the code from Martin’s article to describe what I believe is one common
case of misuse of pattern matching and why I believe that the implementation avoiding
its usage is more composable and scalable. The only reason why I’m basing this
on Martin’s article is that this will offer the reader to see
two opposite views on the same example implementation. That will also help the reader to see,
that in fact, there is a trade-off when making design decisions like this one.</p>
<div class="vocabulary">
<p>I’ll try my best to use consist terminology within the scope of this article.
Just keep in mind that this is just a blog post and not an academic article though so expect simplifications.</p>
<p><strong>Data</strong> are constructed from primitive types. Functions are not data.</p>
<p>A <strong>function</strong> is a pure<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a> mathematical computation.</p>
<p>A <strong>value</strong> is any thing that can be passed or returned by a function.
It can be either a datum or a function<a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a>.</p>
<p>A <strong>sum type</strong> is a type in which final set of values is sum of declared cases:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">Bool</span> <span class="op">=</span> <span class="dt">True</span> <span class="op">|</span> <span class="dt">False</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="co">-- bool has True or False values -&gt; 2 constructors</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">Maybe</span> <span class="fu">a</span> <span class="op">=</span> <span class="dt">Noting</span> <span class="op">|</span> <span class="dt">Just</span> <span class="fu">a</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="co">-- maybe is `1 + (1*a)` where a is number of constructors for a</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a><span class="co">-- Maybe Bool is `1 + (1*2)` -&gt; 3 (Nothing, Just True, Just False)</span></span></code></pre></div>
<p>Enums and all primitive data are sums. Like a bit being either 0 or 1 but not both at the same time<a href="#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a>.</p>
<p>A <strong>product type</strong> is a type where final set of possible values is a product of all individual subtypes:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">MyPair</span> <span class="op">=</span> <span class="dt">MyPair</span> <span class="dt">Bool</span> <span class="dt">Bool</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="co">-- MyPair is a product of two Bools -&gt; 2 * 2 -&gt; 4</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="kw">alias</span> <span class="dt">WithBool</span> <span class="fu">a</span> <span class="op">=</span> (<span class="fu">a</span><span class="op">,</span> <span class="dt">Bool</span>)</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="co">-- WithBool is a * 2 where a is number of a constuctors</span></span></code></pre></div>
<p>Records and tuples are a common way of constructing products.</p>
<p><strong>Algebraic Data Type</strong> is a type constructed using sums, products and combinations of both.</p>
<p><strong>Pattern matching</strong> is a language feature that allows to deconstruct value of a type by extracting parts of product
and branching over sum.</p>
<p><strong>Closed</strong> implementation is an implementation where all valid inputs are predetermined by types
used within its interface.</p>
<p><strong>Opened</strong> implementation is an implementation using interface that doesn’t restrict
where and how the data it uses are constructed as long as some type contract is satisfied.</p>
</div>
<h1 id="getting-started">Getting Started</h1>
<p>The actual implementation is a bit more involved but for the purpose of
this post, we can simply mock it using types with these purposes:</p>
<ul>
<li><code>Flags</code> is a type contained app configuration and contains data necessary for creating requests</li>
<li><code>Store</code> is a type in which we store data from server</li>
<li><code>Config msg</code> contains configuration for of the module (in reality it’s record of functions, for simplification we’re going to use a single function)</li>
<li><code>Msg</code> is a sum type of a different types of messages requests generate.</li>
</ul>
<p>mocking all of those with types isomorphic to unit looks like this:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="kw">module</span> <span class="dt">Store</span> <span class="kw">exposing</span> (<span class="op">..</span>)</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">Flags</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>    <span class="op">=</span> <span class="dt">Flags</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">Store</span></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>    <span class="op">=</span> <span class="dt">Store</span></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="kw">alias</span> <span class="dt">Config</span> <span class="fu">msg</span> <span class="op">=</span></span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Msg</span> <span class="op">-&gt;</span> <span class="fu">msg</span></span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">Msg</span></span>
<span id="cb3-16"><a href="#cb3-16" aria-hidden="true" tabindex="-1"></a>    <span class="op">=</span> <span class="dt">Msg</span></span></code></pre></div>
<p>This part of the Store module is not changing in between different implementations,
but it’s important as the other code we’re about to write uses these types.</p>
<div class="note">
<p>The fact that we’re mocking with type wit dummy values will make the rest of the
code look a bit useless. You must believe me that all of this fits
into working implementation and has its purpose.</p>
</div>
<h1 id="version-with-sum-type-and-pattern-matching">Version with Sum Type and Pattern Matching</h1>
<p>The <em>defunctionalized</em> version (the one proposed by Martin) follows like this:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="kw">alias</span> <span class="dt">FetchConfig</span> <span class="fu">a</span> <span class="fu">b</span> <span class="op">=</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>    { <span class="fu">update</span> : <span class="fu">a</span> <span class="op">-&gt;</span> <span class="dt">Store</span> <span class="op">-&gt;</span> <span class="dt">Store</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>    <span class="op">,</span> <span class="fu">done</span> : <span class="dt">Maybe</span> <span class="fu">b</span> <span class="op">-&gt;</span> <span class="dt">Cmd</span> <span class="dt">Msg</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>    }</span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a><span class="fu">fetch_</span> : <span class="dt">FetchConfig</span> <span class="fu">a</span> <span class="fu">b</span> <span class="op">-&gt;</span> <span class="dt">Config</span> <span class="fu">msg</span> <span class="op">-&gt;</span> <span class="dt">Flags</span> <span class="op">-&gt;</span> <span class="dt">Store</span> <span class="op">-&gt;</span> ( <span class="dt">Store</span><span class="op">,</span> <span class="dt">Cmd</span> <span class="fu">msg</span> )</span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a><span class="fu">fetch_</span> { <span class="fu">done</span> } <span class="fu">toMsg</span> <span class="dt">Flags</span> <span class="dt">Store</span> <span class="op">=</span></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>    ( <span class="dt">Store</span><span class="op">,</span> <span class="dt">Cmd</span><span class="op">.</span><span class="fu">map</span> <span class="fu">toMsg</span> <span class="op">&lt;|</span> <span class="fu">done</span> <span class="dt">Nothing</span> )</span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">FetchAction</span></span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a>    <span class="op">=</span> <span class="dt">FetchFoo</span></span>
<span id="cb4-14"><a href="#cb4-14" aria-hidden="true" tabindex="-1"></a>    <span class="op">|</span> <span class="dt">FetchBar</span></span>
<span id="cb4-15"><a href="#cb4-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-16"><a href="#cb4-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-17"><a href="#cb4-17" aria-hidden="true" tabindex="-1"></a><span class="fu">fetch</span> : <span class="dt">FetchAction</span> <span class="op">-&gt;</span> <span class="dt">Config</span> <span class="fu">msg</span> <span class="op">-&gt;</span> <span class="dt">Flags</span> <span class="op">-&gt;</span> <span class="dt">Store</span> <span class="op">-&gt;</span> ( <span class="dt">Store</span><span class="op">,</span> <span class="dt">Cmd</span> <span class="fu">msg</span> )</span>
<span id="cb4-18"><a href="#cb4-18" aria-hidden="true" tabindex="-1"></a><span class="fu">fetch</span> <span class="fu">action</span> <span class="op">=</span></span>
<span id="cb4-19"><a href="#cb4-19" aria-hidden="true" tabindex="-1"></a>    <span class="cf">case</span> <span class="fu">action</span> <span class="cf">of</span></span>
<span id="cb4-20"><a href="#cb4-20" aria-hidden="true" tabindex="-1"></a>        <span class="dt">FetchFoo</span> <span class="op">-&gt;</span></span>
<span id="cb4-21"><a href="#cb4-21" aria-hidden="true" tabindex="-1"></a>            <span class="fu">fetch_</span></span>
<span id="cb4-22"><a href="#cb4-22" aria-hidden="true" tabindex="-1"></a>                { <span class="fu">update</span> <span class="op">=</span> <span class="fu">always</span></span>
<span id="cb4-23"><a href="#cb4-23" aria-hidden="true" tabindex="-1"></a>                <span class="op">,</span> <span class="fu">done</span> <span class="op">=</span> <span class="fu">always</span> <span class="dt">Cmd</span><span class="op">.</span><span class="fu">none</span></span>
<span id="cb4-24"><a href="#cb4-24" aria-hidden="true" tabindex="-1"></a>                }</span>
<span id="cb4-25"><a href="#cb4-25" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-26"><a href="#cb4-26" aria-hidden="true" tabindex="-1"></a>        <span class="dt">FetchBar</span> <span class="op">-&gt;</span></span>
<span id="cb4-27"><a href="#cb4-27" aria-hidden="true" tabindex="-1"></a>            <span class="fu">fetch_</span></span>
<span id="cb4-28"><a href="#cb4-28" aria-hidden="true" tabindex="-1"></a>                { <span class="fu">update</span> <span class="op">=</span> <span class="fu">always</span></span>
<span id="cb4-29"><a href="#cb4-29" aria-hidden="true" tabindex="-1"></a>                <span class="op">,</span> <span class="fu">done</span> <span class="op">=</span> <span class="fu">always</span> <span class="dt">Cmd</span><span class="op">.</span><span class="fu">none</span></span>
<span id="cb4-30"><a href="#cb4-30" aria-hidden="true" tabindex="-1"></a>                }</span>
<span id="cb4-31"><a href="#cb4-31" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-32"><a href="#cb4-32" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-33"><a href="#cb4-33" aria-hidden="true" tabindex="-1"></a><span class="fu">fetchMany</span> : <span class="dt">List</span> <span class="dt">FetchAction</span> <span class="op">-&gt;</span> <span class="dt">Config</span> <span class="fu">msg</span> <span class="op">-&gt;</span> <span class="dt">Flags</span> <span class="op">-&gt;</span> <span class="dt">Store</span> <span class="op">-&gt;</span> ( <span class="dt">Store</span><span class="op">,</span> <span class="dt">Cmd</span> <span class="fu">msg</span> )</span>
<span id="cb4-34"><a href="#cb4-34" aria-hidden="true" tabindex="-1"></a><span class="fu">fetchMany</span> <span class="fu">actions</span> <span class="fu">config</span> <span class="fu">flags</span> <span class="fu">store</span> <span class="op">=</span></span>
<span id="cb4-35"><a href="#cb4-35" aria-hidden="true" tabindex="-1"></a>    <span class="dt">List</span><span class="op">.</span><span class="fu">foldl</span></span>
<span id="cb4-36"><a href="#cb4-36" aria-hidden="true" tabindex="-1"></a>        (\<span class="fu">action</span> ( <span class="fu">store_</span><span class="op">,</span> <span class="fu">cmd</span> ) <span class="op">-&gt;</span></span>
<span id="cb4-37"><a href="#cb4-37" aria-hidden="true" tabindex="-1"></a>            <span class="kw">let</span></span>
<span id="cb4-38"><a href="#cb4-38" aria-hidden="true" tabindex="-1"></a>                ( <span class="fu">newStore</span><span class="op">,</span> <span class="fu">newCmd</span> ) <span class="op">=</span></span>
<span id="cb4-39"><a href="#cb4-39" aria-hidden="true" tabindex="-1"></a>                    <span class="fu">fetch</span> <span class="fu">action</span> <span class="fu">config</span> <span class="fu">flags</span> <span class="fu">store_</span></span>
<span id="cb4-40"><a href="#cb4-40" aria-hidden="true" tabindex="-1"></a>            <span class="kw">in</span></span>
<span id="cb4-41"><a href="#cb4-41" aria-hidden="true" tabindex="-1"></a>            ( <span class="fu">newStore</span><span class="op">,</span> <span class="dt">Cmd</span><span class="op">.</span><span class="fu">batch</span> [ <span class="fu">cmd</span><span class="op">,</span> <span class="fu">newCmd</span> ] )</span>
<span id="cb4-42"><a href="#cb4-42" aria-hidden="true" tabindex="-1"></a>        )</span>
<span id="cb4-43"><a href="#cb4-43" aria-hidden="true" tabindex="-1"></a>        ( <span class="fu">store</span><span class="op">,</span> <span class="dt">Cmd</span><span class="op">.</span><span class="fu">none</span> )</span>
<span id="cb4-44"><a href="#cb4-44" aria-hidden="true" tabindex="-1"></a>        <span class="fu">actions</span></span></code></pre></div>
<p>I would like to highlight some properties of this approach:</p>
<ul>
<li><code>FetchConfig msg</code> is sort of intermediate structure, a product of all the data that differ for each type of request.</li>
<li><code>fetch_</code> is a helper function translating the <code>FlagConfig msg</code> to another (not visible in this example) API.</li>
<li><code>FetchAction</code> type is a point of coupling. Sum of all possible actions.</li>
<li><code>fetch</code> does just a branching for different actions.</li>
<li><code>fetchMany</code> folds actions and aggregates state and commands.</li>
</ul>
<p>And this is how the usage looks of this API looks like:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="kw">module</span> <span class="dt">Main</span> <span class="kw">exposing</span> (<span class="op">..</span>)</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Store</span> <span class="kw">exposing</span> (<span class="dt">Flags</span><span class="op">,</span> <span class="dt">Store</span>)</span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">Msg</span></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a>    <span class="op">=</span> <span class="dt">StoreMsg</span> <span class="dt">Store</span><span class="op">.</span><span class="dt">Msg</span></span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a><span class="fu">caller</span> : ( <span class="dt">Store</span><span class="op">,</span> <span class="dt">Cmd</span> <span class="dt">Msg</span> )</span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a><span class="fu">caller</span> <span class="op">=</span></span>
<span id="cb5-12"><a href="#cb5-12" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Store</span><span class="op">.</span><span class="fu">fetchMany</span> [ <span class="dt">Store</span><span class="op">.</span><span class="dt">FetchFoo</span><span class="op">,</span> <span class="dt">Store</span><span class="op">.</span><span class="dt">FetchBar</span> ] <span class="dt">StoreMsg</span> <span class="dt">Flags</span> <span class="dt">Store</span></span></code></pre></div>
<p>The <code>caller</code> is a function that calls API of the Store module.</p>
<div class="note">
<p>Seeing this I’m tempted to argue that putting the list argument as a last one
would be better in this case as then it would be possible to first configure the function by applying arguments
and than calling the function returned with different actions. Also in elm it would be possible to format
it a bit nicely with <code>|&gt;</code> like</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="fu">caller</span> : ( <span class="dt">Store</span><span class="op">,</span> <span class="dt">Cmd</span> <span class="dt">Msg</span> )</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a><span class="fu">caller</span> <span class="op">=</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>    [ <span class="dt">Store</span><span class="op">.</span><span class="dt">FetchFoo</span><span class="op">,</span> <span class="dt">Store</span><span class="op">.</span><span class="dt">FetchBar</span> ]</span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>      <span class="op">|&gt;</span> <span class="fu">fetchMany</span> <span class="fu">configForA</span> <span class="dt">Flags</span> <span class="dt">Store</span></span></code></pre></div>
<p>But in the reality we use yet another abstraction that expects the last value
to be state of the store so this API is better.</p>
</div>
<p>No matter how hard I try to look at the version with pattern matching over the sum type,
I don’t see how it makes things simpler. In fact, I think the only benefit gained from doing all of this
was just that in the process, Martin reconstructed the functionality which helps with understanding it.</p>
<p>Data constructors are, in essence, just constants and functions.
The only thing which makes them different is that unlike regular constants and functions,
their names start with an uppercase and not a lowercase letter.
Well, there is another thing that makes them different.
<strong>Pattern matching is basically branching over data constructors</strong>
and thus is unique for cases when working with values other than functions and opaque aliases.</p>
<div class="note">
<p>I think it’s fair to say that arguing for API build around data constructors
is therefore same, or at least often same, as arguing for usage of pattern matching
in the actual implementation.
But there are some other (more or less) good arguments for using data over functions:</p>
<ul>
<li>Serialization (over wire)<a href="#fn4" class="footnote-ref" id="fnref4" role="doc-noteref"><sup>4</sup></a></li>
<li>Equality, Ordering and other operations that can’t work with functions<a href="#fn5" class="footnote-ref" id="fnref5" role="doc-noteref"><sup>5</sup></a></li>
<li>Debugging is simpler with data (printing)<a href="#fn6" class="footnote-ref" id="fnref6" role="doc-noteref"><sup>6</sup></a></li>
</ul>
</div>
<h1 id="decoupling-by-refunctionalization">Decoupling by Refunctionalization</h1>
<p>What I dislike about this defunctionalized implementation is that the <code>fetch</code> function now couples all the individual usages together. In other words, we can say that the API is closed over the <code>FetchAction</code> type.</p>
<p>Let’s see how it would look like if we replaced the <code>FetchAction</code> sum by individual constants.
Instead of having <code>FetchAction</code> type containing all the constants (constructors),
we’re going to have a bunch of constants of the same type.</p>
<p>First, we just define a type without worrying about details.</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">FetchAction</span> <span class="op">=</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>    <span class="dt">FetchAction</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a><span class="fu">fetchFoo</span> : <span class="dt">FetchAction</span></span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a><span class="fu">fetchFoo</span> <span class="op">=</span> <span class="dt">Debug</span><span class="op">.</span><span class="fu">todo</span> <span class="st">&quot;implement me&quot;</span></span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a><span class="fu">fetchBar</span> : <span class="dt">FetchAction</span></span>
<span id="cb7-10"><a href="#cb7-10" aria-hidden="true" tabindex="-1"></a><span class="fu">fetchBar</span> <span class="op">=</span> <span class="dt">Debug</span><span class="op">.</span><span class="fu">todo</span> <span class="st">&quot;implement me&quot;</span></span></code></pre></div>
<p>We expect these functions to do everything so there is no need for <code>fetch</code> and <code>fetch_</code> helpers.</p>
<p>Now when we know how our API should look like, let’s fill the implementation details.
Starting with <code>FetchData</code> which is itself just a function:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">FetchAction</span> <span class="fu">msg</span> <span class="op">=</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>    <span class="dt">FetchAction</span> (<span class="dt">Config</span> <span class="fu">msg</span> <span class="op">-&gt;</span> <span class="dt">Flags</span> <span class="op">-&gt;</span> <span class="dt">Store</span> <span class="op">-&gt;</span> ( <span class="dt">Store</span><span class="op">,</span> <span class="dt">Cmd</span> <span class="fu">msg</span> ))</span></code></pre></div>
<p>I’m wrapping a function to a constructor for extra clarity — to make it look more like a special value.
Martin also mentions this in his post:</p>
<blockquote>
<p>And now, because the <code>fetchMenu</code> type annotation no longer contains any parameterized msg types,
it simplifies all types that touch it to the point where we don’t need to <code>Cmd.map</code> the <code>Msg</code> at all!</p>
</blockquote>
<p>We will need to give up this simplification in our version.
We need this polymorphism in our new API.
The implementation for new <code>FetchAction</code> type might look like something like this:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="fu">fetchFoo</span> : <span class="dt">FetchAction</span> <span class="fu">msg</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a><span class="fu">fetchFoo</span> <span class="op">=</span></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a>    <span class="dt">FetchAction</span> <span class="op">&lt;|</span></span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a>        \<span class="fu">toMsg</span> <span class="dt">Flags</span> <span class="dt">Store</span> <span class="op">-&gt;</span> ( <span class="fu">store</span><span class="op">,</span> <span class="dt">Cmd</span><span class="op">.</span><span class="fu">map</span> <span class="fu">toMsg</span> <span class="dt">Cmd</span><span class="op">.</span><span class="fu">none</span> )</span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a><span class="fu">fetchBar</span> : <span class="dt">FetchAction</span> <span class="fu">msg</span></span>
<span id="cb9-8"><a href="#cb9-8" aria-hidden="true" tabindex="-1"></a><span class="fu">fetchBar</span> <span class="op">=</span></span>
<span id="cb9-9"><a href="#cb9-9" aria-hidden="true" tabindex="-1"></a>    <span class="dt">FetchAction</span> <span class="op">&lt;|</span></span>
<span id="cb9-10"><a href="#cb9-10" aria-hidden="true" tabindex="-1"></a>        \<span class="fu">toMsg</span> <span class="dt">Flags</span> <span class="dt">Store</span> <span class="op">-&gt;</span> ( <span class="fu">store</span><span class="op">,</span> <span class="dt">Cmd</span><span class="op">.</span><span class="fu">map</span> <span class="fu">toMsg</span> <span class="dt">Cmd</span><span class="op">.</span><span class="fu">none</span> )</span></code></pre></div>
<div class="note">
<p>If you have a difficult time dealing with the logic involving a lot of higher order function tricks,
you might find this way of thinking useful.</p>
<p>Just forget about functions and data and focus on values. Everything is just a value which you can further reduce and group.
Whenever I have to deal with too many things at once, I try to look for some pattern.
If I see some repeating part like <code>Foo -&gt; Bar -&gt; a -&gt; List a</code> I know that I can reduce it in head to some <code>Placeholder a</code>.
The only place where you really need to understand the detail is
when you bridge the level of abstraction to the level in which you need to concern yourself with individual pieces of this value.</p>
<p>This works well with full-blown continuations or higher order functions in general.
The key is to understand how two different things can be viewed as the same thing on some level
of abstraction.</p>
<p>In context of this article, the important thing to understand is that:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">Fruit</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a>    <span class="op">=</span> <span class="dt">Apple</span></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a>    <span class="op">|</span> <span class="dt">Orange</span></span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a><span class="fu">color</span> : <span class="dt">Fruit</span> <span class="op">-&gt;</span> <span class="dt">String</span></span>
<span id="cb10-7"><a href="#cb10-7" aria-hidden="true" tabindex="-1"></a><span class="fu">color</span> <span class="fu">fruit</span> <span class="op">=</span></span>
<span id="cb10-8"><a href="#cb10-8" aria-hidden="true" tabindex="-1"></a>    <span class="cf">case</span> <span class="fu">fruit</span> <span class="cf">of</span></span>
<span id="cb10-9"><a href="#cb10-9" aria-hidden="true" tabindex="-1"></a>        <span class="dt">Apple</span> <span class="op">-&gt;</span></span>
<span id="cb10-10"><a href="#cb10-10" aria-hidden="true" tabindex="-1"></a>            <span class="st">&quot;green&quot;</span></span>
<span id="cb10-11"><a href="#cb10-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-12"><a href="#cb10-12" aria-hidden="true" tabindex="-1"></a>        <span class="dt">Oragne</span> <span class="op">-&gt;</span></span>
<span id="cb10-13"><a href="#cb10-13" aria-hidden="true" tabindex="-1"></a>            <span class="st">&quot;orange&quot;</span></span></code></pre></div>
<p>is on some level same as</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- In Elm we get `.color : Fruit -&gt; String` for free</span></span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="kw">alias</span> <span class="dt">Fruit</span> <span class="op">=</span></span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a>    { <span class="fu">color</span> : <span class="dt">String</span> }</span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-6"><a href="#cb11-6" aria-hidden="true" tabindex="-1"></a><span class="fu">apple</span> : <span class="dt">Fruit</span></span>
<span id="cb11-7"><a href="#cb11-7" aria-hidden="true" tabindex="-1"></a><span class="fu">apple</span> <span class="op">=</span></span>
<span id="cb11-8"><a href="#cb11-8" aria-hidden="true" tabindex="-1"></a>    { <span class="fu">color</span> <span class="op">=</span> <span class="st">&quot;green&quot;</span> }</span>
<span id="cb11-9"><a href="#cb11-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-10"><a href="#cb11-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-11"><a href="#cb11-11" aria-hidden="true" tabindex="-1"></a><span class="fu">orange</span> : <span class="dt">Fruit</span></span>
<span id="cb11-12"><a href="#cb11-12" aria-hidden="true" tabindex="-1"></a><span class="fu">orange</span> <span class="op">=</span></span>
<span id="cb11-13"><a href="#cb11-13" aria-hidden="true" tabindex="-1"></a>    { <span class="fu">color</span> <span class="op">=</span> <span class="st">&quot;orange&quot;</span> }</span></code></pre></div>
<p>But both implementation are different on another level.
Defining <code>Fruit</code> via sum creates a <strong>closed set</strong> of values.
Defining it as a product of properties creates an <strong>open set</strong> of values.</p>
<p>It’s even possible to define something like this:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">Fruit</span> <span class="fu">a</span></span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a>    <span class="op">=</span> <span class="dt">Fruit</span> <span class="fu">a</span> (<span class="fu">a</span> <span class="op">-&gt;</span> <span class="dt">String</span>)</span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-4"><a href="#cb12-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-5"><a href="#cb12-5" aria-hidden="true" tabindex="-1"></a><span class="fu">getColor</span> : <span class="dt">Fruit</span> <span class="fu">a</span> <span class="op">-&gt;</span> <span class="dt">String</span></span>
<span id="cb12-6"><a href="#cb12-6" aria-hidden="true" tabindex="-1"></a><span class="fu">getColor</span> (<span class="dt">Fruit</span> <span class="fu">val</span> <span class="fu">getColor_</span>) <span class="op">=</span></span>
<span id="cb12-7"><a href="#cb12-7" aria-hidden="true" tabindex="-1"></a>    <span class="fu">getColor_</span> <span class="fu">val</span></span>
<span id="cb12-8"><a href="#cb12-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-9"><a href="#cb12-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-10"><a href="#cb12-10" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">MyFruit</span></span>
<span id="cb12-11"><a href="#cb12-11" aria-hidden="true" tabindex="-1"></a>    <span class="op">=</span> <span class="dt">Apple</span></span>
<span id="cb12-12"><a href="#cb12-12" aria-hidden="true" tabindex="-1"></a>    <span class="op">|</span> <span class="dt">Orange</span></span>
<span id="cb12-13"><a href="#cb12-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-14"><a href="#cb12-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-15"><a href="#cb12-15" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="kw">alias</span> <span class="dt">SpecialFruit</span> <span class="op">=</span></span>
<span id="cb12-16"><a href="#cb12-16" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Fruit</span> <span class="dt">MyFruit</span></span>
<span id="cb12-17"><a href="#cb12-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-18"><a href="#cb12-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-19"><a href="#cb12-19" aria-hidden="true" tabindex="-1"></a><span class="fu">specialFruit</span> : <span class="dt">MyFruit</span> <span class="op">-&gt;</span> <span class="dt">SpecialFruit</span></span>
<span id="cb12-20"><a href="#cb12-20" aria-hidden="true" tabindex="-1"></a><span class="fu">specialFruit</span> <span class="fu">a</span> <span class="op">=</span></span>
<span id="cb12-21"><a href="#cb12-21" aria-hidden="true" tabindex="-1"></a>    (\<span class="fu">myFruit</span> <span class="op">-&gt;</span></span>
<span id="cb12-22"><a href="#cb12-22" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="fu">myFruit</span> <span class="cf">of</span></span>
<span id="cb12-23"><a href="#cb12-23" aria-hidden="true" tabindex="-1"></a>            <span class="dt">Apple</span> <span class="op">-&gt;</span></span>
<span id="cb12-24"><a href="#cb12-24" aria-hidden="true" tabindex="-1"></a>                <span class="st">&quot;green&quot;</span></span>
<span id="cb12-25"><a href="#cb12-25" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-26"><a href="#cb12-26" aria-hidden="true" tabindex="-1"></a>            <span class="dt">Orange</span> <span class="op">-&gt;</span></span>
<span id="cb12-27"><a href="#cb12-27" aria-hidden="true" tabindex="-1"></a>                <span class="st">&quot;orange&quot;</span></span>
<span id="cb12-28"><a href="#cb12-28" aria-hidden="true" tabindex="-1"></a>    )</span>
<span id="cb12-29"><a href="#cb12-29" aria-hidden="true" tabindex="-1"></a>        <span class="op">|&gt;</span> <span class="dt">Fruit</span> <span class="fu">a</span></span>
<span id="cb12-30"><a href="#cb12-30" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-31"><a href="#cb12-31" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-32"><a href="#cb12-32" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">MyFruit2</span></span>
<span id="cb12-33"><a href="#cb12-33" aria-hidden="true" tabindex="-1"></a>    <span class="op">=</span> <span class="dt">Rapsberry</span></span>
<span id="cb12-34"><a href="#cb12-34" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-35"><a href="#cb12-35" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-36"><a href="#cb12-36" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="kw">alias</span> <span class="dt">OtherFruit</span> <span class="op">=</span></span>
<span id="cb12-37"><a href="#cb12-37" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Fruit</span> <span class="dt">MyFruit2</span></span>
<span id="cb12-38"><a href="#cb12-38" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-39"><a href="#cb12-39" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-40"><a href="#cb12-40" aria-hidden="true" tabindex="-1"></a><span class="fu">repsberry</span> : <span class="dt">OtherFruit</span></span>
<span id="cb12-41"><a href="#cb12-41" aria-hidden="true" tabindex="-1"></a><span class="fu">repsberry</span> <span class="op">=</span></span>
<span id="cb12-42"><a href="#cb12-42" aria-hidden="true" tabindex="-1"></a>    <span class="fu">always</span> <span class="st">&quot;red&quot;</span></span>
<span id="cb12-43"><a href="#cb12-43" aria-hidden="true" tabindex="-1"></a>        <span class="op">|&gt;</span> <span class="dt">Fruit</span> <span class="dt">Rapsberry</span></span>
<span id="cb12-44"><a href="#cb12-44" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-45"><a href="#cb12-45" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-46"><a href="#cb12-46" aria-hidden="true" tabindex="-1"></a><span class="fu">caller</span> : <span class="dt">List</span> <span class="dt">String</span></span>
<span id="cb12-47"><a href="#cb12-47" aria-hidden="true" tabindex="-1"></a><span class="fu">caller</span> <span class="op">=</span></span>
<span id="cb12-48"><a href="#cb12-48" aria-hidden="true" tabindex="-1"></a>    <span class="dt">List</span><span class="op">.</span><span class="fu">map</span> <span class="fu">getColor</span> [ <span class="fu">specialFruit</span> <span class="dt">Orange</span><span class="op">,</span> <span class="fu">repsberry</span> ]</span></code></pre></div>
<p>Even though this last example seems odd for a simple case like this,
it sort of merges the properties of the two previous implementations.
This is how type classes are sometimes simulated in languages which don’t have them (like Elm).</p>
<p><code>Fruit a</code> acts like a <code>class</code> of types. <code>MyFruit</code> is then sort of <code>instance</code> of this class.
Obviously, without first-class support for such abstraction, it’s usually impractical to work with it.
This is why in a language without higher order (ad hoc) polymorphism, it might be often
favorable to avoid data in favor of keeping value set opened.</p>
<p>In languages like Haskell or PureScript, it’s much easier to turn closed types to opened ones using
things like <a href="https://hackage.haskell.org/package/free">Free</a> or by utilizing type classes.</p>
</div>
<p>In <code>fetchMany</code>, we only need a simple change. We no longer need to call <code>fetch</code> function because our argument
now becomes this function itself. Also, since we’re boxing the function into the <code>FetchAction</code> constructor,
we’re going to need to extract it first.</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="fu">fetchMany</span> : <span class="dt">List</span> (<span class="dt">FetchAction</span> <span class="fu">msg</span>) <span class="op">-&gt;</span> <span class="dt">Config</span> <span class="fu">msg</span> <span class="op">-&gt;</span> <span class="dt">Flags</span> <span class="op">-&gt;</span> <span class="dt">Store</span> <span class="op">-&gt;</span> ( <span class="dt">Store</span><span class="op">,</span> <span class="dt">Cmd</span> <span class="fu">msg</span> )</span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a><span class="fu">fetchMany</span> <span class="fu">actions</span> <span class="fu">config</span> <span class="fu">flags</span> <span class="fu">store</span> <span class="op">=</span></span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a>    <span class="dt">List</span><span class="op">.</span><span class="fu">foldl</span></span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true" tabindex="-1"></a>        (\(<span class="dt">FetchAction</span> <span class="fu">action</span>) ( <span class="fu">store_</span><span class="op">,</span> <span class="fu">cmd</span> ) <span class="op">-&gt;</span></span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true" tabindex="-1"></a>            <span class="kw">let</span></span>
<span id="cb13-6"><a href="#cb13-6" aria-hidden="true" tabindex="-1"></a>                ( <span class="fu">newStore</span><span class="op">,</span> <span class="fu">newCmd</span> ) <span class="op">=</span></span>
<span id="cb13-7"><a href="#cb13-7" aria-hidden="true" tabindex="-1"></a>                    <span class="fu">action</span> <span class="fu">config</span> <span class="fu">flags</span> <span class="fu">store_</span></span>
<span id="cb13-8"><a href="#cb13-8" aria-hidden="true" tabindex="-1"></a>            <span class="kw">in</span></span>
<span id="cb13-9"><a href="#cb13-9" aria-hidden="true" tabindex="-1"></a>            ( <span class="fu">newStore</span><span class="op">,</span> <span class="dt">Cmd</span><span class="op">.</span><span class="fu">batch</span> [ <span class="fu">cmd</span><span class="op">,</span> <span class="fu">newCmd</span> ] )</span>
<span id="cb13-10"><a href="#cb13-10" aria-hidden="true" tabindex="-1"></a>        )</span>
<span id="cb13-11"><a href="#cb13-11" aria-hidden="true" tabindex="-1"></a>        ( <span class="fu">store</span><span class="op">,</span> <span class="dt">Cmd</span><span class="op">.</span><span class="fu">none</span> )</span>
<span id="cb13-12"><a href="#cb13-12" aria-hidden="true" tabindex="-1"></a>        <span class="fu">actions</span></span></code></pre></div>
<p><code>FetchAction</code> type now has to be parametrized the same way the <code>fetch</code> function was in the previous version.</p>
<p>Look at the usage now:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a><span class="kw">module</span> <span class="dt">Main</span> <span class="kw">exposing</span> (<span class="op">..</span>)</span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Store</span> <span class="kw">exposing</span> (<span class="dt">Flags</span><span class="op">,</span> <span class="dt">Store</span>)</span>
<span id="cb14-4"><a href="#cb14-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-5"><a href="#cb14-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-6"><a href="#cb14-6" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">Msg</span></span>
<span id="cb14-7"><a href="#cb14-7" aria-hidden="true" tabindex="-1"></a>    <span class="op">=</span> <span class="dt">StoreMsg</span> <span class="dt">Store</span><span class="op">.</span><span class="dt">Msg</span></span>
<span id="cb14-8"><a href="#cb14-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-9"><a href="#cb14-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-10"><a href="#cb14-10" aria-hidden="true" tabindex="-1"></a><span class="fu">caller</span> : ( <span class="dt">Store</span><span class="op">,</span> <span class="dt">Cmd</span> <span class="dt">Msg</span> )</span>
<span id="cb14-11"><a href="#cb14-11" aria-hidden="true" tabindex="-1"></a><span class="fu">caller</span> <span class="op">=</span></span>
<span id="cb14-12"><a href="#cb14-12" aria-hidden="true" tabindex="-1"></a>    <span class="fu">fetchMany</span> [ <span class="dt">Store</span><span class="op">.</span><span class="fu">fetchFoo</span><span class="op">,</span> <span class="dt">Store</span><span class="op">.</span><span class="fu">fetchBar</span> ] <span class="dt">StoreMsg</span> <span class="dt">Flags</span> <span class="dt">Store</span></span></code></pre></div>
<p>See the difference? It’s just <code>Store.FetchFoo</code> for “defunctionalized” version versus <code>Store.fetchFoo</code> in the new one.
Is this more complicated in any way? I let you be the judge.</p>
<h1 id="extensibility">Extensibility</h1>
<p>Since the second example doesn’t contain tight coupling to the same sum type, it can be quite easily extended by composition.
For instance we can generalize the <code>Store</code> module to work with extensible record:</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a><span class="kw">module</span> <span class="dt">Store</span> <span class="kw">exposing</span> (<span class="op">..</span>)</span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-4"><a href="#cb15-4" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">Flags</span></span>
<span id="cb15-5"><a href="#cb15-5" aria-hidden="true" tabindex="-1"></a>    <span class="op">=</span> <span class="dt">Flags</span></span>
<span id="cb15-6"><a href="#cb15-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-7"><a href="#cb15-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-8"><a href="#cb15-8" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="kw">alias</span> <span class="dt">Store</span> <span class="fu">r</span> <span class="op">=</span></span>
<span id="cb15-9"><a href="#cb15-9" aria-hidden="true" tabindex="-1"></a>    { <span class="fu">r</span> <span class="op">|</span> <span class="fu">x</span> : () }</span>
<span id="cb15-10"><a href="#cb15-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-11"><a href="#cb15-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-12"><a href="#cb15-12" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="kw">alias</span> <span class="dt">Config</span> <span class="fu">msg</span> <span class="op">=</span></span>
<span id="cb15-13"><a href="#cb15-13" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Msg</span> <span class="op">-&gt;</span> <span class="fu">msg</span></span>
<span id="cb15-14"><a href="#cb15-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-15"><a href="#cb15-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-16"><a href="#cb15-16" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">Msg</span></span>
<span id="cb15-17"><a href="#cb15-17" aria-hidden="true" tabindex="-1"></a>    <span class="op">=</span> <span class="dt">Msg</span></span>
<span id="cb15-18"><a href="#cb15-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-19"><a href="#cb15-19" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-20"><a href="#cb15-20" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">FetchAction</span> <span class="fu">msg</span> <span class="fu">r</span></span>
<span id="cb15-21"><a href="#cb15-21" aria-hidden="true" tabindex="-1"></a>    <span class="op">=</span> <span class="dt">FetchAction</span> (<span class="dt">Config</span> <span class="fu">msg</span> <span class="op">-&gt;</span> <span class="dt">Flags</span> <span class="op">-&gt;</span> <span class="dt">Store</span> <span class="fu">r</span> <span class="op">-&gt;</span> ( <span class="dt">Store</span> <span class="fu">r</span><span class="op">,</span> <span class="dt">Cmd</span> <span class="fu">msg</span> ))</span>
<span id="cb15-22"><a href="#cb15-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-23"><a href="#cb15-23" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-24"><a href="#cb15-24" aria-hidden="true" tabindex="-1"></a><span class="fu">fetchFoo</span> : <span class="dt">FetchAction</span> <span class="fu">msg</span> <span class="fu">r</span></span>
<span id="cb15-25"><a href="#cb15-25" aria-hidden="true" tabindex="-1"></a><span class="fu">fetchFoo</span> <span class="op">=</span></span>
<span id="cb15-26"><a href="#cb15-26" aria-hidden="true" tabindex="-1"></a>    <span class="dt">FetchAction</span> <span class="op">&lt;|</span></span>
<span id="cb15-27"><a href="#cb15-27" aria-hidden="true" tabindex="-1"></a>        \<span class="fu">toMsg</span> <span class="dt">Flags</span> <span class="fu">store</span> <span class="op">-&gt;</span> ( <span class="fu">store</span><span class="op">,</span> <span class="dt">Cmd</span><span class="op">.</span><span class="fu">map</span> <span class="fu">toMsg</span> <span class="dt">Cmd</span><span class="op">.</span><span class="fu">none</span> )</span>
<span id="cb15-28"><a href="#cb15-28" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-29"><a href="#cb15-29" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-30"><a href="#cb15-30" aria-hidden="true" tabindex="-1"></a><span class="fu">fetchBar</span> : <span class="dt">FetchAction</span> <span class="fu">msg</span> <span class="fu">r</span></span>
<span id="cb15-31"><a href="#cb15-31" aria-hidden="true" tabindex="-1"></a><span class="fu">fetchBar</span> <span class="op">=</span></span>
<span id="cb15-32"><a href="#cb15-32" aria-hidden="true" tabindex="-1"></a>    <span class="dt">FetchAction</span> <span class="op">&lt;|</span></span>
<span id="cb15-33"><a href="#cb15-33" aria-hidden="true" tabindex="-1"></a>        \<span class="fu">toMsg</span> <span class="dt">Flags</span> <span class="fu">store</span> <span class="op">-&gt;</span> ( <span class="fu">store</span><span class="op">,</span> <span class="dt">Cmd</span><span class="op">.</span><span class="fu">map</span> <span class="fu">toMsg</span> <span class="dt">Cmd</span><span class="op">.</span><span class="fu">none</span> )</span>
<span id="cb15-34"><a href="#cb15-34" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-35"><a href="#cb15-35" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-36"><a href="#cb15-36" aria-hidden="true" tabindex="-1"></a><span class="fu">fetchMany</span> : <span class="dt">List</span> (<span class="dt">FetchAction</span> <span class="fu">msg</span> <span class="fu">r</span>) <span class="op">-&gt;</span> <span class="dt">Config</span> <span class="fu">msg</span> <span class="op">-&gt;</span> <span class="dt">Flags</span> <span class="op">-&gt;</span> <span class="dt">Store</span> <span class="fu">r</span> <span class="op">-&gt;</span> ( <span class="dt">Store</span> <span class="fu">r</span><span class="op">,</span> <span class="dt">Cmd</span> <span class="fu">msg</span> )</span>
<span id="cb15-37"><a href="#cb15-37" aria-hidden="true" tabindex="-1"></a><span class="fu">fetchMany</span> <span class="fu">actions</span> <span class="fu">config</span> <span class="fu">flags</span> <span class="fu">store</span> <span class="op">=</span></span>
<span id="cb15-38"><a href="#cb15-38" aria-hidden="true" tabindex="-1"></a>    <span class="dt">List</span><span class="op">.</span><span class="fu">foldl</span></span>
<span id="cb15-39"><a href="#cb15-39" aria-hidden="true" tabindex="-1"></a>        (\(<span class="dt">FetchAction</span> <span class="fu">action</span>) ( <span class="fu">store_</span><span class="op">,</span> <span class="fu">cmd</span> ) <span class="op">-&gt;</span></span>
<span id="cb15-40"><a href="#cb15-40" aria-hidden="true" tabindex="-1"></a>            <span class="kw">let</span></span>
<span id="cb15-41"><a href="#cb15-41" aria-hidden="true" tabindex="-1"></a>                ( <span class="fu">newStore</span><span class="op">,</span> <span class="fu">newCmd</span> ) <span class="op">=</span></span>
<span id="cb15-42"><a href="#cb15-42" aria-hidden="true" tabindex="-1"></a>                    <span class="fu">action</span> <span class="fu">config</span> <span class="fu">flags</span> <span class="fu">store_</span></span>
<span id="cb15-43"><a href="#cb15-43" aria-hidden="true" tabindex="-1"></a>            <span class="kw">in</span></span>
<span id="cb15-44"><a href="#cb15-44" aria-hidden="true" tabindex="-1"></a>            ( <span class="fu">newStore</span><span class="op">,</span> <span class="dt">Cmd</span><span class="op">.</span><span class="fu">batch</span> [ <span class="fu">cmd</span><span class="op">,</span> <span class="fu">newCmd</span> ] )</span>
<span id="cb15-45"><a href="#cb15-45" aria-hidden="true" tabindex="-1"></a>        )</span>
<span id="cb15-46"><a href="#cb15-46" aria-hidden="true" tabindex="-1"></a>        ( <span class="fu">store</span><span class="op">,</span> <span class="dt">Cmd</span><span class="op">.</span><span class="fu">none</span> )</span>
<span id="cb15-47"><a href="#cb15-47" aria-hidden="true" tabindex="-1"></a>        <span class="fu">actions</span></span></code></pre></div>
<p>And extend the store with custom data in the main module:</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a><span class="kw">module</span> <span class="dt">Main</span> <span class="kw">exposing</span> (<span class="op">..</span>)</span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-3"><a href="#cb16-3" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Store</span> <span class="kw">exposing</span> (<span class="dt">Flags</span>)</span>
<span id="cb16-4"><a href="#cb16-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-5"><a href="#cb16-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-6"><a href="#cb16-6" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">Msg</span></span>
<span id="cb16-7"><a href="#cb16-7" aria-hidden="true" tabindex="-1"></a>    <span class="op">=</span> <span class="dt">StoreMsg</span> <span class="dt">Store</span><span class="op">.</span><span class="dt">Msg</span></span>
<span id="cb16-8"><a href="#cb16-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-9"><a href="#cb16-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-10"><a href="#cb16-10" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="kw">alias</span> <span class="dt">ExtendedStore</span> <span class="op">=</span></span>
<span id="cb16-11"><a href="#cb16-11" aria-hidden="true" tabindex="-1"></a>    { <span class="fu">x</span> : ()<span class="op">,</span> <span class="fu">y</span> : () }</span>
<span id="cb16-12"><a href="#cb16-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-13"><a href="#cb16-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-14"><a href="#cb16-14" aria-hidden="true" tabindex="-1"></a><span class="fu">caller</span> : ( <span class="dt">ExtendedStore</span><span class="op">,</span> <span class="dt">Cmd</span> <span class="dt">Msg</span> )</span>
<span id="cb16-15"><a href="#cb16-15" aria-hidden="true" tabindex="-1"></a><span class="fu">caller</span> <span class="op">=</span></span>
<span id="cb16-16"><a href="#cb16-16" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Store</span><span class="op">.</span><span class="fu">fetchMany</span></span>
<span id="cb16-17"><a href="#cb16-17" aria-hidden="true" tabindex="-1"></a>        [ <span class="dt">Store</span><span class="op">.</span><span class="fu">fetchFoo</span></span>
<span id="cb16-18"><a href="#cb16-18" aria-hidden="true" tabindex="-1"></a>        <span class="op">,</span> <span class="dt">Store</span><span class="op">.</span><span class="fu">fetchBar</span></span>
<span id="cb16-19"><a href="#cb16-19" aria-hidden="true" tabindex="-1"></a>        <span class="op">,</span> <span class="fu">fetchBaz</span></span>
<span id="cb16-20"><a href="#cb16-20" aria-hidden="true" tabindex="-1"></a>        ]</span>
<span id="cb16-21"><a href="#cb16-21" aria-hidden="true" tabindex="-1"></a>        <span class="dt">StoreMsg</span></span>
<span id="cb16-22"><a href="#cb16-22" aria-hidden="true" tabindex="-1"></a>        <span class="dt">Flags</span></span>
<span id="cb16-23"><a href="#cb16-23" aria-hidden="true" tabindex="-1"></a>        { <span class="fu">x</span> <span class="op">=</span> ()<span class="op">,</span> <span class="fu">y</span> <span class="op">=</span> () }</span>
<span id="cb16-24"><a href="#cb16-24" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-25"><a href="#cb16-25" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-26"><a href="#cb16-26" aria-hidden="true" tabindex="-1"></a><span class="fu">fetchBaz</span> : <span class="dt">FetchAction</span> <span class="dt">Msg</span> <span class="dt">ExtendedStore</span></span>
<span id="cb16-27"><a href="#cb16-27" aria-hidden="true" tabindex="-1"></a><span class="fu">fetchBaz</span> <span class="op">=</span></span>
<span id="cb16-28"><a href="#cb16-28" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Store</span><span class="op">.</span><span class="dt">FetchAction</span> <span class="op">&lt;|</span></span>
<span id="cb16-29"><a href="#cb16-29" aria-hidden="true" tabindex="-1"></a>        \<span class="fu">toMsg</span> <span class="dt">Flags</span> <span class="fu">store</span> <span class="op">-&gt;</span> ( <span class="fu">store</span><span class="op">,</span> <span class="dt">Cmd</span><span class="op">.</span><span class="fu">none</span> )</span></code></pre></div>
<p>This would not be possible with defunctionalized version.</p>
<h1 id="usage-patterns-with-higher-order-functions">Usage Patterns with Higher Order Functions</h1>
<p>Martin ends his post with showing the screenshot — a part of final diff.
In this code section, he simplified code into an alias to data constructor.
This code was also highlighted in the PR by a comment.</p>
<p>I don’t think this part is significant in any way though. Furthermore, I think it’s avoidable to do something
like this in any shape or form.</p>
<p>Instead of emitting any type of intermediate command, I think the <code>init</code> function should look like this.</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true" tabindex="-1"></a><span class="fu">init</span> : (<span class="dt">List</span> (<span class="dt">FetchAction</span> <span class="fu">msg</span>) <span class="op">-&gt;</span> <span class="dt">Cmd</span> <span class="fu">msg</span>) <span class="op">-&gt;</span> ( ()<span class="op">,</span> <span class="dt">Cmd</span> <span class="fu">msg</span> )</span>
<span id="cb17-2"><a href="#cb17-2" aria-hidden="true" tabindex="-1"></a><span class="fu">init</span> <span class="fu">fetchMany</span> <span class="op">=</span></span>
<span id="cb17-3"><a href="#cb17-3" aria-hidden="true" tabindex="-1"></a>    ( ()<span class="op">,</span> <span class="fu">fetchMany</span> [ <span class="dt">Store</span><span class="op">.</span><span class="fu">fetchFoo</span><span class="op">,</span> <span class="dt">Store</span><span class="op">.</span><span class="fu">fetchBar</span> ] )</span></code></pre></div>
<p>With this, we won’t need any special <code>Msg</code> in parent module.
All we do is pass down the <code>Store.fetchMany</code> with applied arguments.
Simple as that.</p>
<h1 id="conclusion">Conclusion</h1>
<p>I hope I managed to demonstrates one reasonable use-case where avoiding pattern matching and data in favor of
functions leads to more extensible implementation. This doesn’t mean that pattern matching is bad in general.
In fact, it’s a useful tool for modeling closed APIs. I’m personally leaning towards an opinion
that branching over closed data is generally good in high level and low level code but not that much
in the abstract source in the middle of logic. In upper level, it’s often desirable to
dispatch the control between the blocks of program. In lower level logic, implementation details are being
extracted and acted upon. But it’s likely that most of the stuff in the middle should be designed with extensibility
provided by open design.</p>
<p>A good example of open API is <a href="https://package.elm-lang.org/packages/elm/html/latest/">elm/html</a> which is opened using <a href="https://package.elm-lang.org/packages/elm/html/latest/Html#node">node</a> constructor.
It would be possible to define type <code>Node</code> and functions operating with this closed sum type but it would be a poor design choice.</p>
<p>By designing all the code around closed structures, we’re in some sense
making a full circle back to C interfaces with integer arguments used to change behavior of procedure.
We just have slightly more expressive tool to accomplish that.</p>
<p>Some time ago, I’ve also created <a href="https://package.elm-lang.org/packages/turboMaCk/elm-continue/latest/">elm-continue</a>, a package with even more generalized abstractions
for working with continuations than what we used here.
I just must warn you, that not everyone from elm community would likely approve of using it.</p>
<p>I was honestly unsure if I should write this post.
I was a bit afraid that it will looks too much like a criticism of Martin’s original article which is not my point at all.
I also know a lot of people who will likely disagree with my feelings towards pattern matching and “over-usage” of data.
The reason why I wrote it in the end is the slight chance that someone will find this useful or interesting (looking at you, Zdenko)
and that maybe I manage to avoid unnecessary negative feelings around this. This doesn’t mean you should avoid criticism.
In the end, it’s just a tool of progress.</p>
<section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>In any turing complete language (including functional ones), it’s possible to define partial functions.
Like functions that never terminate.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2"><p>This is true only in languages with higher order functions.<a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn3"><p>All hail the quantum universe.<a href="#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn4"><p>Some languages like <a href="http://unisonweb.org">Unison</a> are able to serialize functions.
Unison specifically does so by sending the AST over the wire.
Even much simpler techniques comes in mind. Languages with <code>eval</code>
(like most of the dynamic languages and almost all lisps (excluding clojure-script) has such function).
The primary concern here is security and executing arbitrary code from some unknown source
is what is often called <a href="https://en.wikipedia.org/wiki/Arbitrary_code_execution">arbitrary code execution vunerability</a>. Precisely because
of the security, it’s always a good idea to close APIs exposed to untrusted 3rd parties.<a href="#fnref4" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn5"><p>Elm type system allows you to use equality operator (<code>(==)</code>) over any type
but blows up in runtime with functions. Languages with higher order polymorphism
or operator overloading won’t be able to statically detect such cases and won’t
allow you to use equality over functions. I’m not aware of any language in which
equality over function is possible but I believe in <a href="http://unisonweb.org">Unison</a>, it might be possible.<a href="#fnref5" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn6"><p>By definition, it will still help you to just see an intermediate value but that might
be enough for certain problems. Debugging is usually not an issue with step in debugging.<a href="#fnref6" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>]]></description>
    <pubDate>Wed, 14 Aug 2019 00:00:00 UT</pubDate>
    <guid>http://turbomack.github.iuo/posts/2019-08-14-avoiding-pattern-matching-refunctionalization.html</guid>
    <dc:creator>Marek Fajkus</dc:creator>
</item>
<item>
    <title>Rust vs GUI</title>
    <link>http://turbomack.github.iuo/posts/2019-07-28-rust-vs-gui.html</link>
    <description><![CDATA[<p>I’m neither an experienced Rust programmer nor GTK developer. I don’t even have that much experience
with building native GUIs or with system level programming. Hell, I might be the least qualified guy
on the internet to write this post. Despite that, on more than just one occasion, I wondered what implications Rust’s static analysis of memory access has on writing GUIs.</p>
<div class="updates">
<p>I received a ton of constructive and positive feedback on <a href="https://www.reddit.com/r/rust">/r/rust</a>.
Rust community really proved to be nothing but great.
You can find the <a href="#discussion">link to the Reddit comments down bellow</a>.
I didn’t expect that much positive feedback and I truly humbled to receive it.
I made a few updates based on the discussion:</p>
<ul>
<li>Avoiding the use the old project name <code>GTK+</code> as it’s now called just <code>GTK</code></li>
<li>Make operations with state truly atomic (thanks <a href="https://www.reddit.com/r/rust/comments/clkcba/building_gtk_app_in_rust_for_a_first_time/evw8ojp/">JayDepp</a>)</li>
<li>Mention PopOS’ <a href="https://github.com/pop-os/firmware-manager">Firmware Manager</a> and <a href="https://www.reddit.com/r/rust/comments/clkcba/building_gtk_app_in_rust_for_a_first_time/evx77ok/">mmstick’s comment</a> and the <a href="https://github.com/xi-editor/druid">druid project</a></li>
</ul>
</div>
<p>GUI development is a special beast. I consider it to be an interesting use-case as
the GUI development is usually associated with:</p>
<ul>
<li>Threading or Concurrency (or both)</li>
<li>Long living application state and mutations</li>
<li>in case of native UI, linking to sh*tload of C/C++ libraries</li>
<li>imperative, often object oriented, APIs.</li>
</ul>
<p>I thought it might be interesting to check implications which Rust’s borrow and ownership checker has
in those types of applications as clearly, even in the most simple GUI, one simply must run
into some complications. That’s exactly what I’m going to do and document here. I’m going to implement the most
simple (and useless) GTK application in Rust just for the sake of feeling the pain of fighting the compiler
as an inexperienced user.</p>
<h1 id="boring-but-necessary-setup">Boring but Necessary Setup</h1>
<p>I’ve chosen GTK only because I’m developing this on Linux and I have a feeling that C lib will
probably have better bindings than C++ one would have (QT). First thing we will need
to deal with is an installation of all libraries. I’m going to use the <a href="https://nixos.org/nix/">nix package manager</a> because
it seems to me like the only sane way of managing this. Setup should be compatible across Linux and Mac. If you’re trying to replicate this on Windows, <a href="https://developer.gnome.org/gtk3/stable/gtk-windows.html">good luck following this</a>.</p>
<p>We’re going to create <code>shell.nix</code> file to define development environment containing all the tools we need.
Note that I’m using <code>nixos-unstable</code> channel myself.</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="op">{</span> <span class="va">pkgs</span> <span class="op">?</span> <span class="bu">import</span> &lt;nixpkgs&gt; <span class="op">{}</span> <span class="op">}</span>:</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="kw">with</span> pkgs<span class="op">;</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>mkShell <span class="op">{</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>  <span class="va">buildInputs</span> <span class="op">=</span> <span class="op">[</span> cargo rustc cairo gtk3 glib pkgconfig <span class="op">];</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Now, running <code>$ nix-shell</code> should bring us to the bash shell with all the native dependencies including
rustc and cargo installed.</p>
<p>Use cargo to bootstrap the project within nix-shell:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="ex">[nix-shell]</span> cargo init</span></code></pre></div>
<p>to confirm that compilation works, we can run the hello world project generated by cargo.</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="ex">[nix-shell]</span> cargo run</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>   <span class="ex">Compiling</span> rust-gtk-counter v0.1.0 <span class="er">(</span><span class="ex">/home/marek/Projects/rust-gtk-counter</span><span class="kw">)</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>    <span class="ex">Finished</span> dev [unoptimized + debuginfo] target<span class="er">(</span><span class="ex">s</span><span class="kw">)</span> <span class="er">in</span> <span class="ex">0.39s</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>     <span class="ex">Running</span> <span class="kw">`</span><span class="ex">target/debug/rust-gtk-counter</span><span class="kw">`</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a><span class="ex">Hello,</span> world!</span></code></pre></div>
<p>Because I don’t really have an idea what I’m doing, I’m going to just copy <a href="https://gtk-rs.org/">example Cargo.toml</a>.</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="ex">[package]</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a><span class="ex">name</span> = <span class="st">&quot;rust-gtk-counter&quot;</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="ex">version</span> = <span class="st">&quot;0.1.0&quot;</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a><span class="ex">authors</span> = <span class="pp">[</span><span class="st">&quot;Marek Fajkus &lt;marek.faj@gmail.com&gt;&quot;</span><span class="pp">]</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a><span class="ex">edition</span> = <span class="st">&quot;2018&quot;</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a><span class="ex">[dependencies.gtk]</span></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a><span class="ex">version</span> = <span class="st">&quot;0.7.0&quot;</span></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a><span class="ex">features</span> = <span class="pp">[</span><span class="st">&quot;v3_16&quot;</span><span class="pp">]</span></span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a><span class="ex">[dependencies.gio]</span></span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a><span class="ex">version</span> = <span class="st">&quot;&quot;</span></span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a><span class="ex">features</span> = <span class="pp">[</span><span class="st">&quot;v2_44&quot;</span><span class="pp">]</span></span></code></pre></div>
<p>I also recommend running <code>cargo build</code> right away as at this point, it will need to pull deps, do the linking and compilation,
and there is really no point in waiting for all of this later.</p>
<h1 id="ui-code">UI Code</h1>
<p>With help of <a href="https://www.gtk.org/documentation.php">GTK documentation</a> and <a href="http://gtk-rs.org/docs/gtk/">rust-gtk documentation</a>, I was able to hack together
world’s most embarrassing interface, yay. I’m just going to put the code here as there is really nothing that
interesting in it. I put all the code to <code>src/main.rs</code> and even <code>main</code> procedure because why the hell not.</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode rust"><code class="sourceCode rust"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="kw">extern</span> <span class="kw">crate</span> gtk<span class="op">;</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="kw">extern</span> <span class="kw">crate</span> gio<span class="op">;</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a><span class="kw">use</span> <span class="pp">std::env::</span>args<span class="op">;</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a><span class="kw">use</span> <span class="pp">gtk::prelude::</span><span class="op">*;</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a><span class="kw">use</span> <span class="pp">gio::prelude::</span><span class="op">*;</span></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a><span class="kw">use</span> <span class="pp">gtk::</span><span class="op">{</span>Application<span class="op">,</span> ApplicationWindow<span class="op">,</span> Button<span class="op">,</span> <span class="dt">Box</span><span class="op">,</span> Label<span class="op">,};</span></span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a><span class="kw">fn</span> main() <span class="op">{</span></span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a>    <span class="co">// The simplest way to initalize new application</span></span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> application <span class="op">=</span> <span class="pp">Application::</span>new(<span class="cn">None</span><span class="op">,</span> <span class="bu">Default</span><span class="pp">::</span><span class="kw">default</span>())</span>
<span id="cb5-12"><a href="#cb5-12" aria-hidden="true" tabindex="-1"></a>        <span class="op">.</span>expect(<span class="st">&quot;failed to initialize GTK application&quot;</span>)<span class="op">;</span></span>
<span id="cb5-13"><a href="#cb5-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-14"><a href="#cb5-14" aria-hidden="true" tabindex="-1"></a>    <span class="co">// UI initialization</span></span>
<span id="cb5-15"><a href="#cb5-15" aria-hidden="true" tabindex="-1"></a>    application<span class="op">.</span>connect_activate(<span class="op">|</span>app<span class="op">|</span> <span class="op">{</span></span>
<span id="cb5-16"><a href="#cb5-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-17"><a href="#cb5-17" aria-hidden="true" tabindex="-1"></a>        <span class="co">// Window</span></span>
<span id="cb5-18"><a href="#cb5-18" aria-hidden="true" tabindex="-1"></a>        <span class="kw">let</span> window <span class="op">=</span> <span class="pp">ApplicationWindow::</span>new(app)<span class="op">;</span></span>
<span id="cb5-19"><a href="#cb5-19" aria-hidden="true" tabindex="-1"></a>        window<span class="op">.</span>set_title(<span class="st">&quot;First GTK Program&quot;</span>)<span class="op">;</span></span>
<span id="cb5-20"><a href="#cb5-20" aria-hidden="true" tabindex="-1"></a>        window<span class="op">.</span>set_default_size(<span class="dv">350</span><span class="op">,</span> <span class="dv">70</span>)<span class="op">;</span></span>
<span id="cb5-21"><a href="#cb5-21" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-22"><a href="#cb5-22" aria-hidden="true" tabindex="-1"></a>        <span class="co">// Containers</span></span>
<span id="cb5-23"><a href="#cb5-23" aria-hidden="true" tabindex="-1"></a>        <span class="kw">let</span> container <span class="op">=</span> <span class="dt">Box</span><span class="pp">::</span>new(<span class="pp">gtk::Orientation::</span>Vertical<span class="op">,</span> <span class="dv">3</span>)<span class="op">;</span></span>
<span id="cb5-24"><a href="#cb5-24" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-25"><a href="#cb5-25" aria-hidden="true" tabindex="-1"></a>        <span class="co">// Header</span></span>
<span id="cb5-26"><a href="#cb5-26" aria-hidden="true" tabindex="-1"></a>        <span class="kw">let</span> header <span class="op">=</span> <span class="pp">gtk::HeaderBar::</span>new()<span class="op">;</span></span>
<span id="cb5-27"><a href="#cb5-27" aria-hidden="true" tabindex="-1"></a>        <span class="kw">let</span> label <span class="op">=</span> <span class="pp">Label::</span>new(<span class="cn">Some</span>(<span class="st">&quot;Starting at 0&quot;</span>))<span class="op">;</span></span>
<span id="cb5-28"><a href="#cb5-28" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-29"><a href="#cb5-29" aria-hidden="true" tabindex="-1"></a>        <span class="co">// Content</span></span>
<span id="cb5-30"><a href="#cb5-30" aria-hidden="true" tabindex="-1"></a>        <span class="kw">let</span> inc_btn <span class="op">=</span> <span class="pp">Button::</span>new_with_label(<span class="st">&quot;Increment&quot;</span>)<span class="op">;</span></span>
<span id="cb5-31"><a href="#cb5-31" aria-hidden="true" tabindex="-1"></a>        <span class="kw">let</span> dec_btn <span class="op">=</span> <span class="pp">Button::</span>new_with_label(<span class="st">&quot;Decrement&quot;</span>)<span class="op">;</span></span>
<span id="cb5-32"><a href="#cb5-32" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-33"><a href="#cb5-33" aria-hidden="true" tabindex="-1"></a>        <span class="co">// Compose piece together</span></span>
<span id="cb5-34"><a href="#cb5-34" aria-hidden="true" tabindex="-1"></a>        header<span class="op">.</span>add(<span class="op">&amp;</span>label)<span class="op">;</span></span>
<span id="cb5-35"><a href="#cb5-35" aria-hidden="true" tabindex="-1"></a>        container<span class="op">.</span>add(<span class="op">&amp;</span>header)<span class="op">;</span></span>
<span id="cb5-36"><a href="#cb5-36" aria-hidden="true" tabindex="-1"></a>        container<span class="op">.</span>add(<span class="op">&amp;</span>inc_btn)<span class="op">;</span></span>
<span id="cb5-37"><a href="#cb5-37" aria-hidden="true" tabindex="-1"></a>        container<span class="op">.</span>add(<span class="op">&amp;</span>dec_btn)<span class="op">;</span></span>
<span id="cb5-38"><a href="#cb5-38" aria-hidden="true" tabindex="-1"></a>        window<span class="op">.</span>add(<span class="op">&amp;</span>container)<span class="op">;</span></span>
<span id="cb5-39"><a href="#cb5-39" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-40"><a href="#cb5-40" aria-hidden="true" tabindex="-1"></a>        <span class="co">// Display all widgets</span></span>
<span id="cb5-41"><a href="#cb5-41" aria-hidden="true" tabindex="-1"></a>        window<span class="op">.</span>show_all()<span class="op">;</span></span>
<span id="cb5-42"><a href="#cb5-42" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span>)<span class="op">;</span></span>
<span id="cb5-43"><a href="#cb5-43" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-44"><a href="#cb5-44" aria-hidden="true" tabindex="-1"></a>    <span class="co">// Passing arguments to the app</span></span>
<span id="cb5-45"><a href="#cb5-45" aria-hidden="true" tabindex="-1"></a>    application<span class="op">.</span>run(<span class="op">&amp;</span>args()<span class="op">.</span><span class="pp">collect::</span><span class="op">&lt;</span><span class="dt">Vec</span><span class="op">&lt;</span>_<span class="op">&gt;&gt;</span>())<span class="op">;</span></span>
<span id="cb5-46"><a href="#cb5-46" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>And this is how the app looks like when I run <code>$ cargo run</code>.
I’m using tiling window manager (XMonad) so this will probably
look slightly different on most other desktops.</p>
<p><img src="../assets/2019-07-28-ui.png" /></p>
<h1 id="adding-actions">Adding Actions</h1>
<p>The application is not doing much. It’s doing exactly nothing (other than rendering useless window with useless widgets).
Let’s try doing the most useless thing in the world like changing the title whenever we click on one of buttons.</p>
<p>Let’s just try what seems like the most simple way of doing this - changing <code>content</code> section to something like this:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode rust"><code class="sourceCode rust"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="co">// Content</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a><span class="kw">let</span> inc_btn <span class="op">=</span> <span class="pp">Button::</span>new_with_label(<span class="st">&quot;Increment&quot;</span>)<span class="op">;</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>inc_btn<span class="op">.</span>connect_clicked(<span class="op">|</span>_<span class="op">|</span> <span class="op">{</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>    label<span class="op">.</span>set_label(<span class="st">&quot;Incremented&quot;</span>)<span class="op">;</span></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a><span class="op">}</span>)<span class="op">;</span></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a><span class="kw">let</span> dec_btn <span class="op">=</span> <span class="pp">Button::</span>new_with_label(<span class="st">&quot;Decrement&quot;</span>)<span class="op">;</span></span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a>dec_btn<span class="op">.</span>connect_clicked(<span class="op">|</span>_<span class="op">|</span> <span class="op">{</span></span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a>    label<span class="op">.</span>set_label(<span class="st">&quot;Decremented&quot;</span>)<span class="op">;</span></span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a><span class="op">}</span>)<span class="op">;</span></span></code></pre></div>
<div class="sourceCode" id="cb7"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="ex">[nix-shell]</span> cargo run</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a><span class="va">error</span><span class="op">[</span>E0373<span class="op">]</span><span class="ex">:</span> closure may outlive the current function, but it borrows <span class="kw">`</span><span class="ex">label</span><span class="kw">`</span>, which is owned by the current function</span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>  <span class="ex">--</span><span class="op">&gt;</span> src/main.rs:31:33</span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>   <span class="kw">|</span></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a><span class="ex">31</span> <span class="kw">|</span>         <span class="ex">inc_btn.connect_clicked</span><span class="er">(</span><span class="kw">|</span><span class="ex">_</span><span class="kw">|</span> <span class="kw">{</span></span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>   <span class="kw">|</span>                                 <span class="ex">^^^</span> may outlive borrowed value <span class="kw">`</span><span class="ex">label</span><span class="kw">`</span></span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a><span class="ex">32</span> <span class="kw">|</span>             <span class="ex">label.set_label</span><span class="er">(</span><span class="st">&quot;Incremented&quot;</span><span class="kw">);</span></span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a>   <span class="kw">|</span>             <span class="ex">-----</span> <span class="kw">`</span><span class="ex">label</span><span class="kw">`</span> is borrowed here</span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a>   <span class="kw">|</span></span>
<span id="cb7-10"><a href="#cb7-10" aria-hidden="true" tabindex="-1"></a><span class="ex">note:</span> function requires argument type to outlive <span class="kw">`</span><span class="st">&#39;static`</span></span>
<span id="cb7-11"><a href="#cb7-11" aria-hidden="true" tabindex="-1"></a><span class="st">  --&gt; src/main.rs:31:9</span></span>
<span id="cb7-12"><a href="#cb7-12" aria-hidden="true" tabindex="-1"></a><span class="st">   |</span></span>
<span id="cb7-13"><a href="#cb7-13" aria-hidden="true" tabindex="-1"></a><span class="st">31 | /         inc_btn.connect_clicked(|_| {</span></span>
<span id="cb7-14"><a href="#cb7-14" aria-hidden="true" tabindex="-1"></a><span class="st">32 | |             label.set_label(&quot;Incremented&quot;);</span></span>
<span id="cb7-15"><a href="#cb7-15" aria-hidden="true" tabindex="-1"></a><span class="st">33 | |         });</span></span>
<span id="cb7-16"><a href="#cb7-16" aria-hidden="true" tabindex="-1"></a><span class="st">   | |__________^</span></span>
<span id="cb7-17"><a href="#cb7-17" aria-hidden="true" tabindex="-1"></a><span class="st">help: to force the closure to take ownership of `label` (and any other referenced variables), use the `move` keyword</span></span>
<span id="cb7-18"><a href="#cb7-18" aria-hidden="true" tabindex="-1"></a><span class="st">   |</span></span>
<span id="cb7-19"><a href="#cb7-19" aria-hidden="true" tabindex="-1"></a><span class="st">31 |         inc_btn.connect_clicked(move |_| {</span></span>
<span id="cb7-20"><a href="#cb7-20" aria-hidden="true" tabindex="-1"></a><span class="st">   |                                 ^^^^^^^^</span></span>
<span id="cb7-21"><a href="#cb7-21" aria-hidden="true" tabindex="-1"></a><span class="st">   ....</span></span></code></pre></div>
<p>Of course… We don’t have GC to “track the references” to label for us so we need to somehow make sure it’s available for
as long as we need to use that reference. That is whenever the <code>connect_clicked</code> closure will evaluate.
But we have a hint about using <code>move</code> to transfer ownership of label so let’s just add it.</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode rust"><code class="sourceCode rust"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="co">// Content</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a><span class="kw">let</span> inc_btn <span class="op">=</span> <span class="pp">Button::</span>new_with_label(<span class="st">&quot;Increment&quot;</span>)<span class="op">;</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>inc_btn<span class="op">.</span>connect_clicked(<span class="kw">move</span> <span class="op">|</span>_<span class="op">|</span> <span class="op">{</span></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a>    label<span class="op">.</span>set_label(<span class="st">&quot;Incremented&quot;</span>)<span class="op">;</span></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a><span class="op">}</span>)<span class="op">;</span></span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a><span class="kw">let</span> dec_btn <span class="op">=</span> <span class="pp">Button::</span>new_with_label(<span class="st">&quot;Decrement&quot;</span>)<span class="op">;</span></span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a>dec_btn<span class="op">.</span>connect_clicked(<span class="kw">move</span> <span class="op">|</span>_<span class="op">|</span> <span class="op">{</span></span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a>    label<span class="op">.</span>set_label(<span class="st">&quot;Decremented&quot;</span>)<span class="op">;</span></span>
<span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a><span class="op">}</span>)<span class="op">;</span></span></code></pre></div>
<p>And we get another error.</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="ex">[nix-shell]</span> cargo run</span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a>  <span class="ex">Compiling</span> rust-gtk-counter v0.1.0 <span class="er">(</span><span class="ex">/home/marek/Projects/rust-gtk-counter</span><span class="kw">)</span></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a><span class="va">error</span><span class="op">[</span>E0382<span class="op">]</span><span class="ex">:</span> use of moved value: <span class="kw">`</span><span class="ex">label</span><span class="kw">`</span></span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a>  <span class="ex">--</span><span class="op">&gt;</span> src/main.rs:35:33</span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a>   <span class="kw">|</span></span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a><span class="ex">27</span> <span class="kw">|</span>         <span class="bu">let</span> <span class="va">label</span> <span class="op">=</span> <span class="va">Label</span><span class="op">::</span><span class="va">new</span><span class="er">(</span><span class="ex">Some</span><span class="er">(</span><span class="st">&quot;Starting at 0&quot;</span><span class="kw">));</span></span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a>   <span class="kw">|</span>             <span class="ex">-----</span> move occurs because <span class="kw">`</span><span class="ex">label</span><span class="kw">`</span> has type <span class="kw">`</span><span class="ex">gtk::Label</span><span class="kw">`</span>, which does not implement the <span class="kw">`</span><span class="ex">Copy</span><span class="kw">`</span> trait</span>
<span id="cb9-8"><a href="#cb9-8" aria-hidden="true" tabindex="-1"></a><span class="ex">...</span></span>
<span id="cb9-9"><a href="#cb9-9" aria-hidden="true" tabindex="-1"></a><span class="ex">31</span> <span class="kw">|</span>         <span class="ex">inc_btn.connect_clicked</span><span class="er">(</span><span class="ex">move</span> <span class="kw">|</span><span class="ex">_</span><span class="kw">|</span> <span class="kw">{</span></span>
<span id="cb9-10"><a href="#cb9-10" aria-hidden="true" tabindex="-1"></a>   <span class="kw">|</span>                                 <span class="ex">--------</span> value moved into closure here</span>
<span id="cb9-11"><a href="#cb9-11" aria-hidden="true" tabindex="-1"></a><span class="ex">32</span> <span class="kw">|</span>             <span class="ex">label.set_label</span><span class="er">(</span><span class="st">&quot;Incremented&quot;</span><span class="kw">);</span></span>
<span id="cb9-12"><a href="#cb9-12" aria-hidden="true" tabindex="-1"></a>   <span class="kw">|</span>             <span class="ex">-----</span> variable moved due to use in closure</span>
<span id="cb9-13"><a href="#cb9-13" aria-hidden="true" tabindex="-1"></a><span class="ex">...</span></span>
<span id="cb9-14"><a href="#cb9-14" aria-hidden="true" tabindex="-1"></a><span class="ex">35</span> <span class="kw">|</span>         <span class="ex">dec_btn.connect_clicked</span><span class="er">(</span><span class="ex">move</span> <span class="kw">|</span><span class="ex">_</span><span class="kw">|</span> <span class="kw">{</span></span>
<span id="cb9-15"><a href="#cb9-15" aria-hidden="true" tabindex="-1"></a>   <span class="kw">|</span>                                 <span class="ex">^^^^^^^^</span> value used here after move</span>
<span id="cb9-16"><a href="#cb9-16" aria-hidden="true" tabindex="-1"></a><span class="ex">36</span> <span class="kw">|</span>             <span class="ex">label.set_label</span><span class="er">(</span><span class="st">&quot;Decremented&quot;</span><span class="kw">);</span></span>
<span id="cb9-17"><a href="#cb9-17" aria-hidden="true" tabindex="-1"></a>   <span class="kw">|</span>             <span class="ex">-----</span> use occurs due to use in closure</span></code></pre></div>
<p>Maybe obviously, we can’t simply move ownership to multiple places.
But maybe we can create copy of label reference for each button like this:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode rust"><code class="sourceCode rust"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="co">// Content</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a><span class="kw">let</span> inc_btn <span class="op">=</span> <span class="pp">Button::</span>new_with_label(<span class="st">&quot;Increment&quot;</span>)<span class="op">;</span></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> label_clone <span class="op">=</span> label<span class="op">.</span>clone()<span class="op">;</span></span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a>    inc_btn<span class="op">.</span>connect_clicked(<span class="kw">move</span> <span class="op">|</span>_<span class="op">|</span> <span class="op">{</span></span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a>        label_clone<span class="op">.</span>set_label(<span class="st">&quot;Incremented&quot;</span>)<span class="op">;</span></span>
<span id="cb10-7"><a href="#cb10-7" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span>)<span class="op">;</span></span>
<span id="cb10-8"><a href="#cb10-8" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb10-9"><a href="#cb10-9" aria-hidden="true" tabindex="-1"></a><span class="kw">let</span> dec_btn <span class="op">=</span> <span class="pp">Button::</span>new_with_label(<span class="st">&quot;Decrement&quot;</span>)<span class="op">;</span></span>
<span id="cb10-10"><a href="#cb10-10" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb10-11"><a href="#cb10-11" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> label_clone <span class="op">=</span> label<span class="op">.</span>clone()<span class="op">;</span></span>
<span id="cb10-12"><a href="#cb10-12" aria-hidden="true" tabindex="-1"></a>    dec_btn<span class="op">.</span>connect_clicked(<span class="kw">move</span> <span class="op">|</span>_<span class="op">|</span> <span class="op">{</span></span>
<span id="cb10-13"><a href="#cb10-13" aria-hidden="true" tabindex="-1"></a>        label_clone<span class="op">.</span>set_label(<span class="st">&quot;Decremented&quot;</span>)<span class="op">;</span></span>
<span id="cb10-14"><a href="#cb10-14" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span>)<span class="op">;</span></span>
<span id="cb10-15"><a href="#cb10-15" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>I’m using blocks to create the nested namespace so I don’t have to be that creative with naming.
But more importantly, the code above compiles and even works!</p>
<div class="note">
<p>Some might expect that this code won’t work as we create independent clones of <code>gtk::Label</code>.
I believe this type (as any other Widget) is just a reference to some GTK object so
cloning it means creating just another reference pointing to the same GTK runtime thing.
You can try to add the same thing or a clone of the same thing multiple times to the window.
It won’t work the second time and print runtime warning to the stderr.</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="kw">(</span><span class="ex">rust-gtk-counter:16318</span><span class="kw">)</span><span class="bu">:</span> Gtk-WARNING <span class="pp">**</span>: 17:54:30.775: Attempting to add a widget with type GtkLabel to a container of type GtkBox, but the widget is already inside a container of type GtkHeaderBar, please remove the widget from its existing container first.</span></code></pre></div>
</div>
<h1 id="adding-the-state">Adding the State</h1>
<p>Now, in order to raise our app from the absolute bottom of uselessness to just a bottom of it, we will need
to introduce some state. And what is better than good old integer. And since we’re not building just
any stupid application which does nothing, and thus can be implemented in a language like Haskell, we
just reach for the only enterprise approved technique - <em>the mutation</em>.</p>
<p>Let’s be naive and just add our mutable state to the app for instance somewhere here…</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode rust"><code class="sourceCode rust"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="co">// Containers</span></span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a><span class="kw">let</span> container <span class="op">=</span> <span class="dt">Box</span><span class="pp">::</span>new(<span class="pp">gtk::Orientation::</span>Vertical<span class="op">,</span> <span class="dv">3</span>)<span class="op">;</span></span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-4"><a href="#cb12-4" aria-hidden="true" tabindex="-1"></a><span class="co">// State</span></span>
<span id="cb12-5"><a href="#cb12-5" aria-hidden="true" tabindex="-1"></a><span class="kw">let</span> <span class="kw">mut</span> counter <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span></code></pre></div>
<p>…and mutate it in handlers. I’m doing so only for increment button for now, why I’m doing so will be
more apparent later on.</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode rust"><code class="sourceCode rust"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="co">// Content</span></span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a><span class="kw">let</span> inc_btn <span class="op">=</span> <span class="pp">Button::</span>new_with_label(<span class="st">&quot;Increment&quot;</span>)<span class="op">;</span></span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> label_clone <span class="op">=</span> label<span class="op">.</span>clone()<span class="op">;</span></span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true" tabindex="-1"></a>    inc_btn<span class="op">.</span>connect_clicked(<span class="kw">move</span> <span class="op">|</span>_<span class="op">|</span> <span class="op">{</span></span>
<span id="cb13-6"><a href="#cb13-6" aria-hidden="true" tabindex="-1"></a>        counter <span class="op">+=</span> <span class="dv">1</span><span class="op">;</span></span>
<span id="cb13-7"><a href="#cb13-7" aria-hidden="true" tabindex="-1"></a>        label_clone<span class="op">.</span>set_label(<span class="st">&quot;Incremented&quot;</span>)<span class="op">;</span></span>
<span id="cb13-8"><a href="#cb13-8" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span>)<span class="op">;</span></span>
<span id="cb13-9"><a href="#cb13-9" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Boom! The compiler hates us again:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a><span class="ex">[nix-shell]</span> cargo run</span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a><span class="va">error</span><span class="op">[</span>E0594<span class="op">]</span><span class="ex">:</span> cannot assign to <span class="kw">`</span><span class="ex">counter</span><span class="kw">`</span>, as it is a captured variable in a <span class="kw">`</span><span class="ex">Fn</span><span class="kw">`</span> closure</span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a>  <span class="ex">--</span><span class="op">&gt;</span> src/main.rs:37:17</span>
<span id="cb14-4"><a href="#cb14-4" aria-hidden="true" tabindex="-1"></a>   <span class="kw">|</span></span>
<span id="cb14-5"><a href="#cb14-5" aria-hidden="true" tabindex="-1"></a><span class="ex">37</span> <span class="kw">|</span>                 <span class="ex">counter</span> += 1<span class="kw">;</span></span>
<span id="cb14-6"><a href="#cb14-6" aria-hidden="true" tabindex="-1"></a>   <span class="kw">|</span>                 <span class="ex">^^^^^^^^^^^^</span> cannot assign</span>
<span id="cb14-7"><a href="#cb14-7" aria-hidden="true" tabindex="-1"></a>   <span class="kw">|</span></span>
<span id="cb14-8"><a href="#cb14-8" aria-hidden="true" tabindex="-1"></a><span class="ex">help:</span> consider changing this to accept closures that implement <span class="kw">`</span><span class="ex">FnMut</span><span class="kw">`</span></span>
<span id="cb14-9"><a href="#cb14-9" aria-hidden="true" tabindex="-1"></a>  <span class="ex">--</span><span class="op">&gt;</span> src/main.rs:36:37</span>
<span id="cb14-10"><a href="#cb14-10" aria-hidden="true" tabindex="-1"></a>   <span class="kw">|</span></span>
<span id="cb14-11"><a href="#cb14-11" aria-hidden="true" tabindex="-1"></a><span class="ex">36</span> <span class="kw">|</span>               <span class="ex">inc_btn.connect_clicked</span><span class="er">(</span><span class="ex">move</span> <span class="kw">|</span><span class="ex">_</span><span class="kw">|</span> <span class="kw">{</span></span>
<span id="cb14-12"><a href="#cb14-12" aria-hidden="true" tabindex="-1"></a>   <span class="kw">|</span>  <span class="ex">_____________________________________^</span></span>
<span id="cb14-13"><a href="#cb14-13" aria-hidden="true" tabindex="-1"></a><span class="ex">37</span> <span class="kw">|</span> <span class="kw">|</span>                 <span class="ex">counter</span> += 1<span class="kw">;</span></span>
<span id="cb14-14"><a href="#cb14-14" aria-hidden="true" tabindex="-1"></a><span class="ex">38</span> <span class="kw">|</span> <span class="kw">|</span>                 <span class="ex">label_clone.set_label</span><span class="er">(</span><span class="st">&quot;Incremented&quot;</span><span class="kw">);</span></span>
<span id="cb14-15"><a href="#cb14-15" aria-hidden="true" tabindex="-1"></a><span class="ex">39</span> <span class="kw">|</span> <span class="kw">|</span>             <span class="kw">});</span></span>
<span id="cb14-16"><a href="#cb14-16" aria-hidden="true" tabindex="-1"></a>   <span class="kw">|</span> <span class="kw">|</span><span class="ex">_____________^</span></span></code></pre></div>
<p>And this time with a bit trickier error it seems.</p>
<p>I’m honestly not sure what compiler’s help is trying to tell us to do
but I think it might be a good idea to encapsulate our mutation in something perhaps.
After some digging in documentation I’ve found <a href="https://doc.rust-lang.org/std/sync/atomic/">std::sync::atomic</a> which seems like it might
be a good tool for the job. There is even <a href="https://doc.rust-lang.org/std/sync/atomic/struct.AtomicIsize.html">AtomicIsize</a> but since it looks like this will
make our “state management” a bit more verbose, let’s try to decouple it.</p>
<p>We can also remove our <code>state : i32</code> as this won’t take us anywhere it seems.</p>
<p>We’re still in the <code>main.rs</code> (because I can’t import and I’m lazy).
In my case, I’m going to put this above the <code>main</code> procedure.</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode rust"><code class="sourceCode rust"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a><span class="kw">use</span> <span class="pp">std::sync::atomic::</span><span class="op">{</span>AtomicIsize<span class="op">,</span> Ordering<span class="op">};</span></span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true" tabindex="-1"></a><span class="kw">struct</span> Counter(AtomicIsize)<span class="op">;</span></span>
<span id="cb15-4"><a href="#cb15-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-5"><a href="#cb15-5" aria-hidden="true" tabindex="-1"></a><span class="kw">impl</span> Counter <span class="op">{</span></span>
<span id="cb15-6"><a href="#cb15-6" aria-hidden="true" tabindex="-1"></a>    <span class="kw">fn</span> new(init<span class="op">:</span> <span class="dt">isize</span>) <span class="op">-&gt;</span> Counter <span class="op">{</span></span>
<span id="cb15-7"><a href="#cb15-7" aria-hidden="true" tabindex="-1"></a>        Counter(<span class="pp">AtomicIsize::</span>new(init))</span>
<span id="cb15-8"><a href="#cb15-8" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb15-9"><a href="#cb15-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-10"><a href="#cb15-10" aria-hidden="true" tabindex="-1"></a>    <span class="kw">fn</span> increment(<span class="op">&amp;</span><span class="kw">self</span>) <span class="op">-&gt;</span> <span class="dt">isize</span> <span class="op">{</span></span>
<span id="cb15-11"><a href="#cb15-11" aria-hidden="true" tabindex="-1"></a>        <span class="kw">let</span> old <span class="op">=</span> <span class="kw">self</span><span class="op">.</span><span class="dv">0</span><span class="op">.</span>fetch_add(<span class="dv">1</span><span class="op">,</span> <span class="pp">Ordering::</span>SeqCst)<span class="op">;</span></span>
<span id="cb15-12"><a href="#cb15-12" aria-hidden="true" tabindex="-1"></a>        old <span class="op">+</span> <span class="dv">1</span></span>
<span id="cb15-13"><a href="#cb15-13" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb15-14"><a href="#cb15-14" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>As you can see, we’re doing bunch of interesting things here.
The essential idea is to use atomic operations to alter the state.
If you’re interested in details, I recommend you study the documentation
of <a href="https://doc.rust-lang.org/std/sync/atomic/">std::sync::atomic</a>. Now it’s a time to integrate our
glorified integer into application starting with initialization of counter value.</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode rust"><code class="sourceCode rust"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a><span class="co">// Containers</span></span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true" tabindex="-1"></a><span class="kw">let</span> container <span class="op">=</span> <span class="dt">Box</span><span class="pp">::</span>new(<span class="pp">gtk::Orientation::</span>Vertical<span class="op">,</span> <span class="dv">3</span>)<span class="op">;</span></span>
<span id="cb16-3"><a href="#cb16-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-4"><a href="#cb16-4" aria-hidden="true" tabindex="-1"></a><span class="co">// State</span></span>
<span id="cb16-5"><a href="#cb16-5" aria-hidden="true" tabindex="-1"></a><span class="kw">let</span> counter <span class="op">=</span> <span class="pp">Counter::</span>new(<span class="dv">0</span>)<span class="op">;</span></span></code></pre></div>
<p>And of course, click handler closure:</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode rust"><code class="sourceCode rust"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true" tabindex="-1"></a><span class="co">// Content</span></span>
<span id="cb17-2"><a href="#cb17-2" aria-hidden="true" tabindex="-1"></a><span class="kw">let</span> inc_btn <span class="op">=</span> <span class="pp">Button::</span>new_with_label(<span class="st">&quot;Increment&quot;</span>)<span class="op">;</span></span>
<span id="cb17-3"><a href="#cb17-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb17-4"><a href="#cb17-4" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> label_clone <span class="op">=</span> label<span class="op">.</span>clone()<span class="op">;</span></span>
<span id="cb17-5"><a href="#cb17-5" aria-hidden="true" tabindex="-1"></a>    inc_btn<span class="op">.</span>connect_clicked(<span class="kw">move</span> <span class="op">|</span>_<span class="op">|</span> <span class="op">{</span></span>
<span id="cb17-6"><a href="#cb17-6" aria-hidden="true" tabindex="-1"></a>        <span class="kw">let</span> val <span class="op">=</span> counter<span class="op">.</span>increment()<span class="op">;</span></span>
<span id="cb17-7"><a href="#cb17-7" aria-hidden="true" tabindex="-1"></a>        label_clone<span class="op">.</span>set_label(<span class="op">&amp;</span><span class="pp">format!</span>(<span class="st">&quot;Incremented to {}&quot;</span><span class="op">,</span> val))<span class="op">;</span></span>
<span id="cb17-8"><a href="#cb17-8" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span>)<span class="op">;</span></span>
<span id="cb17-9"><a href="#cb17-9" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>We also put the actual value into the label when we’re at it.
And since this works great, we go and extend this to work with decrement button as well.</p>
<p>First, the new procedure to decrement the value:</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode rust"><code class="sourceCode rust"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true" tabindex="-1"></a><span class="kw">fn</span> decrement(<span class="op">&amp;</span><span class="kw">self</span>) <span class="op">-&gt;</span> <span class="dt">isize</span> <span class="op">{</span></span>
<span id="cb18-2"><a href="#cb18-2" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> old <span class="op">=</span> <span class="kw">self</span><span class="op">.</span><span class="dv">0</span><span class="op">.</span>fetch_sub(<span class="dv">1</span><span class="op">,</span> <span class="pp">Ordering::</span>SeqCst)<span class="op">;</span></span>
<span id="cb18-3"><a href="#cb18-3" aria-hidden="true" tabindex="-1"></a>    old <span class="op">-</span> <span class="dv">1</span></span>
<span id="cb18-4"><a href="#cb18-4" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>and then use it in decrement button clicked closure:</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode rust"><code class="sourceCode rust"><span id="cb19-1"><a href="#cb19-1" aria-hidden="true" tabindex="-1"></a><span class="kw">let</span> dec_btn <span class="op">=</span> <span class="pp">Button::</span>new_with_label(<span class="st">&quot;Decrement&quot;</span>)<span class="op">;</span></span>
<span id="cb19-2"><a href="#cb19-2" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb19-3"><a href="#cb19-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> label_clone <span class="op">=</span> label<span class="op">.</span>clone()<span class="op">;</span></span>
<span id="cb19-4"><a href="#cb19-4" aria-hidden="true" tabindex="-1"></a>    dec_btn<span class="op">.</span>connect_clicked(<span class="kw">move</span> <span class="op">|</span>_<span class="op">|</span> <span class="op">{</span></span>
<span id="cb19-5"><a href="#cb19-5" aria-hidden="true" tabindex="-1"></a>        <span class="kw">let</span> val <span class="op">=</span> counter<span class="op">.</span>decrement()<span class="op">;</span></span>
<span id="cb19-6"><a href="#cb19-6" aria-hidden="true" tabindex="-1"></a>        label_clone<span class="op">.</span>set_label(<span class="op">&amp;</span><span class="pp">format!</span>(<span class="st">&quot;Decremented to {}&quot;</span><span class="op">,</span> val))<span class="op">;</span></span>
<span id="cb19-7"><a href="#cb19-7" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span>)<span class="op">;</span></span>
<span id="cb19-8"><a href="#cb19-8" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>But wait what?</p>
<div class="sourceCode" id="cb20"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb20-1"><a href="#cb20-1" aria-hidden="true" tabindex="-1"></a> <span class="ex">Compiling</span> rust-gtk-counter v0.1.0 <span class="er">(</span><span class="ex">/home/marek/Projects/rust-gtk-counter</span><span class="kw">)</span></span>
<span id="cb20-2"><a href="#cb20-2" aria-hidden="true" tabindex="-1"></a><span class="va">error</span><span class="op">[</span>E0382<span class="op">]</span><span class="ex">:</span> use of moved value: <span class="kw">`</span><span class="ex">counter</span><span class="kw">`</span></span>
<span id="cb20-3"><a href="#cb20-3" aria-hidden="true" tabindex="-1"></a>  <span class="ex">--</span><span class="op">&gt;</span> src/main.rs:66:37</span>
<span id="cb20-4"><a href="#cb20-4" aria-hidden="true" tabindex="-1"></a>   <span class="kw">|</span></span>
<span id="cb20-5"><a href="#cb20-5" aria-hidden="true" tabindex="-1"></a><span class="ex">48</span> <span class="kw">|</span>         <span class="bu">let</span> <span class="va">counter</span> <span class="op">=</span> <span class="va">Counter</span><span class="op">::</span><span class="va">new</span><span class="er">(</span><span class="ex">0</span><span class="kw">);</span></span>
<span id="cb20-6"><a href="#cb20-6" aria-hidden="true" tabindex="-1"></a>   <span class="kw">|</span>             <span class="ex">-------</span> move occurs because <span class="kw">`</span><span class="ex">counter</span><span class="kw">`</span> has type <span class="kw">`</span><span class="ex">Counter</span><span class="kw">`</span>, which does not implement the <span class="kw">`</span><span class="ex">Copy</span><span class="kw">`</span> trait</span>
<span id="cb20-7"><a href="#cb20-7" aria-hidden="true" tabindex="-1"></a><span class="ex">...</span></span>
<span id="cb20-8"><a href="#cb20-8" aria-hidden="true" tabindex="-1"></a><span class="ex">58</span> <span class="kw">|</span>             <span class="ex">inc_btn.connect_clicked</span><span class="er">(</span><span class="ex">move</span> <span class="kw">|</span><span class="ex">_</span><span class="kw">|</span> <span class="kw">{</span></span>
<span id="cb20-9"><a href="#cb20-9" aria-hidden="true" tabindex="-1"></a>   <span class="kw">|</span>                                     <span class="ex">--------</span> value moved into closure here</span>
<span id="cb20-10"><a href="#cb20-10" aria-hidden="true" tabindex="-1"></a><span class="ex">59</span> <span class="kw">|</span>                 <span class="bu">let</span> <span class="va">val</span> <span class="op">=</span> <span class="va">counter</span>.increment<span class="er">(</span><span class="kw">);</span></span>
<span id="cb20-11"><a href="#cb20-11" aria-hidden="true" tabindex="-1"></a>   <span class="kw">|</span>                           <span class="ex">-------</span> variable moved due to use in closure</span>
<span id="cb20-12"><a href="#cb20-12" aria-hidden="true" tabindex="-1"></a><span class="ex">...</span></span>
<span id="cb20-13"><a href="#cb20-13" aria-hidden="true" tabindex="-1"></a><span class="ex">66</span> <span class="kw">|</span>             <span class="ex">dec_btn.connect_clicked</span><span class="er">(</span><span class="ex">move</span> <span class="kw">|</span><span class="ex">_</span><span class="kw">|</span> <span class="kw">{</span></span>
<span id="cb20-14"><a href="#cb20-14" aria-hidden="true" tabindex="-1"></a>   <span class="kw">|</span>                                     <span class="ex">^^^^^^^^</span> value used here after move</span>
<span id="cb20-15"><a href="#cb20-15" aria-hidden="true" tabindex="-1"></a><span class="ex">67</span> <span class="kw">|</span>                 <span class="bu">let</span> <span class="va">val</span> <span class="op">=</span> <span class="va">counter</span>.decrement<span class="er">(</span><span class="kw">);</span></span>
<span id="cb20-16"><a href="#cb20-16" aria-hidden="true" tabindex="-1"></a>   <span class="kw">|</span>                           <span class="ex">-------</span> use occurs due to use in closure</span>
<span id="cb20-17"><a href="#cb20-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb20-18"><a href="#cb20-18" aria-hidden="true" tabindex="-1"></a><span class="ex">error:</span> aborting due to previous error</span></code></pre></div>
<p>There is another problem with moving the value but it seems we might have a chance to fix it by simply
deriving the <code>Copy</code> instance for our <code>Counter</code> struct, let’s see.</p>
<div class="sourceCode" id="cb21"><pre class="sourceCode rust"><code class="sourceCode rust"><span id="cb21-1"><a href="#cb21-1" aria-hidden="true" tabindex="-1"></a><span class="at">#[</span>derive<span class="at">(</span><span class="bu">Copy</span><span class="at">)]</span></span>
<span id="cb21-2"><a href="#cb21-2" aria-hidden="true" tabindex="-1"></a><span class="kw">struct</span> Counter(AtomicIsize)<span class="op">;</span></span></code></pre></div>
<p>and try to compile it…</p>
<div class="sourceCode" id="cb22"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb22-1"><a href="#cb22-1" aria-hidden="true" tabindex="-1"></a><span class="ex">[nix-shell]</span> cargo run</span>
<span id="cb22-2"><a href="#cb22-2" aria-hidden="true" tabindex="-1"></a> <span class="ex">Compiling</span> rust-gtk-counter v0.1.0 <span class="er">(</span><span class="ex">/home/marek/Projects/rust-gtk-counter</span><span class="kw">)</span></span>
<span id="cb22-3"><a href="#cb22-3" aria-hidden="true" tabindex="-1"></a><span class="va">error</span><span class="op">[</span>E0204<span class="op">]</span><span class="ex">:</span> the trait <span class="kw">`</span><span class="ex">Copy</span><span class="kw">`</span> may not be implemented for this type</span>
<span id="cb22-4"><a href="#cb22-4" aria-hidden="true" tabindex="-1"></a>  <span class="ex">--</span><span class="op">&gt;</span> src/main.rs:11:10</span>
<span id="cb22-5"><a href="#cb22-5" aria-hidden="true" tabindex="-1"></a>   <span class="kw">|</span></span>
<span id="cb22-6"><a href="#cb22-6" aria-hidden="true" tabindex="-1"></a><span class="ex">11</span> <span class="kw">|</span> <span class="co">#[derive(Copy)]</span></span>
<span id="cb22-7"><a href="#cb22-7" aria-hidden="true" tabindex="-1"></a>   <span class="kw">|</span>          <span class="ex">^^^^</span></span>
<span id="cb22-8"><a href="#cb22-8" aria-hidden="true" tabindex="-1"></a><span class="ex">12</span> <span class="kw">|</span> <span class="ex">struct</span> Counter<span class="er">(</span><span class="ex">AtomicIsize</span><span class="kw">);</span></span>
<span id="cb22-9"><a href="#cb22-9" aria-hidden="true" tabindex="-1"></a>   <span class="kw">|</span>                <span class="ex">-----------</span> this field does not implement <span class="kw">`</span><span class="ex">Copy</span><span class="kw">`</span></span>
<span id="cb22-10"><a href="#cb22-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-11"><a href="#cb22-11" aria-hidden="true" tabindex="-1"></a><span class="ex">error:</span> aborting due to previous error</span></code></pre></div>
<p>Not that surprising. Our atomic type doesn’t implement <code>Copy</code>.
This won’t take us anywhere, let’s try the last resort - the documentation.</p>
<p>Luckily, std lib offers this reference counting primitive called <a href="https://doc.rust-lang.org/std/sync/struct.Arc.html">std::sync::Arc</a> which
seems to offer the semantics we need.</p>
<blockquote>
<p>The type Arc&lt;T&gt; provides shared ownership of a value of type T, allocated in the heap.
Invoking clone on Arc produces a new Arc instance, which points to the same value on the heap as the source Arc,
while increasing a reference count. When the last Arc pointer to a given value is destroyed, the pointed-to value is also destroyed.</p>
</blockquote>
<p>We obviously want to point to the same memory if we want to be decrementing the same value we’re incrementing
and reference counting will make sure this shared mutable state is available as long as it’s needed by anything
just like if we had a GC.</p>
<p>First, we need to change the definition of the <code>counter</code> variable:</p>
<div class="sourceCode" id="cb23"><pre class="sourceCode rust"><code class="sourceCode rust"><span id="cb23-1"><a href="#cb23-1" aria-hidden="true" tabindex="-1"></a><span class="co">// State</span></span>
<span id="cb23-2"><a href="#cb23-2" aria-hidden="true" tabindex="-1"></a><span class="kw">use</span> <span class="pp">std::sync::</span>Arc<span class="op">;</span></span>
<span id="cb23-3"><a href="#cb23-3" aria-hidden="true" tabindex="-1"></a><span class="kw">let</span> counter <span class="op">=</span> <span class="pp">Arc::</span>new(<span class="pp">Counter::</span>new(<span class="dv">0</span>))<span class="op">;</span></span></code></pre></div>
<p>so we can clone the <code>counter</code> in both closures (even though technically, cloning it in just one of them should be enough).</p>
<div class="sourceCode" id="cb24"><pre class="sourceCode rust"><code class="sourceCode rust"><span id="cb24-1"><a href="#cb24-1" aria-hidden="true" tabindex="-1"></a><span class="co">// Content</span></span>
<span id="cb24-2"><a href="#cb24-2" aria-hidden="true" tabindex="-1"></a><span class="kw">let</span> inc_btn <span class="op">=</span> <span class="pp">Button::</span>new_with_label(<span class="st">&quot;Increment&quot;</span>)<span class="op">;</span></span>
<span id="cb24-3"><a href="#cb24-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb24-4"><a href="#cb24-4" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> label_clone <span class="op">=</span> label<span class="op">.</span>clone()<span class="op">;</span></span>
<span id="cb24-5"><a href="#cb24-5" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> counter_clone <span class="op">=</span> counter<span class="op">.</span>clone()<span class="op">;</span></span>
<span id="cb24-6"><a href="#cb24-6" aria-hidden="true" tabindex="-1"></a>    inc_btn<span class="op">.</span>connect_clicked(<span class="kw">move</span> <span class="op">|</span>_<span class="op">|</span> <span class="op">{</span></span>
<span id="cb24-7"><a href="#cb24-7" aria-hidden="true" tabindex="-1"></a>        <span class="kw">let</span> val <span class="op">=</span> counter_clone<span class="op">.</span>increment()<span class="op">;</span></span>
<span id="cb24-8"><a href="#cb24-8" aria-hidden="true" tabindex="-1"></a>        label_clone<span class="op">.</span>set_label(<span class="op">&amp;</span><span class="pp">format!</span>(<span class="st">&quot;Incremented to {}&quot;</span><span class="op">,</span> val))<span class="op">;</span></span>
<span id="cb24-9"><a href="#cb24-9" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span>)<span class="op">;</span></span>
<span id="cb24-10"><a href="#cb24-10" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb24-11"><a href="#cb24-11" aria-hidden="true" tabindex="-1"></a><span class="kw">let</span> dec_btn <span class="op">=</span> <span class="pp">Button::</span>new_with_label(<span class="st">&quot;Decrement&quot;</span>)<span class="op">;</span></span>
<span id="cb24-12"><a href="#cb24-12" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb24-13"><a href="#cb24-13" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> label_clone <span class="op">=</span> label<span class="op">.</span>clone()<span class="op">;</span></span>
<span id="cb24-14"><a href="#cb24-14" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> counter_clone <span class="op">=</span> counter<span class="op">.</span>clone()<span class="op">;</span></span>
<span id="cb24-15"><a href="#cb24-15" aria-hidden="true" tabindex="-1"></a>    dec_btn<span class="op">.</span>connect_clicked(<span class="kw">move</span> <span class="op">|</span>_<span class="op">|</span> <span class="op">{</span></span>
<span id="cb24-16"><a href="#cb24-16" aria-hidden="true" tabindex="-1"></a>        <span class="kw">let</span> val <span class="op">=</span> counter_clone<span class="op">.</span>decrement()<span class="op">;</span></span>
<span id="cb24-17"><a href="#cb24-17" aria-hidden="true" tabindex="-1"></a>        label_clone<span class="op">.</span>set_label(<span class="op">&amp;</span><span class="pp">format!</span>(<span class="st">&quot;Decremented to {}&quot;</span><span class="op">,</span> val))<span class="op">;</span></span>
<span id="cb24-18"><a href="#cb24-18" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span>)<span class="op">;</span></span>
<span id="cb24-19"><a href="#cb24-19" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>And our awesome application compiles and runs again!</p>
<h1 id="additional-cleaning">Additional Cleaning</h1>
<p>This is really all the important stuff but there are some additional cosmetic details
I just must do because of my OCD. So just quickly.</p>
<p>First, the code. We should really read the initial state as well so let’s add the simple getter.</p>
<div class="sourceCode" id="cb25"><pre class="sourceCode rust"><code class="sourceCode rust"><span id="cb25-1"><a href="#cb25-1" aria-hidden="true" tabindex="-1"></a><span class="kw">fn</span> get(<span class="op">&amp;</span><span class="kw">self</span>) <span class="op">-&gt;</span> <span class="dt">isize</span> <span class="op">{</span></span>
<span id="cb25-2"><a href="#cb25-2" aria-hidden="true" tabindex="-1"></a>    <span class="kw">self</span><span class="op">.</span><span class="dv">0</span><span class="op">.</span>load(<span class="pp">Ordering::</span>SeqCst)</span>
<span id="cb25-3"><a href="#cb25-3" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>And use it to display the initial title…</p>
<div class="sourceCode" id="cb26"><pre class="sourceCode rust"><code class="sourceCode rust"><span id="cb26-1"><a href="#cb26-1" aria-hidden="true" tabindex="-1"></a><span class="co">// Header</span></span>
<span id="cb26-2"><a href="#cb26-2" aria-hidden="true" tabindex="-1"></a><span class="kw">let</span> header <span class="op">=</span> <span class="pp">gtk::HeaderBar::</span>new()<span class="op">;</span></span>
<span id="cb26-3"><a href="#cb26-3" aria-hidden="true" tabindex="-1"></a><span class="kw">let</span> label <span class="op">=</span> <span class="pp">Label::</span>new(<span class="cn">Some</span>(<span class="op">&amp;</span><span class="pp">format!</span>(<span class="st">&quot;Starting at {}&quot;</span><span class="op">,</span> counter<span class="op">.</span>get())))<span class="op">;</span></span></code></pre></div>
<p>And because we want everyone to be able to enjoy our glorious application, we can provide
nix based build and installation. Create the new file called <code>default.nix</code> (or some prefer <code>release.nix</code>).</p>
<div class="sourceCode" id="cb27"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb27-1"><a href="#cb27-1" aria-hidden="true" tabindex="-1"></a><span class="kw">let</span></span>
<span id="cb27-2"><a href="#cb27-2" aria-hidden="true" tabindex="-1"></a>  <span class="va">pkgs</span> <span class="op">=</span> <span class="op">(</span><span class="bu">import</span> &lt;nixpkgs&gt; <span class="op">{})</span>.fetchFromGitHub <span class="op">{</span></span>
<span id="cb27-3"><a href="#cb27-3" aria-hidden="true" tabindex="-1"></a>    <span class="va">owner</span> <span class="op">=</span> <span class="st">&quot;NixOS&quot;</span><span class="op">;</span></span>
<span id="cb27-4"><a href="#cb27-4" aria-hidden="true" tabindex="-1"></a>    <span class="va">repo</span> <span class="op">=</span> <span class="st">&quot;nixpkgs-channels&quot;</span><span class="op">;</span></span>
<span id="cb27-5"><a href="#cb27-5" aria-hidden="true" tabindex="-1"></a>    <span class="va">rev</span> <span class="op">=</span> <span class="st">&quot;b5f5c97f7d67a99b67731a8cfd3926f163c11857&quot;</span><span class="op">;</span></span>
<span id="cb27-6"><a href="#cb27-6" aria-hidden="true" tabindex="-1"></a>    <span class="co"># nixos-unstable as of 2019-07-24T18:57:18-05:00</span></span>
<span id="cb27-7"><a href="#cb27-7" aria-hidden="true" tabindex="-1"></a>    <span class="va">sha256</span> <span class="op">=</span> <span class="st">&quot;1m9xb3z3jxh0xirdnik11z4hw95bzdz7a4p3ab7y392345jk1wgm&quot;</span><span class="op">;</span></span>
<span id="cb27-8"><a href="#cb27-8" aria-hidden="true" tabindex="-1"></a>  <span class="op">};</span></span>
<span id="cb27-9"><a href="#cb27-9" aria-hidden="true" tabindex="-1"></a><span class="kw">in</span></span>
<span id="cb27-10"><a href="#cb27-10" aria-hidden="true" tabindex="-1"></a><span class="kw">with</span> <span class="op">(</span><span class="bu">import</span> pkgs <span class="op">{});</span></span>
<span id="cb27-11"><a href="#cb27-11" aria-hidden="true" tabindex="-1"></a>rustPackages.rustPlatform.buildRustPackage <span class="kw">rec</span> <span class="op">{</span></span>
<span id="cb27-12"><a href="#cb27-12" aria-hidden="true" tabindex="-1"></a>  <span class="va">name</span> <span class="op">=</span> <span class="st">&quot;rust-gtk-counter-</span><span class="sc">${</span>version<span class="sc">}</span><span class="st">&quot;</span><span class="op">;</span></span>
<span id="cb27-13"><a href="#cb27-13" aria-hidden="true" tabindex="-1"></a>  <span class="va">version</span> <span class="op">=</span> <span class="st">&quot;0.1.0&quot;</span><span class="op">;</span></span>
<span id="cb27-14"><a href="#cb27-14" aria-hidden="true" tabindex="-1"></a>  <span class="va">src</span> <span class="op">=</span> <span class="ss">./.</span><span class="op">;</span></span>
<span id="cb27-15"><a href="#cb27-15" aria-hidden="true" tabindex="-1"></a>  <span class="va">cargoSha256</span> <span class="op">=</span> <span class="st">&quot;0i4px1k23ymq7k3jp6y5g7dz0ysjzwrqqxfz4xg399y7zg5wwwhr&quot;</span><span class="op">;</span></span>
<span id="cb27-16"><a href="#cb27-16" aria-hidden="true" tabindex="-1"></a>  <span class="va">nativeBuildInputs</span> <span class="op">=</span> <span class="op">[</span> pkgconfig <span class="op">];</span></span>
<span id="cb27-17"><a href="#cb27-17" aria-hidden="true" tabindex="-1"></a>  <span class="va">buildInputs</span> <span class="op">=</span> <span class="op">[</span> cairo gtk3 glib pkgconfig <span class="op">];</span></span>
<span id="cb27-18"><a href="#cb27-18" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Unlike in <code>shell.nix</code>, where we used the system’s global <code>&lt;nixpkgs&gt;</code>, here we use global ones only
for <code>fetchFromGitHub</code> and fetch exact revision of nixpkgs to make sure that we get the same version of
dependencies in the future.</p>
<p>Now we can use (even outside of nix-shell) <code>$ nix-build</code> to build the whole project (and likely compile all the C as well as Rust from source)
which will produce symlink named <code>result</code> in local directory pointing to compiled version of our package in <code>nix-store</code> linked
to correct dependencies. <code>$ ./result/bin/rust-gtk-counter</code> should start the app. We should also add <code>result</code> to our <code>.gitignore</code>.
You can even install the app to your nix-env with <code>$ nix-env -if .</code>
because one never knows when (s)he will need to count from zero to some number. The app will then be installed as <code>rust-gtk-counter</code>.</p>
<p>Since I have Mac as well, I can try that nix-build is working on MacOS as expected.</p>
<p><img src="../assets/2019-07-28-mac-ui.png" /></p>
<p>Enjoy glib compile time if you try this.</p>
<h1 id="conclusion">Conclusion</h1>
<p>I have to admit that I expected this whole process to be even slightly more challenging for someone with so little
experience with both Rust and GTK as me. It was not all roses and rainbows though. I’ve definitely spent a lot of
time reading documentation, trying to figure out what to use and how in order to get to the desired outcome.
Also, our application is miles away from being advanced or even useful.</p>
<p>I have to admit that Rust brings some reasonable trade-offs when it comes to building a GTK application.
This doesn’t mean that it’s for free though. If you expect to write the code in the same way as you would do
using some binding to language with GC (like Python or JavaScript) or probably even idiomatic GTK C, you’re
likely to hit some walls on the way. If you decide to use Rust for GTK application development anyway,
you might want to check <a href="https://github.com/antoyo/relm">relm</a> for higher level API before you start designing your own framework.
If you’re a Haskeller, you should check the <a href="https://github.com/owickstrom/gi-gtk-declarative">gi-gtk-declarative</a> but be aware that <strong>both of those libraries are alpha</strong>.
Also for you might want to check <a href="https://www.reddit.com/r/rust/comments/clkcba/building_gtk_app_in_rust_for_a_first_time/evx77ok/">mmstick’s comment</a> on Reddit and PopOS’ <a href="https://github.com/pop-os/firmware-manager">Firmware Manager</a> source to learn
about more advanced pattern of designing GTK app in Rust.
And last but not least if you’re using Windows definitely check <a href="https://github.com/xi-editor/druid">druid</a> which is a data oriented UI toolkit written in Rust.
This is <a href="https://github.com/xi-editor/druid/blob/master/examples/hello.rs">the implementation of druid application similar to this one</a>.</p>
<p>Will I use Rust to build some useful GTK application myself? Maybe I will! But I will definitely evaluate
both Rust and some GC language (probably Haskell) and choose the more appropriate tool to do the job
based on the business logic.</p>
<p>The whole code is <a href="https://github.com/turboMaCk/rust-gtk-counter">available on GitHub</a>.</p>]]></description>
    <pubDate>Sun, 28 Jul 2019 00:00:00 UT</pubDate>
    <guid>http://turbomack.github.iuo/posts/2019-07-28-rust-vs-gui.html</guid>
    <dc:creator>Marek Fajkus</dc:creator>
</item>
<item>
    <title>Deeper Dive To (Tail) Recursion - 2 Tail Calls</title>
    <link>http://turbomack.github.iuo/posts/2017-04-09-tail-recursion.html</link>
    <description><![CDATA[<p>In <a href="./2017-02-12-recursion.html">part #1</a> of this series I wrote about reasons why I think recursion is important and try to reevaluate on this topic a bit.
This time I would like to finally focus on <strong>tail recursion</strong> itself.</p>
<div class="note">
<p>One of occasions on which I’ve been discussing tail recursion was when I was staying in hotel in London with one of my colleagues.
Original conversation we had was about <a href="https://en.wikipedia.org/wiki/Prolog">Prolog</a> therefor I’ve wrote original examples in Erlang (since I don’t know Prolog at all but know that Erlang’s syntax is based on it).
Anyway I’ll also add few examples in other languages to make this article a bit more interesting.</p>
</div>
<h1 id="tail-recursion">Tail Recursion</h1>
<p>If you’re interested in proper definition tail recursion have a look at <a href="https://en.wikipedia.org/wiki/Tail_call">wikipedia article</a>.
To translate this definition to other language you might find easier to understand we can go back to recursion itself. In <a href="./2017-02-12-recursion.html">previous part</a> we said that recursion means self reference - speaking about functions
we can simply say that it’s function which calls itself internally. One thing that might be confusing is term “tail recursion” itself.
In article about recursion we were often using functions for manipulating linked list. This makes sense because list is useful and simple recursive datastructure.
However as you might know list are defined as being either empty (<code>nil</code>) or <code>head cons tail</code> where tail is other list (the one without head).
I’ve intentionally used some examples using term (variable) <code>tail</code> in previous article just to make it clear that using tail of list doesn’t automatically mean your implementation is tail recursive.
<strong>Tail recursion and tail of linked List are two completely unrelated things</strong>.
Honestly I don’t know where <code>tail recursion</code> name comes from and even though I believe there are some reasons for calling it <em>tail</em> I think it only causes confusion.
Another misunderstanding I think is pretty often is folks thinking that every function containing recursive statement on literally “last line” is tail recursive - It’s not.
Let’s leave lazy languages like haskell aside and think just about execution of something like <code>length(list) = 1 + length(tail(list))</code> - You can’t add <code>1</code> before you calculate <code>length(tail(list))</code>, right?</p>
<p><strong>Tail recursive function is function where recursive call is very last (from execution point of view) expression within that function</strong>. This means that there is nothing left to do when recursion finish
and result of recursive call is also result of parent scope (you don’t need to do anything like `add 1` to result of recursive call).
In such cases compilers can implement optimization so parent function “exits” and recursive calls takes its place in stack. Almost like loop, right?</p>
<p>There is also one other way I like to think about this - Tail recursive is actually just calculating arguments for next recursive call until up to the point where it can calculate final result without any other recursive call.</p>
<h1 id="optimization">Optimization</h1>
<p>One think worth mentioning is that writing tail recursive code doesn’t automatically means that tail recursive optimization takes place. Optimization step depends on compiler.
Generally every language with decent functional support (by decent I mean every language that isn’t necessary <a href="https://en.wikipedia.org/wiki/Pattern_matching">pure</a> but claims to have at least partial functional paradigm support)
has this optimization build-in. Also I would like to mention two controversial platforms. <strong>JavaScript is not yet capable of such optimization</strong> even despite promises
of including this to ECMA standard was made a long time ago. However languages like PureScript, Elm or ghcjs does this optimization in compile time for you (generated JS uses loops).
On JVM situation is quite similar. There <a href="https://www.youtube.com/watch?v=_ahvzDzKdB0">were attempts</a> to add this optimization to Java which are in some sense still actual. Yet JVM doesn’t have this optimization yet.
Scalac (Scala’s compiler) can optimize you’re code in compile time (you need to add <code>@tailrec</code> annotation). On the other hand Clojure has construct called <a href="https://clojuredocs.org/clojure.core/recur">recur</a> to go around absence of support on VM level.</p>
<h1 id="writing-tail-recursive-code">Writing Tail Recursive Code</h1>
<p>Rewriting recursive functions to tail recursive ones may seem to be a bit hard at first. Anyway from my experience it might be different from case to case and after some practice (of brain)
it might feel even simpler to think in tail recursion out of the box. However I agree this is not true for every recursive algorithm and sometimes it requires some effort.
That say it might seem that some points I made in previous article about recursion being ultimate technique over loops were bit misleading.
Honestly I still think complicated tail recursion is still easier to understand and more importantly much easier to reason about than complex loops.</p>
<h2 id="examples">Examples</h2>
<p>Let’s have a look on few examples of how we can turn recursive function to tail recursive one.</p>
<h3 id="factorial">Factorial</h3>
<p>This is one if basic implementations of <a href="https://en.wikipedia.org/wiki/Factorial">factorial</a> in Erlang.</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode erlang"><code class="sourceCode erlang"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">-module</span><span class="fu">(</span><span class="ch">fac</span><span class="fu">).</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="kw">-export</span><span class="fu">([</span><span class="ch">fac</span><span class="op">/</span><span class="dv">1</span><span class="fu">]).</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="co">%% Basic recursive implementation of factorial</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a><span class="fu">fac(</span><span class="dv">0</span><span class="fu">)</span> <span class="op">-&gt;</span> <span class="dv">1</span><span class="fu">;</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a><span class="fu">fac(</span><span class="va">N</span><span class="fu">)</span> <span class="ch">when</span> <span class="va">N</span> <span class="op">&gt;</span> <span class="dv">0</span> <span class="op">-&gt;</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>    <span class="va">N</span> <span class="op">*</span> <span class="fu">fac(</span><span class="va">N</span> <span class="op">-</span> <span class="dv">1</span><span class="fu">).</span></span></code></pre></div>
<p>Obviously this implementation <strong>is not</strong> tail recursive. Last expression evaluated is <code>*</code> with <code>N</code> and result of recursive call <code>fac(N - 1)</code>.
Lets change that. To do so we will use another “private function” which will take one more argument. This argument is often called <strong>accumulator</strong> since it’s
used for storing intermediate results. Let’s look of final implementation since it says more than thousand words.</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode erlang"><code class="sourceCode erlang"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">-module</span><span class="fu">(</span><span class="ch">tail_fac</span><span class="fu">).</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="kw">-export</span><span class="fu">([</span><span class="ch">tail_fac</span><span class="op">/</span><span class="dv">1</span><span class="fu">]).</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="co">%% Tail recursive factorial - public function</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a><span class="fu">tail_fac(</span><span class="va">N</span><span class="fu">)</span> <span class="op">-&gt;</span> <span class="fu">tail_fac(</span><span class="va">N</span><span class="fu">,</span> <span class="dv">1</span><span class="fu">).</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a><span class="co">%% Actual private tail recursive implementation</span></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a><span class="fu">tail_fac(</span><span class="dv">0</span><span class="fu">,</span> <span class="va">Acc</span><span class="fu">)</span> <span class="op">-&gt;</span> <span class="va">Acc</span><span class="fu">;</span></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a><span class="fu">tail_fac(</span><span class="va">N</span><span class="fu">,</span> <span class="va">Acc</span><span class="fu">)</span> <span class="ch">when</span> <span class="va">N</span> <span class="op">&gt;</span> <span class="dv">0</span> <span class="op">-&gt;</span></span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>    <span class="fu">tail_fac(</span><span class="va">N</span> <span class="op">-</span> <span class="dv">1</span><span class="fu">,</span> <span class="va">Acc</span> <span class="op">*</span> <span class="va">N</span><span class="fu">).</span></span></code></pre></div>
<p>As you can see Erlang is good fir for example like this due to fact that function is <a href="http://stackoverflow.com/questions/21315927/why-does-erlang-have-arity-in-its-imports">define for particular arity</a>. This mean we can use same name
for function that takes one (<code>tail_fac/1</code>) and two (<code>tail_fac/2</code>) arguments and use them as they were completely different functions. Also we can expose just one of them.</p>
<p>As you can see <code>tail_fac/1</code> just calls <code>tail_fac/2</code> with initial accumulator <code>1</code>. We can say that this is just initialization for call to <code>tail_fac/2</code>.
<code>tail_fac/2</code> on the other hand returns <code>Acc</code> when <code>N == 0</code>. The way I like to think about this is that we’ve changed the direction in which we compute factorial.
Instead of starting from <code>1</code> we start from <code>N</code>. Let’s say we’re evaluating <code>tail_fac(3)</code>. This calls <code>tail_fac/2</code> with <code>N = 3</code> and <code>Acc = 0</code>.
<code>N * Acc</code> then is <code>3 * 1</code> which is <code>3</code>. This is just “identity” of N so if we say <code>3! = 3 * 2 * 1</code> this calculates first just <code>3</code> as initial value.
Also you can thing that what we actually did is rewrite factorial as <code>3! = ((1 * 3) * 2) * 1)</code> so each sub expression has 2 arguments.
<code>N</code> on the other hands keeps track of how many times we need to keep going.
In next call <code>N = 2</code> and <code>Acc = 3</code>. We call recursively one more time with <code>N = 1</code> and <code>Acc = 3 * 2 = 6</code>. In next recursive call <code>N = 0</code> and <code>Acc = 6 * 1 = 6</code>.
Now we match first pattern (<code>tail_fac(0, Acc)</code>) and just return <code>Acc</code> which is our result - <strong>6</strong>.</p>
<p>As you can see we last call with <code>N = 1</code> is not necessary because <code>n * 1 = n</code>. This means we can add small optimization to our code like:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode erlang"><code class="sourceCode erlang"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="co">%% Actual private tail recursive implementation</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="fu">tail_fac(</span><span class="va">N</span><span class="fu">,</span> <span class="va">Acc</span><span class="fu">)</span> <span class="ch">when</span> <span class="va">N</span> <span class="op">&lt;</span> <span class="dv">2</span> <span class="op">-&gt;</span> <span class="va">Acc</span><span class="fu">;</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="fu">tail_fac(</span><span class="va">N</span><span class="fu">,</span> <span class="va">Acc</span><span class="fu">)</span> <span class="ch">when</span> <span class="va">N</span> <span class="op">&gt;</span> <span class="dv">1</span> <span class="op">-&gt;</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>    <span class="fu">tail_fac(</span><span class="va">N</span> <span class="op">-</span> <span class="dv">1</span><span class="fu">,</span> <span class="va">Acc</span> <span class="op">*</span> <span class="va">N</span><span class="fu">).</span></span></code></pre></div>
<p>so we can return on N = 1 without extra recursive call.</p>
<h3 id="length">Length</h3>
<p>Now let’s have a look on length implementation. We already know this function for previous article.
This is basic recursive implementation:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode erlang"><code class="sourceCode erlang"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="kw">-module</span><span class="fu">(length).</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="kw">-export</span><span class="fu">([length</span><span class="op">/</span><span class="dv">1</span><span class="fu">]).</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a><span class="co">%% Basic implementation of length</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a><span class="fu">length([])</span> <span class="op">-&gt;</span> <span class="dv">0</span><span class="fu">;</span></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a><span class="fu">length([</span><span class="va">_</span><span class="fu">])</span> <span class="op">-&gt;</span> <span class="dv">1</span><span class="fu">;</span></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a><span class="fu">length([</span><span class="va">_</span><span class="fu">|</span><span class="va">T</span><span class="fu">])</span> <span class="op">-&gt;</span> <span class="dv">1</span> <span class="op">+</span> <span class="fu">length(</span><span class="va">T</span><span class="fu">).</span></span></code></pre></div>
<p>This really looks much better than our previous attempt in JS (and also this is not broken).
How this works? Simply - for empty list (btw [] is List in Erlang if I haven’t mention this before) is 0.
For list with just one element the length is 1. For any other list it’s 1 + length of previous list.
Say we have list like <code>[1,2,3]</code>. length of this list is <code>1 + (length([2,3]))</code> -&gt; <code>1 + (1 + length([3]))</code> -&gt; <code>1 + (1 + 1)</code> -&gt; <code>1 + 2</code> -&gt; <code>3</code>.
Let’s make this tail recursive.</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode erlang"><code class="sourceCode erlang"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="kw">-module</span><span class="fu">(</span><span class="ch">tail_length</span><span class="fu">).</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a><span class="kw">-export</span><span class="fu">([</span><span class="ch">tail_length</span><span class="op">/</span><span class="dv">1</span><span class="fu">]).</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a><span class="co">%% Tail recursive length - public function</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a><span class="fu">tail_length(</span><span class="va">L</span><span class="fu">)</span> <span class="op">-&gt;</span> <span class="fu">tail_length(</span><span class="va">L</span><span class="fu">,</span> <span class="dv">0</span><span class="fu">).</span></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a><span class="co">%% Actual private tail recursive implementation</span></span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a><span class="fu">tail_length([],</span> <span class="va">_</span><span class="fu">)</span> <span class="op">-&gt;</span> <span class="dv">0</span><span class="fu">;</span></span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a><span class="fu">tail_length([</span><span class="va">_</span><span class="fu">],</span> <span class="va">Acc</span><span class="fu">)</span> <span class="op">-&gt;</span> <span class="va">Acc</span> <span class="op">+</span> <span class="dv">1</span><span class="fu">;</span></span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a><span class="fu">tail_length([</span><span class="va">_</span><span class="fu">|</span><span class="va">T</span><span class="fu">],</span> <span class="va">Acc</span><span class="fu">)</span> <span class="op">-&gt;</span> <span class="fu">tail_length(</span><span class="va">T</span><span class="fu">,</span> <span class="va">Acc</span> <span class="op">+</span> <span class="dv">1</span><span class="fu">).</span></span></code></pre></div>
<p>Once again I like to think about this as like calculation from other end.
In previous example we calculated length of 3 element list by constructing expression containing sub expression of length calculation for each tail and evaluating it.
There is certainly nothing bad about it from mathematical point of view. However our machines have certain attributes and limitations (like time and space).
How tail recursive implementation works? Instead of calculating length of list’s tail first we calculate lenght of heads and continue by adding lenght of next head
up to the point there is nothing left. If this sound confusing don’t worry. Just follow this computation with me.</p>
<p>Again lets assume we have list <code>[1,2,3]</code>. <code>tail_length/1</code> acts just like public interface (initializer) for our private implementation so actual call is to <code>tail_lenght/2</code> which looks like
<code>tail_length([1,2,3], 0)</code>. What we do next is to calculate length up to this point by adding intermediate (<code>Acc</code>) result to result for current head - <code>0 + 1</code>.
Since we don’t have lenght for any element yet we pass 0 in intial call (you can think this is length of empty list if you wish).
Ok so length of heads up to this point is <code>1</code> (0 + 1). Then we need calculate length of tail in next call <code>tail_length([2,3], 1)</code>.
See that there is nothing we have wait for? Result of this expression is just result of recursive call. This is why compiler is able to optimize this under the hood.
Let’s continue. Next call will look like this <code>tail_length([3], 1 + 1) = tail_length([3], 2)</code> because length of head is always one we just need to add 1 to length of previous heads every time we don’t match empty list.
And finally last call matches 2 cause which evaluates <code>2 + 1 = 3</code> and this is our result.</p>
<div class="note">
<p>You can see I’m using term <code>tail</code> a lot. Once again this has nothing to do with tail-recursion itself but rather with list we are using in examples.
This might be a bit confusing but even though recursion is common while working with lists it’s really not the only place where we are speaking about (tail) recursion.
This is why I used factorial as first example.</p>
</div>
<p>So far we have 2 nice little examples of tail recursion in Erlang. However you can easily transform all of this to any other language
(even to one which has no tail recursive optimization build in if you want - but don’t expect any better characteristics than).
Of course every language has it’s own specifics. Let’s have a look of possible Haskell implementation.</p>
<p>Notice that Haskell’s pattern matching is slightly different. In Erlang there were 3 patterns to match list - <code>[]</code> for empty list (nil),
<code>[x]</code> for list with one element and <code>[H|T]</code> for list with more elements (Head and Tail).
In Haskell you need just 2 patterns since list with one element (just head) is list with head and empty list as tail - <code>head:[]</code>.
With this in mind lets have a look at actual code.</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="kw">module</span> <span class="dt">Length</span>(<span class="fu">length</span>) <span class="kw">where</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a><span class="fu">length</span><span class="ot"> ::</span> [a] <span class="ot">-&gt;</span> <span class="dt">Int</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a><span class="fu">length</span> <span class="ot">=</span> length&#39; <span class="dv">0</span></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a><span class="ot">length&#39; ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> [a] <span class="ot">-&gt;</span> <span class="dt">Int</span></span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a>length&#39; acc [] <span class="ot">=</span> acc</span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a>length&#39; acc (h<span class="op">:</span>t) <span class="ot">=</span> length&#39; (acc <span class="op">+</span> <span class="dv">1</span>) t</span></code></pre></div>
<p>You can notice few other differences from previous example. First we are using prime (<code>'</code>) in name of private function. Also the order of arguments is different.
Since Haskell is using <a href="https://en.wikipedia.org/wiki/Currying">currying</a> this order of arguments seems to be more logic. This is nice example of how language features might affect the way you design your API
to make its usage convenient. However we’re not hear to speak about neither language features nor currying. You can find plenty of articles to learn more about both.</p>
<p>Recursive functions for data-structures like list have one interesting property.
There is really a lot of useful functions like <code>map</code>, <code>filter</code>, <code>length</code>, <code>zip</code>, <code>sum</code> and similar.
What they have in common? Try to think about possible implementation. You always initialize them with some value.
This value is of the same type as result of recursive call. And then you go over all elements inside this data-structure.
In fact this pattern is so common that it has it’s own name and abstraction in almost every language (at least one with higher order functions).
This is called <a href="https://en.wikipedia.org/wiki/Fold_(higher-order_function)">folding</a>. You might know this as <code>folder</code> <code>foldl</code> or <code>reduce</code> function in your language.
Also you’re maybe familiar with fancy buzzword thing called <a href="https://en.wikipedia.org/wiki/MapReduce">MapReduce</a>. Fun fact - Map is just one specific type of reduced.
Term “map-reduce” is in that sense like saying “paint<sub>inred</sub>-paint<sub>incolor</sub>”. Anyway this name makes some sense
since due to distributed nature of such systems <code>map</code> is type of reducer you can run in parallel (in distribution) and then you reduce all collected data way you want.</p>
<p>In next (and last) part of this series of articles I want to dedicate just to folding. Anyway for now let me show you one more example.
Next algorithm can is recursive but can’t be implemented using folding.</p>
<h3 id="fibonacci-number">Fibonacci Number</h3>
<p>Fibonacci numbers are highly overused example for recursive algorithms. You probably saw it dozen times so here it’s once again:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode erlang"><code class="sourceCode erlang"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="kw">-module</span><span class="fu">(</span><span class="ch">fib</span><span class="fu">).</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a><span class="kw">-export</span><span class="fu">([</span><span class="ch">fib</span><span class="op">/</span><span class="dv">1</span><span class="fu">]).</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a><span class="fu">fib(</span><span class="dv">0</span><span class="fu">)</span> <span class="op">-&gt;</span> <span class="dv">0</span><span class="fu">;</span></span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a><span class="fu">fib(</span><span class="dv">1</span><span class="fu">)</span> <span class="op">-&gt;</span> <span class="dv">1</span><span class="fu">;</span></span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a><span class="fu">fib(</span><span class="va">N</span><span class="fu">)</span> <span class="op">-&gt;</span> <span class="fu">fib(</span><span class="va">N</span> <span class="op">-</span> <span class="dv">2</span><span class="fu">)</span> <span class="op">+</span> <span class="fu">fib(</span><span class="va">N</span> <span class="op">-</span> <span class="dv">1</span><span class="fu">).</span></span></code></pre></div>
<p>And the most slides on conferences ends right here. For example <a href="http://www.youtube.com/watch?v=5hDVftaPQwY&amp;t=7m15s">this one</a> by “Pragmatic Dave Thomas”.</p>
<p>I really don’t want to undermine mr. Thomas in any way but this is how same thing looks like in Ruby:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode ruby"><code class="sourceCode ruby"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="cf">def</span> fib(n)</span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> <span class="dv">0</span> <span class="cf">if</span> n <span class="kw">==</span> <span class="dv">0</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> <span class="dv">1</span> <span class="cf">if</span> n <span class="kw">==</span> <span class="dv">1</span></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a>  fib(n<span class="dv">-1</span>) <span class="kw">+</span> fib(n<span class="dv">-2</span>)</span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a><span class="cf">end</span></span></code></pre></div>
<p>Doesn’t look so different to me¯\<sub>(ツ)</sub>_/¯.
Even though more ruby-like implementation would be probably:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode ruby"><code class="sourceCode ruby"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="cf">class</span> <span class="dt">Integer</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a>  <span class="cf">def</span> fib</span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="dv">0</span> <span class="cf">if</span> <span class="dv">self</span> <span class="kw">==</span> <span class="dv">0</span></span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="dv">1</span> <span class="cf">if</span> <span class="dv">self</span> <span class="kw">==</span> <span class="dv">1</span></span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a>    (<span class="dv">self</span> <span class="kw">-</span> <span class="dv">1</span>)<span class="at">.fib</span> <span class="kw">+</span> (<span class="dv">self</span> <span class="kw">-</span> <span class="dv">2</span>)<span class="at">.fib</span></span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a>  <span class="cf">end</span></span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a><span class="cf">end</span></span></code></pre></div>
<p>So then you can use it like <code>10.fib =&gt; 55</code>.</p>
<p>Anyway the reason I’m showing you Fibonacci number is because you need to know 2 previous results to calculate next number in sequence.
It turned out that a lot of people found it difficult to transform this to tail recursive implementation.
In fact it’s fairly simple! Just use two accumulators instead of one!</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode erlang"><code class="sourceCode erlang"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="kw">-module</span><span class="fu">(</span><span class="ch">tail_fib</span><span class="fu">).</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a><span class="kw">-export</span><span class="fu">([</span><span class="ch">tail_fib</span><span class="op">/</span><span class="dv">1</span><span class="fu">]).</span></span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a><span class="fu">tail_fib(</span><span class="dv">0</span><span class="fu">)</span> <span class="op">-&gt;</span> <span class="dv">0</span><span class="fu">;</span></span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a><span class="fu">tail_fib(</span><span class="dv">1</span><span class="fu">)</span> <span class="op">-&gt;</span> <span class="dv">1</span><span class="fu">;</span></span>
<span id="cb10-7"><a href="#cb10-7" aria-hidden="true" tabindex="-1"></a><span class="fu">tail_fib(</span><span class="va">N</span><span class="fu">)</span> <span class="op">-&gt;</span> <span class="fu">tail_fib(</span><span class="va">N</span> <span class="op">-</span> <span class="dv">2</span><span class="fu">,</span> <span class="dv">0</span><span class="fu">,</span> <span class="dv">1</span><span class="fu">).</span></span>
<span id="cb10-8"><a href="#cb10-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-9"><a href="#cb10-9" aria-hidden="true" tabindex="-1"></a><span class="fu">tail_fib(</span><span class="dv">0</span><span class="fu">,</span> <span class="va">Acc1</span><span class="fu">,</span> <span class="va">Acc2</span><span class="fu">)</span> <span class="op">-&gt;</span> <span class="va">Acc1</span> <span class="op">+</span> <span class="va">Acc2</span><span class="fu">;</span></span>
<span id="cb10-10"><a href="#cb10-10" aria-hidden="true" tabindex="-1"></a><span class="fu">tail_fib(</span><span class="va">N</span><span class="fu">,</span> <span class="va">Acc1</span><span class="fu">,</span> <span class="va">Acc2</span><span class="fu">)</span> <span class="op">-&gt;</span> <span class="fu">tail_fib(</span><span class="va">N</span> <span class="op">-</span> <span class="dv">1</span><span class="fu">,</span> <span class="va">Acc2</span><span class="fu">,</span> <span class="va">Acc1</span> <span class="op">+</span> <span class="va">Acc2</span><span class="fu">)</span></span></code></pre></div>
<p>That’s it! Principle is still the same just applied to different problem. I’m not going to go through evaluation once again so take this as exam if you want.</p>
<h1 id="final-thoughts">Final thoughts</h1>
<p>I hope now you have better understanding what tail recursion is, how it works and how to write your own tail recursive functions.
However in most cases you don’t really need to implement everything we did in this article. For instance our length function
can be written in much less code using just one simple level of abstraction - <code>foldr</code>, <code>foldl</code> or <code>reduce</code> or <a href="https://en.wikibooks.org/wiki/Haskell/Foldable">Foldable</a> if you want.
More about this next time. Peace.</p>]]></description>
    <pubDate>Sun, 09 Apr 2017 00:00:00 UT</pubDate>
    <guid>http://turbomack.github.iuo/posts/2017-04-09-tail-recursion.html</guid>
    <dc:creator>Marek Fajkus</dc:creator>
</item>
<item>
    <title>Deep Dive To (Tail) Recursion - 1 Intro</title>
    <link>http://turbomack.github.iuo/posts/2017-02-12-recursion.html</link>
    <description><![CDATA[<p>From time to time someone raises concern about performance of recursive algorithms in some of many conversations I have with my colleagues,
friends and folks from local meetup groups. Even though this might seem to be clear to people with certain level of functional programming experience it’s certainly not generally well understood topic.
I’ve found that there is a lot of confusion going around and some folks seems to be pretty scared when you pull all that weird terminology right of the box.
This is why I still think it’s worth spending some time exploring what recursion and tail recursion really means and how you can use both in practice.</p>
<h1 id="recursion">Recursion</h1>
<p>Recursion can be found in many areas of mathematics and computer science. There are some examples:</p>
<h3 id="shell">Shell</h3>
<pre class="shell"><code>rm -r folder_name
</code></pre>
<p>where <code>-r</code> means apply command <code>rm</code> recursively to all sub files and sub folders.</p>
<h3 id="algorithms">Algorithms</h3>
<div class="sourceCode" id="cb2"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">function</span> <span class="fu">length</span>(arr) {</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> (<span class="op">!</span>arr[<span class="dv">0</span>]) {</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>    }</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>    arr<span class="op">.</span><span class="fu">pop</span>()<span class="op">;</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="dv">1</span> <span class="op">+</span> <span class="fu">length</span>(arr)<span class="op">;</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>where function contains call to itself.</p>
<div class="note">
<p><code>length()</code> implementation is just used for demonstration purposes. Please don’t try to use it in real world!
There are many problems with the code above. Performance will be really bad and also function will cause mutations
in original array which becomes empty after being passed to the function due to <code>pop()</code> call! If you thinking about
using something similar in your code base <code>fuckUpLength</code> would be probably better name for such function.</p>
</div>
<h3 id="algebraic-data-types">Algebraic Data Types</h3>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">RoseTree</span> a <span class="ot">=</span> <span class="dt">Node</span> a [<span class="dt">RoseTree</span> a]</span></code></pre></div>
<p>where type definition might be recursive (type containing itself)</p>
<h3 id="sequences">Sequences</h3>
<p>For instance our friend Fibonacci</p>
<p><span class="math display">$$ \begin{align*}
  F_0 &amp;= 0, \\
  F_1 &amp;= 1, \\
  F_n &amp;= F_{n-1} + F_{n-2}
\end{align*}
$$</span></p>
<p>where fibonnaci n is define in terms of fibbonaci n-1 and fibbonaci n-2.</p>
<h3 id="yo-man-i-heard-you-like">Yo man I heard you like…</h3>
<p>Even though these three might seem completely unrelated it’s super important to understand that underlaying concept is same.</p>
<p>Let’s use <code>rm</code> example for instance. This command executes itself for every sub-folder of folder it’s executed.
This simple principle allows <code>rm</code> to work with any depth of directories in file system.</p>
<p>More generally <strong>recursion is property of self-reference</strong>. Acronym “GNU” Gnu’s Not Unix is refering to itself (G stays for GNU itself).
Therefore we call such acronym <a href="https://en.wikipedia.org/wiki/Recursive_acronym">recursive acronym</a>.</p>
<p>You can have a look at <a href="https://en.wikipedia.org/wiki/Recursion">wikipedia</a> where you can find more in case you’re interested.</p>
<p><img src="http://s2.quickmeme.com/img/a7/a764b1ed93f5fae80373f990de499c79ef0e2b0b3f950cb6b42ed9294de3b947.jpg" /></p>
<h1 id="loops">Loops</h1>
<p>Loops are fairly popular technique used in place of recursion in many programs.
It’s quite important to understand that loops are workaround for underlaying recursive nature of program or algorithm.
The idea is simple - instead of dealing with function calling itself we loop sequence of “instructions” over data.
In some sense loops are just restrictive abstraction over <code>GOTO</code> but core idea stays same.
Program checks some condition (like <code>i &lt; arr.length</code>) proceed some instructions,
apply some mutation to data it started with (eg. <code>i++</code>) and <code>GOTO</code> condition again to either executes instructions with new state or exists subroutine if condition is not satisfied.</p>
<p>This solves problem with stack overflow - function can’t return (exit)
until all its sub-calls (recursive calls) return) and is generally much closer to what we want hardware to do than recursion itself.
Let’s rewrite <code>length()</code> implementation from previous examples using loop.</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="kw">function</span> <span class="fu">length</span>(arr) {</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>    <span class="kw">var</span> len <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>    <span class="cf">while</span>(arr[<span class="dv">0</span>]) {</span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>      len<span class="op">++;</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>      arr<span class="op">.</span><span class="fu">pop</span>()</span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>    }</span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> len<span class="op">;</span></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<div class="note">
<p>Even this implementation of length is bad. Function still performs mutation on array using <code>pop()</code>.
Please do not use such code for anything but learning.</p>
</div>
<p>Loops are so widely used technique that many programmers kind of defaults to it. This is probably because most widely used
languages derives more or less from C (think about C++, Java, C#, JavaScript…). Anyway I would say this is huge tradeoff.
Translating algorithm for machine is hard and when people writing programs starts to think as machine they quite often miss general logic in program
(Tend to solves adhock cases here and there instead abstracting concepts to composable pieces).
Even it might seem easier to use loops over recursion to most developers it’s definitely not easier when it comes
to more complex algorithms or design of large systems.</p>
<p>There are so many things that can go wrong in simple <code>for</code> loop that it’s even not worth trying to list them.
Concept of loops also heavily relies on mutations which are hard to deal with especially when concurrency (in multithreaded environment) is involved.
This is nothing new. Even imperative languages introduced many concepts to address issues like this
like for example <a href="https://en.wikipedia.org/wiki/Iterator">iterators</a> which I’m not really going to cover in this article but
you can find tons of material about them on <a href="https://duckduckgo.com/?q=iterator">the internet</a>.</p>
<p>Nevertheless I still think that recursion over power any other concept and should be the thing we defaults to instinctively when thinking about problem.</p>
<p>Even most <a href="https://en.wikipedia.org/wiki/Dynamic_programming">dynamic programming</a> practices often starts with recursive definition and translates that implementation to loop just to gain better performance characteristics later.</p>
<div class="note">
<p>In case you’re interested learning more about dynamic programming I recommend to look at <a href="https://www.youtube.com/watch?v=OQ5jsbhAv_M&amp;list=PLfMspJ0TLR5HRFu2kLh3U4mvStMO8QURm">MIT’s public Introduction to Algorithms</a>.</p>
</div>
<p>There is still one issue using technique like dynamic programming in my opinion. Once you optimize code to loops
it’s stay that way. This means every time you or anyone else will need to tweak something in you’re code youl’ll need to walk through
code you was no able to put down from head in first place. You can imagine this won’t be pleasing experience.
Wouldn’t it be nice to have recursive implementation and hand optimization to compiler instead?</p>
<p>Good news folks! There are compilers capable of such optimization out there! The only requirement on your side
is to keep your implementation <a href="https://en.wikipedia.org/wiki/Tail_call">tail recursive</a>!</p>
<p>We will look what this mean and how you can use it in <a href="./2017-04-09-tail-recursion.html">next part</a>. Till then let force be with you my friends.</p>]]></description>
    <pubDate>Sun, 12 Feb 2017 00:00:00 UT</pubDate>
    <guid>http://turbomack.github.iuo/posts/2017-02-12-recursion.html</guid>
    <dc:creator>Marek Fajkus</dc:creator>
</item>
<item>
    <title>From Vim to Emacs - Year Later</title>
    <link>http://turbomack.github.iuo/posts/2016-12-29-from-vim-to-emacs-year-later.html</link>
    <description><![CDATA[<p>It’s been about a year since I’ve switched from my highly customized vim to Emacs as a default editor.
I have to admit it I had sometimes pretty tough times with Emacs especially at the beginnings.
Anyway at the same time I’ve found it really beneficial and have significant impact on my current workflow.
This article isn’t meant in any sense to be tutorial to neither Emacs nor Vim but is rather
a reasoning about my experience and recapitulation of what I’ve learned during past year.
Can it really help someone? I don’t know. But I still feel it’s worth putting those ideas down.</p>
<h1 id="why-would-anyone-possibly-want-to-do-this">Why Would Anyone Possibly Want To Do This?</h1>
<p>This sounds like a simple question, doesn’t it? And indeed I believe It’s simple question.
However I struggle to find a simple answer. Let me at least try to explain what drove me to all of this in bit more complicated way.</p>
<p>Generally I think there are some people who focus on creating things. I’m not really one of them - sorry.
Maybe I had been driven by passion for creating things in past and maybe it was reason I’ve started doing things I do.
Unfortunately I feel like I enjoy learning how things work rather then simply applying that knowledge.
I also think it’s absolutely fine feel differently about this.</p>
<p>Some might point out that tools are just disruption<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a> from real problems and in some sense I get it.
On the other hand there are folks saying that it’s almost required to learn how to use one of truly extensible editors (Vim/Emacs) to become real hacker<a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a>.
I don’t want to do any of these points.</p>
<p>If you’re really focused on things you’re creating and don’t see any point in changing your tools it’s just fine.
Just forget about this article right now and go do stuff you’re really interested in.</p>
<p>As you can imagine I spent quite a some time learning and putting together <a href="https://github.com/turboMaCk/Dotfiles/blob/master/vimrc">my original Vim configuration</a>.
Why I did start over and switch to Emacs then? I think this is actually more philosophical than practical question.
Both Vim and Emacs has own way of thinking about world. To some degree Vim is more *NIXy kind of tool.
It does one thing and it does it well - text manipulation.
Yes learning curve isn’t the smoothest one but once you get to used to it it’s fairly simple.
It’s also extensible even though you’re forced to use VimL<a href="#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a> which is a bit strange language.
However it’s still pretty straight forward tool. It’s also limited by design and its simplicity to some degree.
Vim itself is synchronous (even blocking UI) and it doesn’t really supports much that goes beyond basic text editing.
Even though there are projects like <a href="https://github.com/neovim/neovim">Neo Vim</a> I think it’ still fair to say that vim is design as ultimate tool for text manipulating and that’s it.
Is it extensible? Sure but only to the point you’re not trying to bend it way too much. Than it starts to feel.. strange.</p>
<p>Emacs on the other hand is Lips interpreter with interface for text editing. It’s extensibility is insane.
As old joke you probably heard says: “Emacs is a great operating system lacking only decent text editor.”
Think about it this way. Emacs is framework given to you so you can build your own editor or anything you want in it.
It’s much more complicated than Vim is. For good and bad there are more concepts
you need to learn to actually understand even small fraction of what Emacs can do.
Anyway for text editing addicts this is an ultimate tool. If you like text as I do you have all reasons to consider using Emacs.</p>
<h1 id="frustration">Frustration</h1>
<p>I have to admit I’m not one of these super smart people. Anyway I think I have good resistance to a pain.
I’m usually able to force myself through the hard path and somehow handle it without going crazy too much. Or maybe I have no problem with going crazy a bit.
Anyway I have to admit that this was hard. I was playing with Emacs for some time before I actually started using it as main editor.
I’ve tried <a href="https://github.com/syl20bnr/spacemacs">Spacemacs</a> distribution and wasn’t really happy with it. Then I’ve rewrote my configuration from scratch at least three times.
I’ve also used Emacs for about two weeks and then switched back to Vim for next few weeks simply because it drove me mad.</p>
<p>One of the worst moments is when you really need to focus on solving some problem or delivering some shit and your
editor keeps telling you that you don’t really know how edit files. That sux pretty much.</p>
<p>I’ve managed to break it the hard way. I can tell you that I don’t want to ever go through this process again.
The truth is I don’t know if it was worth it. I know I’m happy now but I’m pretty sure I’m not objective at this point.
Anyway I have some advise especially for people who are coming to Emacs from Vim. Few lessons I’ve learned anyone should know up front.</p>
<h2 id="learn-first">Learn First</h2>
<p>You don’t have to switch from day to day. Generally it’s good idea to play with Emacs a bit first. And I mean pure Emacs.</p>
<h2 id="e-lisp-is-your-friend">E-Lisp is Your Friend</h2>
<p>If you’re starting I think it’s better to play with emacs-lisp rather than use it for working on your projects.
Using Emacs to do some work without knowing it will be only frustrating experience.
Using it to learn emacs-lisp helps you to stay focus and enjoy that experience.
Also elisp has amazing support up front. Let it be the measure for how you want to build your workflow for other languages.</p>
<h2 id="dont-be-too-much-evil">Don’t be Too Much Evil</h2>
<p>Evil mode is great. Anyway looking back I think it is really not a good idea to rely on it much especially at the beginning.
Evil is really Vim for Emacs but Emacs + Evil is much more than Vim inside Emacs. Don’t ignore it.
You will have to learn some of the Emacs way sooner and later. Sooner is better.</p>
<h2 id="try-to-use-emacs-in-yours-workflow">Try To Use Emacs In YOURS Workflow</h2>
<p>There are many cool plugins you want to try out I know. Anyway You can’t possibly change your whole workflow in one day.
If you’re using tmux try to use Emacs within tmux<a href="#fn4" class="footnote-ref" id="fnref4" role="doc-noteref"><sup>4</sup></a>. If you’re coming from GUI editor - use GUI and forget about terminal version.</p>
<h2 id="dont-stick-with-it-for-too-long-though">Don’t Stick With It For Too Long Though…</h2>
<p>Once you feel comfortable with Emacs try to evolve your workflow.</p>
<h3 id="gui-version-is-better">GUI Version Is Better</h3>
<p>Really it is. Are you running Emacs with in terminal? What about running terminal within Emacs?</p>
<h3 id="magit-is-awesome">Magit is Awesome</h3>
<p>I heard you like command line tools. That’s great. I like them too. Give Magit a try anyway.
It’s advanced and you can switch to terminal any time you want.</p>
<h3 id="org-mode-is-super-cool-but-not-necessary">Org Mode is Super Cool… But NOT Necessary</h3>
<p>Org mode is great. You want to learn it. However if you’re programmer I think it’s not the most important thing.
You should focus on work first. Org mode is really simple and you can learn it in no time later.</p>
<h1 id="after-one-year">After One Year</h1>
<p>So I’m kind of celebrating my first year with Emacs. I really wanted to make some recap of what I’ve learned.
So I’ve <a href="https://github.com/turboMaCk/Dotemacs">rewrote my configuration to org-mode as literate program</a>. I’ve also switched from <code>use-package</code>
to <a href="https://github.com/cask/cask">Cask</a> and <a href="https://github.com/rdallasgray/pallet">Pallet</a>. Once again I’ve spend some of my free time just for setting things up.
This is what we OCD’s do, right?</p>
<p>I also made few other changes / decisions based on my personal preferences:</p>
<h2 id="no-more-evil-leader">No More evil-leader</h2>
<p>For some reason I don’t feel like I’ll need to use evil-leader anymore. I don’t think it fits well to Emacs.
It was really helpful for making Emacs feel more like Vim at first but now I feel like I want to use Emacs way
of bindings rather then using leader.</p>
<h2 id="goodbye-neotree">Goodbye NeoTree</h2>
<p>You might know NERDTree plugin for Vim. It’s largely popular among Vimmers.
However I was never really happy with Neotree (Emacs alternative) for many reasons I don’t want to discuss here. To prevent this frustration
I simply forced myself not to use it by removing it. I’ll rather use basics like <code>dired</code> or <code>C-x C-f</code> instead going forward.</p>
<h1 id="are-emacs-users-better-programmers">Are Emacs Users Better Programmers?</h1>
<p>Hard to say. But you bet I believe they are as every other Emacs user do:D
Probably it’s better to avoid any discussion like this right from start.
In any case I think that there are certain skill which comes from experience of setting up Emacs.
In the end your configuration is probably <strong>the biggest project of your life time</strong>. It will live and evolve with you.
It’s worth understanding and spending some time on its maintainance.
But in the end it’s all up to you.</p>
<section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>You can find many articles about tools as procrastination and similar.</p>
<ul>
<li>MPJ’s video about why he uses basic text editor without extra config: <a href="https://www.youtube.com/watch?v=dIjKJjzRX_E">https://www.youtube.com/watch?v=dIjKJjzRX_E</a></li>
<li>J. Pabblo Fernández - Emacs is hurting clojure <a href="https://pupeno.com/2016/09/26/emacs-is-hurting-clojure/">https://pupeno.com/2016/09/26/emacs-is-hurting-clojure/</a></li>
</ul>
<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></li>
<li id="fn2"><p>Again there are dozens of examples about this topic.</p>
<ul>
<li>Perry Metzger - The Editor of The Lifetime talk <a href="https://www.youtube.com/watch?v=VADudzQGvU8">https://www.youtube.com/watch?v=VADudzQGvU8</a></li>
</ul>
<a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></li>
<li id="fn3"><p>Actually Vim also supports plugins written in Python and other languages but these simply don’t feel like first class citizens.<a href="#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn4"><p>Check navigate.el for integration with Tmux. <a href="https://github.com/keith/evil-tmux-navigator">https://github.com/keith/evil-tmux-navigator</a><a href="#fnref4" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>]]></description>
    <pubDate>Thu, 29 Dec 2016 00:00:00 UT</pubDate>
    <guid>http://turbomack.github.iuo/posts/2016-12-29-from-vim-to-emacs-year-later.html</guid>
    <dc:creator>Marek Fajkus</dc:creator>
</item>
<item>
    <title>Org Mode in Hakyll</title>
    <link>http://turbomack.github.iuo/posts/2016-12-21-org-mode-in-hakyll.html</link>
    <description><![CDATA[<p>As an <a href="https://gnu.org/software/emacs/">Emacs</a> user I’m really glad that I can benefit from full power of <a href="http://pandoc.org">Pandoc</a> thanks to <a href="https://jaspervdj.be/hakyll/">Hakyll</a> while creating this site.
One of the Emacs’ beloved mode - <a href="http://orgmode.org/">org-mode</a> is supported by Pandoc therefore you can use it as markup language in Hakyll.
Org-mode is really powerful. There is only problem with it - it’s almost exclusive for Emacs environment.
<a href="https://gist.github.com/kinjo/509761">Github</a> maybe supports org preview but true power of org comes from editing experience in Emacs.
Because Org is so exclusive to Emacs (written in E-Lisp) it’s hardly default markup even for many Emacs users simply
because many of them has to to support all kinds of users not just ones who happen to use Emacs and org. Markdown is de-facto standard these days.
This is for example why I’m personally also writing markdown daily. However this is quite different when it comes
to project maintained only by one person - you. Org mode is simply so much better for taking notes, creating to-dos and much more
that it become one of the most successful Emacs extension. Especially when it comes to <a href="https://en.wikipedia.org/wiki/Literate_programming">literate programming</a> which is what I mostly trying to do
on this blog and more generally <a href="http://reproducibleresearch.net">reproducible research</a> which is movement I’m pretty big fan of.
I’m also actively looking for interesting ideas and tools since I’ve discovered <a href="https://jupyter.org">Jubyter notebooks</a> about a year ago.</p>
<p>To be honest since I’m mostly working on documents maintain by group of people (mostly colleagues) I’m not really an expert on org-mode.
Anyway I was working on new blog post recently where I would really appreciate some of Org’s features.
This is why I’ve recently added org support to this site willing to test Pandoc support.
I’ve also decided to keep this document public on this site as a kind of reference which might be helpful to some folks.</p>
<p>Actually this is the end of post itself. Everything below is just to test how Pandoc handles org files.</p>
<h1 id="this-is-h1">This is H1</h1>
<p>There is paragraph under h1</p>
<h2 id="h2">H2</h2>
<h3 id="h3">H3</h3>
<h1 id="some-basic-test">Some basic test</h1>
<p>This is <strong>bold</strong>, <em>italic</em>, <code class="verbatim">code</code>, <code>verbatim</code> and <del>strike</del> text.</p>
<ul>
<li>However <strong><em>bold and italic</em></strong> doesn’t play well when used together like in markdown.</li>
<li>However <em><strong>bold and italic</strong></em> doesn’t play well when used together like in markdown.</li>
</ul>
<h1 id="list">List</h1>
<ul>
<li>Bullet</li>
<li>Another bullet
<ul>
<li>child
<ul>
<li>deep</li>
</ul></li>
</ul></li>
</ul>
<h2 id="other-style">Other style</h2>
<ul>
<li>Bullet</li>
<li>Another bullet
<ul>
<li>child
<ul>
<li>deep</li>
</ul></li>
</ul></li>
</ul>
<h2 id="other-style-1">Other style</h2>
<ol type="1">
<li>Bullet</li>
<li>Another bullet
<ol type="1">
<li>child
<ol type="1">
<li>deep</li>
</ol></li>
</ol></li>
</ol>
<p>Style <code class="verbatim">*</code> isn’t supported.</p>
<h1 id="links">Links</h1>
<p><span class="spurious-link" target="link to org mode homepage"><em><a href="http://orgmode.org/">http://orgmode.org/</a></em></span></p>
<h1 id="check-list-13-33">Check List [1/3] [33%]</h1>
<ul class="task-list">
<li><label><input type="checkbox" />Item</label></li>
<li><label><input type="checkbox" />Item</label></li>
<li><label><input type="checkbox" checked="" />Checked item</label></li>
</ul>
<p>Heading and has special class however <code class="verbatim">&lt;ul&gt;</code> and <code class="verbatim">&lt;li&gt;</code> are plain.</p>
<h1 id="task-list">Task List</h1>
<h2 id="some-to-do"><span class="todo TODO">TODO</span> some to-do</h2>
<h2 id="done-to-do"><span class="done DONE">DONE</span> done to-do</h2>
<p>Items are added with special class.</p>
<h1 id="tables">Tables</h1>
<table>
<thead>
<tr class="header">
<th>number</th>
<th>description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td>looooong long name</td>
</tr>
<tr class="even">
<td>5</td>
<td>name</td>
</tr>
</tbody>
</table>
<p><code class="verbatim">&lt;tr&gt;</code> has <code class="verbatim">even</code> and <code class="verbatim">odd</code> classes.</p>
<h1 id="source-code">Source Code</h1>
<p><strong>Emacs Lisp:</strong></p>
<div class="sourceCode" id="cb1" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>(<span class="kw">defun</span><span class="fu"> negate </span>(x)</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;Negate the value of x.&quot;</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>    (<span class="op">-</span> x))</span></code></pre></div>
<div class="sourceCode" id="cb2" data-org-language="emacs-lisp" data-results="output"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>(<span class="kw">print</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>    (negate <span class="dv">10</span>))</span></code></pre></div>
<p>There are interesting classes like <code class="verbatim">sourceCode</code> and <code class="verbatim">example</code>.
Also there html5 attributes prefixed with <code class="verbatim">rundoc-</code>.</p>
<p><strong>Haskell:</strong></p>
<div class="sourceCode" id="cb3" data-results="output"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="ot">factorial ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>factorial <span class="dv">0</span> <span class="ot">=</span> <span class="dv">1</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>factorial n <span class="ot">=</span> n <span class="op">*</span> factorial (n <span class="op">-</span> <span class="dv">1</span>)</span></code></pre></div>
<h1 id="latex">LaTeX</h1>
<ul>
<li><strong>Characters:</strong> α β → ↑ ∨ \and ⟹ π ∞</li>
<li><strong>Inline Math:</strong> <span class="math inline"><em>f</em>(<em>x</em>) = <em>x</em><sup>2</sup></span></li>
<li><strong>More complex:</strong> <span class="math inline">$\frac{x^2}{2}$</span></li>
</ul>
<p>LaTeX characters are wrapped in <code>&lt;em&gt;</code> and Math inside <code>&lt;span class="math inline"&gt;</code>.</p>
<h2 id="ℋℯ𝓁𝓁ℴ">ℋℯ𝓁𝓁ℴ!</h2>
<p><strong>NOTE:</strong> <em>There is standard LaTeX embeded above which is skipped during compilation to HTML.</em></p>
<p><strong>This is using</strong> <span class="spurious-link" target="MathJax"><em><a href="https://www.mathjax.org/">https://www.mathjax.org/</a></em></span></p>
<p><span class="math display">$$\sum_{i=0}^n i^2 = \frac{(n^2+n)(2n+1)}{6}$$</span></p>
<h1 id="deadline">Deadline</h1>
<h1 id="tagged">Tagged <span class="tag" data-tag-name="tag"><span class="smallcaps">tag</span></span></h1>
<p>Tags are not visible in render</p>
<h1 id="block-quote">Block Quote</h1>
<blockquote>
<p>Org mode is amazing. So is Hakyll &amp; Pandoc.</p>
</blockquote>
<h1 id="image">Image</h1>
<p><a href="http://media.riffsy.com/images/f8534774b678ad1932b379a03460680b/raw">http://media.riffsy.com/images/f8534774b678ad1932b379a03460680b/raw</a></p>
<p>Images has to have extension like:</p>
<p><img src="../assets/reddit.png" /></p>
<p>then it can be loaded even from other origin..</p>
<p><img src="http://45.media.tumblr.com/270992d792c9899f79888a8ea6955ca5/tumblr_o0jt792qLd1r83d7lo6_540.gif" /></p>
<h1 id="description-list">Description List</h1>
<dl>
<dt>Frodo</dt>
<dd>
The hobbit ringbearer
</dd>
<dt>Aragorn</dt>
<dd>
The human ranger, true kind of Gondor
</dd>
<dt>Gandalf</dt>
<dd>
The Grey Wizard
</dd>
</dl>
<p>creddits to <span class="spurious-link" target="nihilmancer"><em><a href="https://www.reddit.com/user/nihilmancer">https://www.reddit.com/user/nihilmancer</a></em></span></p>
<h1 id="footnotes">Footnotes</h1>
<p>This has some<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a> foot note.</p>
<section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>The link is: <a href="http://orgmode.org">http://orgmode.org</a><a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>]]></description>
    <pubDate>Wed, 21 Dec 2016 00:00:00 UT</pubDate>
    <guid>http://turbomack.github.iuo/posts/2016-12-21-org-mode-in-hakyll.html</guid>
    <dc:creator>Marek Fajkus</dc:creator>
</item>
<item>
    <title>Hybrid Types in TypeScript</title>
    <link>http://turbomack.github.iuo/posts/2016-12-07-hybrid-types-in-typescript.html</link>
    <description><![CDATA[<p>Yesterday I’ve been refactoring one of our internal library in <a href="globalwebindex.net">GWI</a> from JavaScript to TypeScript.
As a JavaScript veteran I like to use some edgy non-conventional &amp; pre-ES 2015 coding styles.
I’m not using <code>prototype</code>, <code>class</code> or <code>this</code> much often.
I’m rather using <a href="http://javascript.info/tutorial/factory-constructor-pattern">Factory Constructor Pattern</a>
quite often as well as <a href="https://en.wikipedia.org/wiki/Higher-order_function">Higher Order Functions</a> for simulating <a href="https://en.wikipedia.org/wiki/Currying">currying</a>
and like to with objects and play with scopes. Now you might think that this is silly. No one will understand my code and using truly
private functions makes it harder to extend functionality. And you’re right:D Anyway I know that I can write more reliable
code more quickly and from my experience when code is reliable enough not many people will need to change it.
And when they do they are mostly experienced and are able to understand it.
Also I like private functions. If you miss any functionality or abstraction it’s always good idea to add it directly to library
or write your own than hack it. Anyway this article is not about these patterns
and how to use them but rather about how it feels when you put <a href="https://www.typescriptlang.org">TypeScript</a> in the mix.
If you want to learn more about these patterns <a href="https://duckduckgo.com/">DuckDuckGo</a> some other article.</p>
<p>First let me explain one thing. I’m not writing TypeScript day to day. But when I do I’m mostly exploring edges of what it can do.
I’m writing a lot of ES 2015 ECMAScript in work and <a href="elm-lang.org">Elm</a> for fun (what is slowly changing since we already shipped first
feature written in Elm elm as part of our production <a href="ember.js">Ember.js</a> app).</p>
<h1 id="problem">Problem</h1>
<p>The idea is this. We have got our internal system for charts written in <a href="https://d3js.org/">D3.js</a>. Some parts of this are
<a href="https://github.com/GlobalWebIndex/d3scription">open-sourced and available on GitHub</a>. In GWI we have got whole charts written in pure D3 that
are sharing common interface so on application layer you’re basically just dynamically switching factory functions for charts based on
based on chart type and everything works like a magic. However testing visualization layer is hard or even impossible. Wouldn’t it be
a good idea to have at least type check for these interfaces? I think it would!</p>
<p>For purpose of this tutorial I’ve picked one smaller part rather than whole chart.
D3 itself comes with component called <a href="https://github.com/d3/d3/blob/master/API.md#axes-d3-axis">d3.svg.axis</a>.
However sometimes it doesn’t fit your needs so you’ll need to implement your own solution.
Lets say we want to implement custom axis which will create ticks based on data we have so for each data-point it will create a tick on axis.
This is how we want to use our new component:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> axis <span class="op">=</span> <span class="fu">exactAxis</span>()</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>    <span class="op">.</span><span class="fu">scale</span>(scale)</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>    <span class="op">.</span><span class="fu">data</span>(someData)</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>    <span class="op">.</span><span class="fu">tickFormat</span>(d <span class="kw">=&gt;</span> <span class="vs">`</span><span class="sc">${</span>d<span class="sc">}</span><span class="vs">`</span>)<span class="op">;</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>d3<span class="op">.</span><span class="fu">select</span>(<span class="st">&#39;.axis-group&#39;</span>)<span class="op">.</span><span class="fu">call</span>(axis)<span class="op">;</span></span></code></pre></div>
<p>As you can see I’ve chosen <code>exactAxis</code> as a name for this component. It’s a <code>function</code>. However it returns some <code>Object</code>
that has at least <code>scale</code>, <code>data</code> &amp; <code>tickFormat</code> methods. We’re using chaining so at least <code>scale</code> and <code>data</code> should return object they are defined on.
Also on the last line we are using <a href="https://github.com/d3/d3-selection/blob/master/README.md#selection_call">d3.selection.call</a>
which means that <code>axis</code> (thing returned by <code>tickFormat</code> call) needs to be <code>function</code>. This might mean that <code>tickFormat</code> returns some <code>function</code> instead of <code>object</code>
but that is silly idea. Then you will need to always call <code>tickFormat</code> as last method.
That said I think we can agree that:</p>
<ul>
<li><code>exactAxis()</code> returns <code>function</code> (and <strong>functions are Objects in JavaScript</strong>) with all methods defined.</li>
<li>Each method will return object it’s called on (so we can chain method calls).</li>
</ul>
<h1 id="interface">Interface</h1>
<p>Now we know what we need so lets define interface for out <code>exactAxis</code> function.</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> <span class="op">*</span> <span class="im">as</span> d3 <span class="im">from</span> <span class="st">&#39;d3&#39;</span><span class="op">;</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="kw">interface</span> TickFormat <span class="kw">extends</span> <span class="bu">Function</span> {</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>    (any) <span class="op">:</span> string<span class="op">;</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a><span class="kw">interface</span> ExactAxis <span class="kw">extends</span> <span class="bu">Function</span> {</span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>    (<span class="dt">g</span> <span class="op">:</span> d3<span class="op">.</span><span class="at">Selection</span><span class="op">&lt;</span>any<span class="op">&gt;</span>) <span class="op">:</span> <span class="kw">void</span><span class="op">;</span></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>    <span class="fu">scale</span>(<span class="dt">scale</span> <span class="op">:</span> d3<span class="op">.</span><span class="at">scale</span><span class="op">.</span><span class="at">Ordinal</span><span class="op">&lt;</span>any<span class="op">,</span> any<span class="op">&gt;</span>) <span class="op">:</span> ExactAxis<span class="op">;</span></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>    <span class="fu">data</span>(<span class="dt">data</span> <span class="op">:</span> any[]) <span class="op">:</span> ExactAxis<span class="op">;</span></span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>    <span class="fu">tickFormat</span>(<span class="dt">fc</span> <span class="op">:</span> TickFormat) <span class="op">:</span> ExactAxis<span class="op">;</span></span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>As you can see there are some <code>any</code> used.
Maybe it’s good idea to solve this using <a href="https://www.typescriptlang.org/docs/handbook/generics.html">Generics</a>.</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> <span class="op">*</span> <span class="im">as</span> d3 <span class="im">from</span> <span class="st">&#39;d3&#39;</span><span class="op">;</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="kw">interface</span> TickFormat<span class="op">&lt;</span>T<span class="op">&gt;</span> <span class="kw">extends</span> <span class="bu">Function</span> {</span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>    (<span class="dt">data</span> <span class="op">:</span> T) <span class="op">:</span> string<span class="op">;</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a><span class="kw">interface</span> ExactAxis<span class="op">&lt;</span>T<span class="op">&gt;</span> <span class="kw">extends</span> <span class="bu">Function</span> {</span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>    (<span class="dt">g</span> <span class="op">:</span> d3<span class="op">.</span><span class="at">Selection</span><span class="op">&lt;</span>any<span class="op">&gt;</span>) <span class="op">:</span> <span class="kw">void</span><span class="op">;</span></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>    <span class="fu">scale</span>(<span class="dt">scale</span> <span class="op">:</span> d3<span class="op">.</span><span class="at">scale</span><span class="op">.</span><span class="at">Ordinal</span><span class="op">&lt;</span>any<span class="op">,</span> any<span class="op">&gt;</span>) <span class="op">:</span> ExactAxis<span class="op">&lt;</span>T<span class="op">&gt;;</span></span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>    <span class="fu">data</span>(<span class="dt">data</span> <span class="op">:</span> T[]) <span class="op">:</span> ExactAxis<span class="op">&lt;</span>T<span class="op">&gt;;</span></span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a>    <span class="fu">tickFormat</span>(<span class="dt">fc</span> <span class="op">:</span> TickFormat<span class="op">&lt;</span>T<span class="op">&gt;</span>) <span class="op">:</span> ExactAxis<span class="op">&lt;</span>T<span class="op">&gt;;</span></span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>OK this is better. Now it’s obvious that we are passing some data around.</p>
<p>There are still some <code>any</code> used for d3 parts but I think we can leave it.</p>
<h1 id="so-called-hybrid-types-in-ts">So Called Hybrid Types in TS</h1>
<p>Now we can actually start implementing our axis component. This was the part I was not familiar till yesterday.
I was actually asking some friends who work with typescript daily how an interface like this can be implemented in typescript
but unluckily no one knew. I knew how this can be done in JS but that implementation did not satisfy tsc (compiler).
Than as all SW engineers I’ve turned my last hope to <a href="https://www.typescriptlang.org/docs/handbook/interfaces.html">documentation</a>
and found part about <a href="https://www.typescriptlang.org/docs/handbook/interfaces.html#hybrid-types">Hybrid Types</a>.</p>
<blockquote>
<p>As we mentioned earlier, interfaces can describe the rich types present in real world JavaScript.
Because of JavaScript’s dynamic and flexible nature, you may occasionally encounter an object that works as a combination of some of the types described above.</p>
</blockquote>
<p>That’s exactly what I was looking for!</p>
<p>Let’s have a look at how we minimal “implementation” that satisfy our interface:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="kw">function</span> exactAxis<span class="op">&lt;</span>T<span class="op">&gt;</span>() <span class="op">:</span> ExactAxis<span class="op">&lt;</span>T<span class="op">&gt;</span> {</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>    <span class="kw">const</span> axis <span class="op">=</span> <span class="op">&lt;</span>ExactAxis<span class="op">&lt;</span>T<span class="op">&gt;&gt;</span><span class="kw">function</span>() {</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>    }</span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>    axis<span class="op">.</span><span class="at">scale</span> <span class="op">=</span> <span class="kw">function</span>(<span class="dt">scale</span> <span class="op">:</span> d3<span class="op">.</span><span class="at">scale</span><span class="op">.</span><span class="at">Ordinal</span><span class="op">&lt;</span>any<span class="op">,</span> any<span class="op">&gt;</span>) <span class="op">:</span> ExactAxis<span class="op">&lt;</span>T<span class="op">&gt;</span> {</span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> axis<span class="op">;</span></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>    }</span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>    axis<span class="op">.</span><span class="at">data</span> <span class="op">=</span> <span class="kw">function</span>(<span class="dt">d</span> <span class="op">:</span> T[]) {</span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> axis<span class="op">;</span></span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a>    }</span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a>    axis<span class="op">.</span><span class="at">tickFormat</span> <span class="op">=</span> <span class="kw">function</span>(<span class="dt">fc</span> <span class="op">:</span> TickFormat<span class="op">&lt;</span>T<span class="op">&gt;</span>) <span class="op">:</span> ExactAxis<span class="op">&lt;</span>T<span class="op">&gt;</span> {</span>
<span id="cb4-14"><a href="#cb4-14" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> axis<span class="op">;</span></span>
<span id="cb4-15"><a href="#cb4-15" aria-hidden="true" tabindex="-1"></a>    }</span>
<span id="cb4-16"><a href="#cb4-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-17"><a href="#cb4-17" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> axis<span class="op">;</span></span>
<span id="cb4-18"><a href="#cb4-18" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>That’s it! Actually this won’t do anything but it’s whole boiler plate we need.
Now comes the easy part. We can just simply implement logic (and that’s always simpler than designing API, right?)</p>
<p>So as a bonus - This is one possible full implementation:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="kw">function</span> exactAxis<span class="op">&lt;</span>T<span class="op">&gt;</span>() <span class="op">:</span> ExactAxis<span class="op">&lt;</span>T<span class="op">&gt;</span> {</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>    <span class="co">// Constants</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">const</span> <span class="dt">TEXT_DELTA</span> <span class="op">:</span> number <span class="op">=</span> <span class="dv">25</span><span class="op">;</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>    <span class="kw">const</span> <span class="dt">WITHOUT_TEXT_DELTA</span> <span class="op">:</span> number <span class="op">=</span> <span class="fl">12.5</span><span class="op">;</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a>    <span class="co">// Instance variables</span></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> <span class="dt">data</span> <span class="op">:</span> T[] <span class="op">=</span> []<span class="op">;</span></span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> <span class="dt">tickFormat</span> <span class="op">:</span> TickFormat<span class="op">&lt;</span>T<span class="op">&gt;</span> <span class="op">=</span> (d) <span class="kw">=&gt;</span> <span class="vs">`</span><span class="sc">${</span>d<span class="sc">}</span><span class="vs">`</span><span class="op">;</span></span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> scale<span class="op">;</span></span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a>    <span class="co">// Render</span></span>
<span id="cb5-12"><a href="#cb5-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-13"><a href="#cb5-13" aria-hidden="true" tabindex="-1"></a>    <span class="kw">const</span> axis <span class="op">=</span> <span class="op">&lt;</span>ExactAxis<span class="op">&lt;</span>T<span class="op">&gt;&gt;</span><span class="kw">function</span>(g) {</span>
<span id="cb5-14"><a href="#cb5-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-15"><a href="#cb5-15" aria-hidden="true" tabindex="-1"></a>        <span class="co">// D3 always returns array</span></span>
<span id="cb5-16"><a href="#cb5-16" aria-hidden="true" tabindex="-1"></a>        <span class="co">// Lets render axis for every given group.</span></span>
<span id="cb5-17"><a href="#cb5-17" aria-hidden="true" tabindex="-1"></a>        g<span class="op">.</span><span class="fu">each</span>(<span class="kw">function</span>() {</span>
<span id="cb5-18"><a href="#cb5-18" aria-hidden="true" tabindex="-1"></a>            <span class="kw">const</span> <span class="dt">$el</span> <span class="op">:</span> d3<span class="op">.</span><span class="at">Selection</span><span class="op">&lt;</span>any<span class="op">&gt;</span> <span class="op">=</span> d3<span class="op">.</span><span class="fu">select</span>(<span class="kw">this</span>)<span class="op">;</span></span>
<span id="cb5-19"><a href="#cb5-19" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-20"><a href="#cb5-20" aria-hidden="true" tabindex="-1"></a>            <span class="co">// Prepare data for ticks</span></span>
<span id="cb5-21"><a href="#cb5-21" aria-hidden="true" tabindex="-1"></a>            <span class="kw">const</span> ticksData <span class="op">=</span> data<span class="op">.</span><span class="fu">sort</span>((a<span class="op">,</span> b) <span class="kw">=&gt;</span> <span class="bu">Number</span>(a) <span class="op">-</span> <span class="bu">Number</span>(b))</span>
<span id="cb5-22"><a href="#cb5-22" aria-hidden="true" tabindex="-1"></a>                <span class="op">.</span><span class="fu">reduce</span>((acc<span class="op">,</span> d) <span class="kw">=&gt;</span> {</span>
<span id="cb5-23"><a href="#cb5-23" aria-hidden="true" tabindex="-1"></a>                    <span class="kw">const</span> latestWithText <span class="op">=</span> <span class="fu">last</span>(acc<span class="op">.</span><span class="at">withText</span>)<span class="op">;</span></span>
<span id="cb5-24"><a href="#cb5-24" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-25"><a href="#cb5-25" aria-hidden="true" tabindex="-1"></a>                    <span class="co">// skip duplicates immediately</span></span>
<span id="cb5-26"><a href="#cb5-26" aria-hidden="true" tabindex="-1"></a>                    <span class="cf">if</span> (latestWithText <span class="op">&amp;&amp;</span> latestWithText <span class="op">===</span> d) { <span class="cf">return</span> acc<span class="op">;</span> }</span>
<span id="cb5-27"><a href="#cb5-27" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-28"><a href="#cb5-28" aria-hidden="true" tabindex="-1"></a>                    <span class="co">// for first or not too close we add text one</span></span>
<span id="cb5-29"><a href="#cb5-29" aria-hidden="true" tabindex="-1"></a>                    <span class="cf">if</span> (<span class="op">!</span>latestWithText <span class="op">||</span> <span class="bu">Math</span><span class="op">.</span><span class="fu">abs</span>(<span class="fu">scale</span>(latestWithText) <span class="op">-</span> <span class="fu">scale</span>(d)) <span class="op">&gt;=</span> TEXT_DELTA) {</span>
<span id="cb5-30"><a href="#cb5-30" aria-hidden="true" tabindex="-1"></a>                        acc<span class="op">.</span><span class="at">withText</span><span class="op">.</span><span class="fu">push</span>(d)<span class="op">;</span></span>
<span id="cb5-31"><a href="#cb5-31" aria-hidden="true" tabindex="-1"></a>                    } <span class="cf">else</span> {</span>
<span id="cb5-32"><a href="#cb5-32" aria-hidden="true" tabindex="-1"></a>                        <span class="co">// we add tick without text</span></span>
<span id="cb5-33"><a href="#cb5-33" aria-hidden="true" tabindex="-1"></a>                        <span class="kw">const</span> latestWithoutText <span class="op">=</span> <span class="fu">last</span>(acc<span class="op">.</span><span class="at">withoutText</span>)<span class="op">;</span></span>
<span id="cb5-34"><a href="#cb5-34" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-35"><a href="#cb5-35" aria-hidden="true" tabindex="-1"></a>                        <span class="co">// check for delta from latest with text</span></span>
<span id="cb5-36"><a href="#cb5-36" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">if</span> (<span class="bu">Math</span><span class="op">.</span><span class="fu">abs</span>(<span class="fu">scale</span>(latestWithText) <span class="op">-</span> <span class="fu">scale</span>(d)) <span class="op">&gt;=</span> WITHOUT_TEXT_DELTA) {</span>
<span id="cb5-37"><a href="#cb5-37" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-38"><a href="#cb5-38" aria-hidden="true" tabindex="-1"></a>                            <span class="co">// check for delta from latest without text</span></span>
<span id="cb5-39"><a href="#cb5-39" aria-hidden="true" tabindex="-1"></a>                            <span class="cf">if</span> (<span class="op">!</span>latestWithoutText <span class="op">||</span> <span class="bu">Math</span><span class="op">.</span><span class="fu">abs</span>(<span class="fu">scale</span>(latestWithoutText) <span class="op">-</span> <span class="fu">scale</span>(d)) <span class="op">&gt;=</span> WITHOUT_TEXT_DELTA) {</span>
<span id="cb5-40"><a href="#cb5-40" aria-hidden="true" tabindex="-1"></a>                                acc<span class="op">.</span><span class="at">withoutText</span><span class="op">.</span><span class="fu">push</span>(d)<span class="op">;</span></span>
<span id="cb5-41"><a href="#cb5-41" aria-hidden="true" tabindex="-1"></a>                            }</span>
<span id="cb5-42"><a href="#cb5-42" aria-hidden="true" tabindex="-1"></a>                        }</span>
<span id="cb5-43"><a href="#cb5-43" aria-hidden="true" tabindex="-1"></a>                    }</span>
<span id="cb5-44"><a href="#cb5-44" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-45"><a href="#cb5-45" aria-hidden="true" tabindex="-1"></a>                    <span class="cf">return</span> acc<span class="op">;</span></span>
<span id="cb5-46"><a href="#cb5-46" aria-hidden="true" tabindex="-1"></a>                }<span class="op">,</span> { <span class="dt">withText</span><span class="op">:</span> []<span class="op">,</span> <span class="dt">withoutText</span><span class="op">:</span> [] } )<span class="op">;</span></span>
<span id="cb5-47"><a href="#cb5-47" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-48"><a href="#cb5-48" aria-hidden="true" tabindex="-1"></a>            <span class="co">// Render</span></span>
<span id="cb5-49"><a href="#cb5-49" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-50"><a href="#cb5-50" aria-hidden="true" tabindex="-1"></a>            <span class="co">// With text</span></span>
<span id="cb5-51"><a href="#cb5-51" aria-hidden="true" tabindex="-1"></a>            <span class="kw">const</span> withText <span class="op">=</span> g<span class="op">.</span><span class="fu">selectAll</span>(<span class="st">&#39;.tick.tick--with-text&#39;</span>)<span class="op">.</span><span class="fu">data</span>(ticksData<span class="op">.</span><span class="at">withText</span>)<span class="op">;</span></span>
<span id="cb5-52"><a href="#cb5-52" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-53"><a href="#cb5-53" aria-hidden="true" tabindex="-1"></a>            withText<span class="op">.</span><span class="fu">enter</span>()<span class="op">.</span><span class="fu">append</span>(<span class="st">&#39;g&#39;</span>)</span>
<span id="cb5-54"><a href="#cb5-54" aria-hidden="true" tabindex="-1"></a>                <span class="op">.</span><span class="fu">attr</span>(<span class="st">&#39;class&#39;</span><span class="op">,</span> <span class="st">&#39;tick tick--with-text&#39;</span>)</span>
<span id="cb5-55"><a href="#cb5-55" aria-hidden="true" tabindex="-1"></a>                <span class="op">.</span><span class="fu">append</span>(<span class="st">&#39;text&#39;</span>)</span>
<span id="cb5-56"><a href="#cb5-56" aria-hidden="true" tabindex="-1"></a>                <span class="op">.</span><span class="fu">style</span>(<span class="st">&#39;text-anchor&#39;</span><span class="op">,</span> <span class="st">&#39;middle&#39;</span>)<span class="op">;</span></span>
<span id="cb5-57"><a href="#cb5-57" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-58"><a href="#cb5-58" aria-hidden="true" tabindex="-1"></a>            withText<span class="op">.</span><span class="fu">transition</span>()</span>
<span id="cb5-59"><a href="#cb5-59" aria-hidden="true" tabindex="-1"></a>                <span class="op">.</span><span class="fu">attr</span>(<span class="st">&#39;transform&#39;</span><span class="op">,</span> d <span class="kw">=&gt;</span> <span class="vs">`translate(</span><span class="sc">${</span><span class="fu">scale</span>(d)<span class="sc">}</span><span class="vs">, 15)`</span>)</span>
<span id="cb5-60"><a href="#cb5-60" aria-hidden="true" tabindex="-1"></a>                <span class="op">.</span><span class="fu">select</span>(<span class="st">&#39;text&#39;</span>)</span>
<span id="cb5-61"><a href="#cb5-61" aria-hidden="true" tabindex="-1"></a>                <span class="op">.</span><span class="fu">text</span>(tickFormat)<span class="op">;</span></span>
<span id="cb5-62"><a href="#cb5-62" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-63"><a href="#cb5-63" aria-hidden="true" tabindex="-1"></a>            withText<span class="op">.</span><span class="fu">exit</span>()<span class="op">.</span><span class="fu">remove</span>()<span class="op">;</span></span>
<span id="cb5-64"><a href="#cb5-64" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-65"><a href="#cb5-65" aria-hidden="true" tabindex="-1"></a>            <span class="co">// Without text</span></span>
<span id="cb5-66"><a href="#cb5-66" aria-hidden="true" tabindex="-1"></a>            <span class="kw">const</span> withoutText <span class="op">=</span> g<span class="op">.</span><span class="fu">selectAll</span>(<span class="st">&#39;.tick.tick--without-text&#39;</span>)<span class="op">.</span><span class="fu">data</span>(ticksData<span class="op">.</span><span class="at">withoutText</span>)<span class="op">;</span></span>
<span id="cb5-67"><a href="#cb5-67" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-68"><a href="#cb5-68" aria-hidden="true" tabindex="-1"></a>            withoutText<span class="op">.</span><span class="fu">enter</span>()<span class="op">.</span><span class="fu">append</span>(<span class="st">&#39;g&#39;</span>)</span>
<span id="cb5-69"><a href="#cb5-69" aria-hidden="true" tabindex="-1"></a>                <span class="op">.</span><span class="fu">attr</span>(<span class="st">&#39;class&#39;</span><span class="op">,</span> <span class="st">&#39;tick tick--without-text&#39;</span>)</span>
<span id="cb5-70"><a href="#cb5-70" aria-hidden="true" tabindex="-1"></a>                <span class="op">.</span><span class="fu">append</span>(<span class="st">&#39;line&#39;</span>)</span>
<span id="cb5-71"><a href="#cb5-71" aria-hidden="true" tabindex="-1"></a>                <span class="op">.</span><span class="fu">attr</span>(<span class="st">&#39;x1&#39;</span><span class="op">,</span> <span class="dv">0</span>)</span>
<span id="cb5-72"><a href="#cb5-72" aria-hidden="true" tabindex="-1"></a>                <span class="op">.</span><span class="fu">attr</span>(<span class="st">&#39;x2&#39;</span><span class="op">,</span> <span class="dv">0</span>)</span>
<span id="cb5-73"><a href="#cb5-73" aria-hidden="true" tabindex="-1"></a>                <span class="op">.</span><span class="fu">attr</span>(<span class="st">&#39;y1&#39;</span><span class="op">,</span> <span class="dv">0</span>)</span>
<span id="cb5-74"><a href="#cb5-74" aria-hidden="true" tabindex="-1"></a>                <span class="op">.</span><span class="fu">attr</span>(<span class="st">&#39;y2&#39;</span><span class="op">,</span> <span class="dv">5</span>)<span class="op">;</span></span>
<span id="cb5-75"><a href="#cb5-75" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-76"><a href="#cb5-76" aria-hidden="true" tabindex="-1"></a>            withoutText<span class="op">.</span><span class="fu">transition</span>()</span>
<span id="cb5-77"><a href="#cb5-77" aria-hidden="true" tabindex="-1"></a>                <span class="op">.</span><span class="fu">attr</span>(<span class="st">&#39;transform&#39;</span><span class="op">,</span> d <span class="kw">=&gt;</span> <span class="vs">`trnaslate(</span><span class="sc">${</span><span class="fu">scale</span>(d)<span class="sc">}</span><span class="vs">, 0)`</span>)<span class="op">;</span></span>
<span id="cb5-78"><a href="#cb5-78" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-79"><a href="#cb5-79" aria-hidden="true" tabindex="-1"></a>            withoutText<span class="op">.</span><span class="fu">exit</span>()<span class="op">.</span><span class="fu">remove</span>()<span class="op">;</span></span>
<span id="cb5-80"><a href="#cb5-80" aria-hidden="true" tabindex="-1"></a>        })<span class="op">;</span></span>
<span id="cb5-81"><a href="#cb5-81" aria-hidden="true" tabindex="-1"></a>    }</span>
<span id="cb5-82"><a href="#cb5-82" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-83"><a href="#cb5-83" aria-hidden="true" tabindex="-1"></a>    <span class="co">// Public Interface</span></span>
<span id="cb5-84"><a href="#cb5-84" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-85"><a href="#cb5-85" aria-hidden="true" tabindex="-1"></a>    axis<span class="op">.</span><span class="at">scale</span> <span class="op">=</span> <span class="kw">function</span>(<span class="dt">newScale</span> <span class="op">:</span> d3<span class="op">.</span><span class="at">scale</span><span class="op">.</span><span class="at">Ordinal</span><span class="op">&lt;</span>any<span class="op">,</span> any<span class="op">&gt;</span>) <span class="op">:</span> ExactAxis<span class="op">&lt;</span>T<span class="op">&gt;</span> {</span>
<span id="cb5-86"><a href="#cb5-86" aria-hidden="true" tabindex="-1"></a>        scale <span class="op">=</span> newScale<span class="op">;</span></span>
<span id="cb5-87"><a href="#cb5-87" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> axis<span class="op">;</span></span>
<span id="cb5-88"><a href="#cb5-88" aria-hidden="true" tabindex="-1"></a>    }</span>
<span id="cb5-89"><a href="#cb5-89" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-90"><a href="#cb5-90" aria-hidden="true" tabindex="-1"></a>    axis<span class="op">.</span><span class="at">data</span> <span class="op">=</span> <span class="kw">function</span>(<span class="dt">d</span> <span class="op">:</span> T[]) {</span>
<span id="cb5-91"><a href="#cb5-91" aria-hidden="true" tabindex="-1"></a>        data <span class="op">=</span> d<span class="op">;</span></span>
<span id="cb5-92"><a href="#cb5-92" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> axis<span class="op">;</span></span>
<span id="cb5-93"><a href="#cb5-93" aria-hidden="true" tabindex="-1"></a>    }</span>
<span id="cb5-94"><a href="#cb5-94" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-95"><a href="#cb5-95" aria-hidden="true" tabindex="-1"></a>    axis<span class="op">.</span><span class="at">tickFormat</span> <span class="op">=</span> <span class="kw">function</span>(<span class="dt">fc</span> <span class="op">:</span> TickFormat<span class="op">&lt;</span>T<span class="op">&gt;</span>) <span class="op">:</span> ExactAxis<span class="op">&lt;</span>T<span class="op">&gt;</span> {</span>
<span id="cb5-96"><a href="#cb5-96" aria-hidden="true" tabindex="-1"></a>        tickFormat <span class="op">=</span> fc<span class="op">;</span></span>
<span id="cb5-97"><a href="#cb5-97" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> axis<span class="op">;</span></span>
<span id="cb5-98"><a href="#cb5-98" aria-hidden="true" tabindex="-1"></a>    }</span>
<span id="cb5-99"><a href="#cb5-99" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-100"><a href="#cb5-100" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> axis<span class="op">;</span></span>
<span id="cb5-101"><a href="#cb5-101" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p><em>Note: If you read carefully you know that I’m not using <code>this</code> often. However for this example has one usage of <code>this</code>
to get element in d3’s <code>each</code> method. It doesn’t make sense to go against library API.</em></p>
<p><em>Note: This is really simplified implementation. Actual thing similar to this we have in our lib uses 3 types of ticks
(long text, short text, no text). This means also different interface for <code>FormatValue</code> an we are also always adding
line tick (without text) in middle of ticks with text. However I think this simpler example is better for purpose of this
article.</em></p>
<h1 id="dont-drink-too-much-kool-aid">Don’t Drink Too Much Kool-Aid</h1>
<p>TypeScript maybe lets you express these kind of dynamic APIs but there is down side to it.
If you remove implementation for any method compiler won’t complain even though your function
does not return valid <code>ExactAxis&lt;T&gt;</code> implementation. However if you make mistake in method implementation (change its types) it will fail
during compile time which seems as an improvement to pure JS version. That said if you want to play with something like this
It’s usually good idea to <strong>always start with boilerplate with all methods defined</strong>.</p>]]></description>
    <pubDate>Wed, 07 Dec 2016 00:00:00 UT</pubDate>
    <guid>http://turbomack.github.iuo/posts/2016-12-07-hybrid-types-in-typescript.html</guid>
    <dc:creator>Marek Fajkus</dc:creator>
</item>
<item>
    <title>Elm 0.17 - Successful Upgrade of Real World App</title>
    <link>http://turbomack.github.iuo/posts/2016-05-15-eml-0.17-upgrade.html</link>
    <description><![CDATA[<p><em>Note: This is mirror of my <a href="https://medium.com/@turbo_MaCk/elm-0-17-successful-upgrade-of-real-world-app-and-some-soft-of-guide-to-all-of-this-cafd59dec56f">original</a> article published on medium.</em></p>
<p>It has been few month since I’ve started learning <a href="http://elm-lang.org/">Elm programming language</a>.
I’ve been walking around elm for quite a while without ever touching it.
However not so long ago I’ve decided to learn some statically typed functional language started reading <a href="http://learnyouahaskell.com/">Learn You Haskell for Great Good!</a> and so I also finally put my hands on Elm.
I’ve learned bit of syntax, core library, types, Signals, Effects, Mailboxes and <a href="https://github.com/evancz/elm-architecture-tutorial">Elm architecture</a>.
It was quite interesting journey. Soon I’ll become wonder if I’ll be able to write some smaller project from end to start just using elm.
Some kind of real world application to challenge myself and also this world of typed purity.
I wanted it to talk to some JSON API and use Html. Github’s API seems to be good think to start with so I start writing github repository browser in elm.
<a href="http://turbomack.github.io/elm-github-repos/">This is demo of app I’m talking about</a>.</p>
<p>Just few days ago to me unexpected thing happens. <a href="http://elm-lang.org/blog/farewell-to-frp">Elm 0.17 release was announced!</a>
I remember myslef reading that announcement and thinking “Omg, what’s going on?!”.
From that moment Signals, Messages, Effects and Mailboxes are past of Elm. What should I think of it?</p>
<blockquote class="twitter-tweet" data-lang="en">
<p lang="en" dir="ltr">
<a href="https://twitter.com/rabbitonweb"><span class="citation" data-cites="rabbitonweb">@rabbitonweb</span></a> I'm not sure yet. It's interesting and scary at the same time.
</p>
— Marek Fajkus (<span class="citation" data-cites="turbo_MaCk">@turbo_MaCk</span>) <a href="https://twitter.com/turbo_MaCk/status/730355729778020352">May 11, 2016</a>
</blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>This was really huge change in how everybody (including me) thinks about building web apps in Elm.
We all know these kind of changes are really hard to bring in practice since you already have large codebase around your ecosystem.
In that moment that app I wrote few month ago came to my mind.
It looks like all <a href="http://package.elm-lang.org/">packages</a> it needs are ready for 0.17. Plan was made and yesterday I finally found some time and started with upgrade to 0.17.</p>
<p>Upgrading is always painful. It really is. I’m working on pretty large Ember.js application at my company.
Ember core team is pretty careful about their <a href="http://emberjs.com/deprecations/v1.x/">deprecation planing</a>. Anyway upgrading that app was (and is) a huge pain.
It’s always complicated when you have tens of thousands of code lines and large test suits already written for legacy API.</p>
<p>Such a big design change that Elm 0.17 brings to its ecosystem is something that can easily kill any JavaScript framework.
Remember Angular 1.x vs 2.x? Express.js vs Koa.js?</p>
<p>Luckily I have pretty small app which seems to be good candidate for going through this big upgrade process.
I was not afraid of starting with upgrade since I was able to write whole app in just one day or so.
Even if it turns out to be complete rewrite it can still be done over weekend.</p>
<p>One thing is particularly hard when starting with any upgrade which is to find some pattern and split work into few smaller iterations where each has its own goal.
Mostly you can’t rewrite whole app at once. This is no how you design it and it shouldn’t be the way how you refactor it as well.</p>
<p>To be honest I was quite chaotic when I started with this upgrad
but soon I realised some (or way how you can split upgrade into smaller iterations if you want) and this is why I’m sharing this story with you.
No matter how big your project is I think you can apply these steps in order to make whole upgrade process of your elm 0.16 to 0.17 sooth and fun.</p>
<p><strong>Note: This article is just about upgrading web app based on elm-html.
I also have one project written with canvas backend (it’s kind of game) and other one as a library backed up just by elm-test.
Anyway I will not focus on nether of these projects.</strong></p>
<h1 id="lets-get-started">Lets get started</h1>
<p>You can check or clone whole 0.16 version code from <a href="https://github.com/turboMaCk/elm-github-repos/tree/v0.16">Github under v0.16 tag</a>.
With our legacy code and <a href="https://github.com/elm-lang/elm-platform/blob/master/upgrade-docs/0.17.md">Upgrading to 0.17 guide</a> opened we are ready to try what new Elm is about.</p>
<h1 id="new-dependencies">New dependencies</h1>
<p>This is pretty straight forward. We can almost copy/paste this part from upgrade guide so Lets open elm-package.json
in your favorite <a href="https://www.gnu.org/software/emacs/">Emacs</a> and get it done.</p>
<p><strong>Old version:</strong></p>
<div class="sourceCode" id="cb1"><pre class="sourceCode json"><code class="sourceCode json"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="fu">{</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&quot;version&quot;</span><span class="fu">:</span> <span class="st">&quot;1.0.0&quot;</span><span class="fu">,</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&quot;summary&quot;</span><span class="fu">:</span> <span class="st">&quot;helpful summary of your project, less than 80 characters&quot;</span><span class="fu">,</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&quot;repository&quot;</span><span class="fu">:</span> <span class="st">&quot;https://github.com/user/project.git&quot;</span><span class="fu">,</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&quot;license&quot;</span><span class="fu">:</span> <span class="st">&quot;BSD3&quot;</span><span class="fu">,</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&quot;source-directories&quot;</span><span class="fu">:</span> <span class="ot">[</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;.&quot;</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>    <span class="ot">]</span><span class="fu">,</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&quot;exposed-modules&quot;</span><span class="fu">:</span> <span class="ot">[]</span><span class="fu">,</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&quot;dependencies&quot;</span><span class="fu">:</span> <span class="fu">{</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>        <span class="dt">&quot;deadfoxygrandpa/elm-test&quot;</span><span class="fu">:</span> <span class="st">&quot;3.1.0 &lt;= v &lt; 4.0.0&quot;</span><span class="fu">,</span></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>        <span class="dt">&quot;elm-lang/core&quot;</span><span class="fu">:</span> <span class="st">&quot;3.0.0 &lt;= v &lt; 4.0.0&quot;</span><span class="fu">,</span></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>        <span class="dt">&quot;evancz/elm-effects&quot;</span><span class="fu">:</span> <span class="st">&quot;2.0.1 &lt;= v &lt; 3.0.0&quot;</span><span class="fu">,</span></span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a>        <span class="dt">&quot;evancz/elm-html&quot;</span><span class="fu">:</span> <span class="st">&quot;4.0.2 &lt;= v &lt; 5.0.0&quot;</span><span class="fu">,</span></span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a>        <span class="dt">&quot;evancz/elm-http&quot;</span><span class="fu">:</span> <span class="st">&quot;3.0.0 &lt;= v &lt; 4.0.0&quot;</span><span class="fu">,</span></span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a>        <span class="dt">&quot;evancz/start-app&quot;</span><span class="fu">:</span> <span class="st">&quot;2.0.2 &lt;= v &lt; 3.0.0&quot;</span></span>
<span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a>    <span class="fu">},</span></span>
<span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&quot;elm-version&quot;</span><span class="fu">:</span> <span class="st">&quot;0.16.0 &lt;= v &lt; 0.17.0&quot;</span></span>
<span id="cb1-19"><a href="#cb1-19" aria-hidden="true" tabindex="-1"></a><span class="fu">}</span></span></code></pre></div>
<p><strong>New version:</strong></p>
<div class="sourceCode" id="cb2"><pre class="sourceCode json"><code class="sourceCode json"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="fu">{</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&quot;version&quot;</span><span class="fu">:</span> <span class="st">&quot;1.0.0&quot;</span><span class="fu">,</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&quot;summary&quot;</span><span class="fu">:</span> <span class="st">&quot;helpful summary of your project, less than 80 characters&quot;</span><span class="fu">,</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&quot;repository&quot;</span><span class="fu">:</span> <span class="st">&quot;https://github.com/user/project.git&quot;</span><span class="fu">,</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&quot;license&quot;</span><span class="fu">:</span> <span class="st">&quot;BSD3&quot;</span><span class="fu">,</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&quot;source-directories&quot;</span><span class="fu">:</span> <span class="ot">[</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;.&quot;</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>    <span class="ot">]</span><span class="fu">,</span></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&quot;exposed-modules&quot;</span><span class="fu">:</span> <span class="ot">[]</span><span class="fu">,</span></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&quot;dependencies&quot;</span><span class="fu">:</span> <span class="fu">{</span></span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>        <span class="dt">&quot;elm-lang/core&quot;</span><span class="fu">:</span> <span class="st">&quot;4.0.0 &lt;= v &lt; 5.0.0&quot;</span><span class="fu">,</span></span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a>        <span class="dt">&quot;elm-lang/html&quot;</span><span class="fu">:</span> <span class="st">&quot;1.0.0 &lt;= v &lt; 2.0.0&quot;</span><span class="fu">,</span></span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a>        <span class="dt">&quot;evancz/elm-http&quot;</span><span class="fu">:</span> <span class="st">&quot;3.0.1 &lt;= v &lt; 4.0.0&quot;</span></span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a>    <span class="fu">},</span></span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&quot;elm-version&quot;</span><span class="fu">:</span> <span class="st">&quot;0.17.0 &lt;= v &lt; 0.18.0&quot;</span></span>
<span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a><span class="fu">}</span></span></code></pre></div>
<p><em>Note: As you can see I’m a little bit sloppy. Almost all meta is not filled out but since this was never published (and never will be)
as package we just leave it as it is for now. One more thing to mention is that there is elm-test specified as dependency in legacy version
but I actually never used it in this project. This is why it’s not in updated version.</em></p>
<p>Then we run package install as usual:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> elm-package install</span></code></pre></div>
<h1 id="module-declaration">Module Declaration</h1>
<p>With new packages installed we can start rewriting application logic for new APIs.
One smaller change is to update model declaration to new syntax.
Replace:</p>
<pre><code>module Repos where</code></pre>
<p>with:</p>
<pre><code>module Repos exposing (main)</code></pre>
<p>We can also change imports to match new module structure.</p>
<p>Here is complete old version and new equivalent:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="kw">module</span> <span class="dt">Repos</span> <span class="kw">where</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">List</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Graphics.Element</span> exposing (..)</span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Http</span></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Json.Decode</span> <span class="kw">as</span> <span class="dt">Json</span> exposing ((:=))</span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Task</span></span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Signal</span></span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Html</span> exposing (..)</span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Html.Attributes</span> exposing (..)</span>
<span id="cb6-11"><a href="#cb6-11" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Html.Events</span> <span class="kw">as</span> <span class="dt">Events</span></span>
<span id="cb6-12"><a href="#cb6-12" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Effects</span> exposing (<span class="dt">Effects</span>)</span>
<span id="cb6-13"><a href="#cb6-13" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">StartApp</span></span></code></pre></div>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="kw">module</span> <span class="dt">Repos</span> exposing (main)</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">List</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Html</span> exposing (..)</span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Html.App</span></span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Html.Attributes</span> exposing (..)</span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Html.Events</span> <span class="kw">as</span> <span class="dt">Events</span></span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Http</span></span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Json.Decode</span> <span class="kw">as</span> <span class="dt">Json</span> exposing ((:=))</span>
<span id="cb7-10"><a href="#cb7-10" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Task</span> exposing (..)</span></code></pre></div>
<p>As you can see this app needs much less modules using 0.17.</p>
<h1 id="views-startapp">Views + StartApp</h1>
<p>Next step according to upgrade guide should be replacing Action with Msg.
Anyway I’d like to start with views since my first goal is to be able to render initial state of application.
We will go back to update function in a minute.</p>
<p>What I did is to get rid off address passing from view, change type annotations and comment out all events.
This is basically what needs to be done:</p>
<p>replace:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a>view <span class="op">:</span> <span class="dt">Signal.Address</span> <span class="dt">Action</span> <span class="ot">-&gt;</span> <span class="dt">Model</span> <span class="ot">-&gt;</span> <span class="dt">Html</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>view address model <span class="ot">=</span></span></code></pre></div>
<p>with:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a>view <span class="op">:</span> <span class="dt">Model</span> <span class="ot">-&gt;</span> <span class="dt">Html</span> <span class="dt">Msg</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a>view model <span class="ot">=</span></span></code></pre></div>
<p>replace also all calls to “sub views”</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="fu">div</span> [ <span class="kw">class</span> “app<span class="op">-</span>container” ]</span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a>    [ headerView address model ]</span></code></pre></div>
<p>with something like</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="fu">div</span> [ <span class="kw">class</span> “app<span class="op">-</span>container” ]</span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a>    [ headerView model ]</span></code></pre></div>
<p>And finally comment out Events (we get back to them later):</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="fu">div</span></span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a>    [ <span class="kw">class</span> “repo<span class="op">-</span>main”</span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a>    <span class="co">-- , Events.onClick address (SelectRepo repo)</span></span>
<span id="cb12-4"><a href="#cb12-4" aria-hidden="true" tabindex="-1"></a>    ]</span></code></pre></div>
<p>I also had custom Events for input and submit.
In this step we can simply comment them out.</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="op">-</span>— onInput <span class="op">:</span> <span class="dt">Signal.Address</span> <span class="dt">Action</span> <span class="ot">-&gt;</span> (<span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Action</span>) <span class="ot">-&gt;</span> <span class="dt">Attribute</span></span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a>—<span class="op">-</span> onInput address f <span class="ot">=</span></span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a>    —<span class="op">-</span> Events.on “input” Events.targetValue (\v <span class="ot">-&gt;</span> Signal.message address (f v))</span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true" tabindex="-1"></a>—<span class="op">-</span> oSubmit address value <span class="ot">=</span></span>
<span id="cb13-6"><a href="#cb13-6" aria-hidden="true" tabindex="-1"></a>    —<span class="op">-</span> Events.onWithOptions “submit”</span>
<span id="cb13-7"><a href="#cb13-7" aria-hidden="true" tabindex="-1"></a>        —<span class="op">-</span> { stopPropagation <span class="ot">=</span> <span class="dt">True</span>, preventDefault <span class="ot">=</span> <span class="dt">True</span> }</span>
<span id="cb13-8"><a href="#cb13-8" aria-hidden="true" tabindex="-1"></a>        —<span class="op">-</span> Json.value (\_ <span class="ot">-&gt;</span> Signal.message address (<span class="dt">FetchData</span> value))</span></code></pre></div>
<p>If you now try to compile app you can still see compile error.
<strong>We no longer need port in 0.17!</strong> Let’s remove it then!</p>
<h2 id="fixing-glue">Fixing glue</h2>
<p>Now we can see much more reasonable errors during compilation.
Mostly legacy Effects stuff, missing Msg type and StartApp.
Let’s fix this one by one.</p>
<p>Firstly we can <strong>comment out all Effects stuff</strong> since our first goal is to render initial state.
Also we need to get rid off all calls to these functions.
For now lets replace every call in <strong>update</strong> with <strong>Cmd.none</strong> which is replacement for legacy <strong>Effects.none</strong>.</p>
<p>Also it looks like we are now in update function part so lets change <strong>Action</strong> type to new <strong>Msg</strong> and refactor arguments according to guide.</p>
<p>This is how update action looks like after these changes:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a>update <span class="op">:</span> <span class="dt">Msg</span> <span class="ot">-&gt;</span> <span class="dt">Model</span> <span class="ot">-&gt;</span> (<span class="dt">Model</span>, <span class="dt">Cmd</span> <span class="dt">Msg</span>)</span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a>update action model <span class="ot">=</span></span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">case</span> action <span class="kw">of</span></span>
<span id="cb14-4"><a href="#cb14-4" aria-hidden="true" tabindex="-1"></a>        <span class="dt">NoOp</span> <span class="ot">-&gt;</span></span>
<span id="cb14-5"><a href="#cb14-5" aria-hidden="true" tabindex="-1"></a>            ( model, Cmd.none )</span>
<span id="cb14-6"><a href="#cb14-6" aria-hidden="true" tabindex="-1"></a>    <span class="dt">FetchData</span> name <span class="ot">-&gt;</span></span>
<span id="cb14-7"><a href="#cb14-7" aria-hidden="true" tabindex="-1"></a>        ( { model</span>
<span id="cb14-8"><a href="#cb14-8" aria-hidden="true" tabindex="-1"></a>            <span class="op">|</span> isLoading <span class="ot">=</span> <span class="dt">True</span></span>
<span id="cb14-9"><a href="#cb14-9" aria-hidden="true" tabindex="-1"></a>            , resultsFor <span class="ot">=</span> model<span class="op">.</span>userName }</span>
<span id="cb14-10"><a href="#cb14-10" aria-hidden="true" tabindex="-1"></a>            , Cmd.none )</span>
<span id="cb14-11"><a href="#cb14-11" aria-hidden="true" tabindex="-1"></a>            —<span class="op">-</span> , fetchDataAsEffects model<span class="op">.</span>userName )</span>
<span id="cb14-12"><a href="#cb14-12" aria-hidden="true" tabindex="-1"></a>    <span class="dt">FetchDone</span> results <span class="ot">-&gt;</span></span>
<span id="cb14-13"><a href="#cb14-13" aria-hidden="true" tabindex="-1"></a>        ( { model</span>
<span id="cb14-14"><a href="#cb14-14" aria-hidden="true" tabindex="-1"></a>            <span class="op">|</span> repos <span class="ot">=</span> results</span>
<span id="cb14-15"><a href="#cb14-15" aria-hidden="true" tabindex="-1"></a>            , isLoading <span class="ot">=</span> <span class="dt">False</span></span>
<span id="cb14-16"><a href="#cb14-16" aria-hidden="true" tabindex="-1"></a>            , alert <span class="ot">=</span> “” }</span>
<span id="cb14-17"><a href="#cb14-17" aria-hidden="true" tabindex="-1"></a>            , Cmd.none )</span></code></pre></div>
<p><em>Note: This is just simplified version, but you get the idea…</em></p>
<p>I my case I also need to change initialState since fetchData function is also called in this place.
I’ll replace it with <strong>Cmd.none</strong> too.</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a><span class="fu">init</span> <span class="op">:</span> ( <span class="dt">Model</span>, <span class="dt">Cmd</span> <span class="dt">Msg</span> )</span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true" tabindex="-1"></a><span class="fu">init</span> <span class="ot">=</span></span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true" tabindex="-1"></a>    ( initialModel</span>
<span id="cb15-4"><a href="#cb15-4" aria-hidden="true" tabindex="-1"></a>    , Cmd.none )</span>
<span id="cb15-5"><a href="#cb15-5" aria-hidden="true" tabindex="-1"></a>    — , fetchDataAsEffects initialModel<span class="op">.</span>userName )</span></code></pre></div>
<p>At last but not least we still did not change main function and legacy StartApp code.
This can be copy/pasted from upgrade guide.
Result looks like this:</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a>main <span class="op">:</span> <span class="dt">Program</span> <span class="dt">Never</span></span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span></span>
<span id="cb16-3"><a href="#cb16-3" aria-hidden="true" tabindex="-1"></a>    Html.App.program</span>
<span id="cb16-4"><a href="#cb16-4" aria-hidden="true" tabindex="-1"></a>        { <span class="fu">init</span> <span class="ot">=</span> <span class="fu">init</span></span>
<span id="cb16-5"><a href="#cb16-5" aria-hidden="true" tabindex="-1"></a>        , update <span class="ot">=</span> update</span>
<span id="cb16-6"><a href="#cb16-6" aria-hidden="true" tabindex="-1"></a>        , view <span class="ot">=</span> view</span>
<span id="cb16-7"><a href="#cb16-7" aria-hidden="true" tabindex="-1"></a>        , subscriptions <span class="ot">=</span> \_ <span class="ot">-&gt;</span> Sub.none }</span></code></pre></div>
<p><strong>App now renders without errors!</strong></p>
<p>Ok. Looks like there is a lot of going on. <a href="https://gist.github.com/turboMaCk/98d2e40231c4033deca29c148d4684cc#file-repos-elm">This is</a> how whole code looks like after these changes.</p>
<h1 id="goodbye-effects">Goodbye Effects!</h1>
<p>So app is kind of working now. They said if it compile, than it works, right?
Anyway it’s not much useful since it do nothing. I think it’s good time to have a look at Effects.
With Http working we will be able to fetch first data which seems to be reasonable next stage.</p>
<p>Looking at the <a href="http://package.elm-lang.org/packages/evancz/elm-http/3.0.1/">new api documentation</a> I think we will no longer need function for transforming Results to Action.
I started by removing this one. Also one for creating Effects Action seems to be useless. Let’s remove this one too.</p>
<p>Let’s have a look at fetchData function. Looks like we will need to change this one a little bit. Here is old version:</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true" tabindex="-1"></a>fetchData <span class="op">:</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Task.Task</span> a (<span class="dt">Result</span> <span class="dt">Http.Error</span> (<span class="dt">List</span> <span class="dt">Repo</span>))</span>
<span id="cb17-2"><a href="#cb17-2" aria-hidden="true" tabindex="-1"></a>fetchData name <span class="ot">=</span></span>
<span id="cb17-3"><a href="#cb17-3" aria-hidden="true" tabindex="-1"></a>    Http.get reposDecoder (getUrl name)</span>
<span id="cb17-4"><a href="#cb17-4" aria-hidden="true" tabindex="-1"></a>    <span class="op">|&gt;</span> Task.toResult</span></code></pre></div>
<p>new implementation looks like:</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true" tabindex="-1"></a>fetchData <span class="op">:</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Cmd</span> <span class="dt">Msg</span></span>
<span id="cb18-2"><a href="#cb18-2" aria-hidden="true" tabindex="-1"></a>fetchData name <span class="ot">=</span></span>
<span id="cb18-3"><a href="#cb18-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> url <span class="ot">=</span></span>
<span id="cb18-4"><a href="#cb18-4" aria-hidden="true" tabindex="-1"></a>        getUrl name</span>
<span id="cb18-5"><a href="#cb18-5" aria-hidden="true" tabindex="-1"></a>    <span class="kw">in</span></span>
<span id="cb18-6"><a href="#cb18-6" aria-hidden="true" tabindex="-1"></a>        Task.perform <span class="dt">FetchFail</span> <span class="dt">FetchDone</span> (Http.get reposDecoder url)</span></code></pre></div>
<p>As you can see we will need to change error handling logic.
In my case I just added Type <strong>FetchFail</strong> to <strong>Msg</strong> union type.** Thir also means we need to add this branch to pattern matching inside update function.
Lets replace old <strong>Error</strong> with new <strong>FetchFail</strong>. We can reuse old <strong>httpErrorToString</strong> function for transforming <strong>Error</strong> to <strong>String</strong>.</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb19-1"><a href="#cb19-1" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">Msg</span> <span class="ot">=</span> <span class="dt">NoOp</span></span>
<span id="cb19-2"><a href="#cb19-2" aria-hidden="true" tabindex="-1"></a>    <span class="op">|</span> <span class="dt">FetchData</span> <span class="dt">String</span></span>
<span id="cb19-3"><a href="#cb19-3" aria-hidden="true" tabindex="-1"></a>    <span class="op">|</span> <span class="dt">FetchDone</span> (<span class="dt">List</span> <span class="dt">Repo</span>)</span>
<span id="cb19-4"><a href="#cb19-4" aria-hidden="true" tabindex="-1"></a>    <span class="op">|</span> <span class="dt">FetchFail</span> <span class="dt">Http.Error</span> <span class="co">-- THIS!!!!!!!!!!!</span></span>
<span id="cb19-5"><a href="#cb19-5" aria-hidden="true" tabindex="-1"></a>    <span class="op">|</span> <span class="dt">NameChanged</span> <span class="dt">String</span></span>
<span id="cb19-6"><a href="#cb19-6" aria-hidden="true" tabindex="-1"></a>    <span class="op">|</span> <span class="dt">SelectRepo</span> <span class="dt">Repo</span></span>
<span id="cb19-7"><a href="#cb19-7" aria-hidden="true" tabindex="-1"></a>    <span class="op">|</span> <span class="dt">ChangeSort</span> <span class="dt">SortBy</span></span>
<span id="cb19-8"><a href="#cb19-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb19-9"><a href="#cb19-9" aria-hidden="true" tabindex="-1"></a>update <span class="op">:</span> <span class="dt">Msg</span> <span class="ot">-&gt;</span> <span class="dt">Model</span> <span class="ot">-&gt;</span> (<span class="dt">Model</span>, <span class="dt">Cmd</span> <span class="dt">Msg</span>)</span>
<span id="cb19-10"><a href="#cb19-10" aria-hidden="true" tabindex="-1"></a>update msg model <span class="ot">=</span></span>
<span id="cb19-11"><a href="#cb19-11" aria-hidden="true" tabindex="-1"></a>    <span class="kw">case</span> msg <span class="kw">of</span></span>
<span id="cb19-12"><a href="#cb19-12" aria-hidden="true" tabindex="-1"></a>        <span class="dt">NoOp</span> <span class="ot">-&gt;</span></span>
<span id="cb19-13"><a href="#cb19-13" aria-hidden="true" tabindex="-1"></a>            ( model, Cmd.none )</span>
<span id="cb19-14"><a href="#cb19-14" aria-hidden="true" tabindex="-1"></a>        <span class="dt">FetchData</span> name <span class="ot">-&gt;</span></span>
<span id="cb19-15"><a href="#cb19-15" aria-hidden="true" tabindex="-1"></a>            ( { model</span>
<span id="cb19-16"><a href="#cb19-16" aria-hidden="true" tabindex="-1"></a>                <span class="op">|</span> isLoading <span class="ot">=</span> <span class="dt">True</span></span>
<span id="cb19-17"><a href="#cb19-17" aria-hidden="true" tabindex="-1"></a>                , resultsFor <span class="ot">=</span> model<span class="op">.</span>userName }</span>
<span id="cb19-18"><a href="#cb19-18" aria-hidden="true" tabindex="-1"></a>                , Cmd.none )</span>
<span id="cb19-19"><a href="#cb19-19" aria-hidden="true" tabindex="-1"></a>            — , fetchDataAsEffects model<span class="op">.</span>userName )</span>
<span id="cb19-20"><a href="#cb19-20" aria-hidden="true" tabindex="-1"></a>        <span class="dt">FetchDone</span> results <span class="ot">-&gt;</span></span>
<span id="cb19-21"><a href="#cb19-21" aria-hidden="true" tabindex="-1"></a>            ( { model</span>
<span id="cb19-22"><a href="#cb19-22" aria-hidden="true" tabindex="-1"></a>                <span class="op">|</span> repos <span class="ot">=</span> results</span>
<span id="cb19-23"><a href="#cb19-23" aria-hidden="true" tabindex="-1"></a>                , isLoading <span class="ot">=</span> <span class="dt">False</span></span>
<span id="cb19-24"><a href="#cb19-24" aria-hidden="true" tabindex="-1"></a>                , alert <span class="ot">=</span> “” }</span>
<span id="cb19-25"><a href="#cb19-25" aria-hidden="true" tabindex="-1"></a>                , Cmd.none )</span>
<span id="cb19-26"><a href="#cb19-26" aria-hidden="true" tabindex="-1"></a>        <span class="dt">FetchFail</span> <span class="fu">error</span> <span class="ot">-&gt;</span> <span class="co">-- THIS!!!!!!!!!!!!</span></span>
<span id="cb19-27"><a href="#cb19-27" aria-hidden="true" tabindex="-1"></a>            ( { model</span>
<span id="cb19-28"><a href="#cb19-28" aria-hidden="true" tabindex="-1"></a>                <span class="op">|</span> repos <span class="ot">=</span> []</span>
<span id="cb19-29"><a href="#cb19-29" aria-hidden="true" tabindex="-1"></a>                , isLoading <span class="ot">=</span> <span class="dt">False</span></span>
<span id="cb19-30"><a href="#cb19-30" aria-hidden="true" tabindex="-1"></a>                , alert <span class="ot">=</span> (httpErrorToString model<span class="op">.</span>userName <span class="fu">error</span>) }</span>
<span id="cb19-31"><a href="#cb19-31" aria-hidden="true" tabindex="-1"></a>                , Cmd.none )</span></code></pre></div>
<p>Nice! App should now compile without errors.</p>
<p>Now we can change init function and try if it works. Change:</p>
<div class="sourceCode" id="cb20"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb20-1"><a href="#cb20-1" aria-hidden="true" tabindex="-1"></a><span class="fu">init</span> <span class="op">:</span> ( <span class="dt">Model</span>, <span class="dt">Cmd</span> <span class="dt">Msg</span> )</span>
<span id="cb20-2"><a href="#cb20-2" aria-hidden="true" tabindex="-1"></a><span class="fu">init</span> <span class="ot">=</span></span>
<span id="cb20-3"><a href="#cb20-3" aria-hidden="true" tabindex="-1"></a>    ( initialModel</span>
<span id="cb20-4"><a href="#cb20-4" aria-hidden="true" tabindex="-1"></a>    , fetchDataAsEffects initialModel<span class="op">.</span>userName )</span></code></pre></div>
<p>to:</p>
<div class="sourceCode" id="cb21"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb21-1"><a href="#cb21-1" aria-hidden="true" tabindex="-1"></a><span class="fu">init</span> <span class="op">:</span> ( <span class="dt">Model</span>, <span class="dt">Cmd</span> <span class="dt">Msg</span> )</span>
<span id="cb21-2"><a href="#cb21-2" aria-hidden="true" tabindex="-1"></a><span class="fu">init</span> <span class="ot">=</span></span>
<span id="cb21-3"><a href="#cb21-3" aria-hidden="true" tabindex="-1"></a>    ( initialModel</span>
<span id="cb21-4"><a href="#cb21-4" aria-hidden="true" tabindex="-1"></a>    , fetchData initialModel<span class="op">.</span>userName )</span></code></pre></div>
<p><strong>It works! There is no compile error, request is sent and results are rendered. So far so good!</strong></p>
<p>To complete this part we can just remove <strong>Cmd.none</strong> and call <strong>fetchData</strong> in update function’s <strong>FetchData</strong> branch which will be triggered later via user interactions.</p>
<div class="sourceCode" id="cb22"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb22-1"><a href="#cb22-1" aria-hidden="true" tabindex="-1"></a>    <span class="dt">FetchData</span> name <span class="ot">-&gt;</span></span>
<span id="cb22-2"><a href="#cb22-2" aria-hidden="true" tabindex="-1"></a>        ( { model</span>
<span id="cb22-3"><a href="#cb22-3" aria-hidden="true" tabindex="-1"></a>            <span class="op">|</span> isLoading <span class="ot">=</span> <span class="dt">True</span></span>
<span id="cb22-4"><a href="#cb22-4" aria-hidden="true" tabindex="-1"></a>            , resultsFor <span class="ot">=</span> model<span class="op">.</span>userName }</span>
<span id="cb22-5"><a href="#cb22-5" aria-hidden="true" tabindex="-1"></a>            , fetchData model<span class="op">.</span>userName )</span></code></pre></div>
<p><a href="https://gist.github.com/turboMaCk/a2f9b204f3259fb2be10754e4ad10565#file-repos-elm">This</a> is snapshot of code at this stage:</p>
<h1 id="events">Events</h1>
<p>We are almost finished. Last missing step is to bring back events to allow user interactions.</p>
<p>I’d like to start with uncommenting Events.onClick and removing address argument like this:</p>
<div class="sourceCode" id="cb23"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb23-1"><a href="#cb23-1" aria-hidden="true" tabindex="-1"></a>[ button</span>
<span id="cb23-2"><a href="#cb23-2" aria-hidden="true" tabindex="-1"></a>    [ <span class="kw">class</span> (classNames <span class="dt">Name</span>)</span>
<span id="cb23-3"><a href="#cb23-3" aria-hidden="true" tabindex="-1"></a>    — , Events.onClick address (<span class="dt">ChangeSort</span> <span class="dt">Name</span>) ]</span>
<span id="cb23-4"><a href="#cb23-4" aria-hidden="true" tabindex="-1"></a>    ]</span>
<span id="cb23-5"><a href="#cb23-5" aria-hidden="true" tabindex="-1"></a>    [ text “name” ]</span></code></pre></div>
<p>new version:</p>
<div class="sourceCode" id="cb24"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb24-1"><a href="#cb24-1" aria-hidden="true" tabindex="-1"></a>[ button</span>
<span id="cb24-2"><a href="#cb24-2" aria-hidden="true" tabindex="-1"></a>    [ <span class="kw">class</span> (classNames <span class="dt">Name</span>)</span>
<span id="cb24-3"><a href="#cb24-3" aria-hidden="true" tabindex="-1"></a>    , Events.onClick (<span class="dt">ChangeSort</span> <span class="dt">Name</span>) ]</span>
<span id="cb24-4"><a href="#cb24-4" aria-hidden="true" tabindex="-1"></a>    [ text “name” ]</span></code></pre></div>
<p><strong>Now sorting buttons and repository description should work.</strong></p>
<p>This is cool but we are still missing user name update and form submitting.
In forms I’d like to use submit instead click since this makes Enter and other handy UX tweaks for mobile.
Do you remember that two functions we previously commented out? One of the did the trick with Submit, other one hooks input event. Let’s have a look at <strong>Html.Events</strong> <a href="http://package.elm-lang.org/packages/elm-lang/html/1.0.0/Html-Events">documentation</a>.</p>
<p><strong>Looks like new version have these two build in!</strong></p>
<p>This means we can <strong>remove both commented functions</strong> and give the build-in ones a try.</p>
<p>change:</p>
<div class="sourceCode" id="cb25"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb25-1"><a href="#cb25-1" aria-hidden="true" tabindex="-1"></a>input</span>
<span id="cb25-2"><a href="#cb25-2" aria-hidden="true" tabindex="-1"></a>    [ value model<span class="op">.</span>userName</span>
<span id="cb25-3"><a href="#cb25-3" aria-hidden="true" tabindex="-1"></a>    — , onInput address <span class="dt">NameChanged</span></span>
<span id="cb25-4"><a href="#cb25-4" aria-hidden="true" tabindex="-1"></a>    , <span class="kw">class</span> “search<span class="op">-</span>field” ] []</span></code></pre></div>
<p>to:</p>
<div class="sourceCode" id="cb26"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb26-1"><a href="#cb26-1" aria-hidden="true" tabindex="-1"></a>input</span>
<span id="cb26-2"><a href="#cb26-2" aria-hidden="true" tabindex="-1"></a>    [ value model<span class="op">.</span>userName</span>
<span id="cb26-3"><a href="#cb26-3" aria-hidden="true" tabindex="-1"></a>    , Events.onInput <span class="dt">NameChanged</span> ] []</span></code></pre></div>
<p>and:</p>
<div class="sourceCode" id="cb27"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb27-1"><a href="#cb27-1" aria-hidden="true" tabindex="-1"></a>Html.form</span>
<span id="cb27-2"><a href="#cb27-2" aria-hidden="true" tabindex="-1"></a>    — [ onSubmit address model<span class="op">.</span>userName</span>
<span id="cb27-3"><a href="#cb27-3" aria-hidden="true" tabindex="-1"></a>    [ <span class="kw">class</span> “search<span class="op">-</span>form” ]</span></code></pre></div>
<p>to:</p>
<div class="sourceCode" id="cb28"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb28-1"><a href="#cb28-1" aria-hidden="true" tabindex="-1"></a>Html.form</span>
<span id="cb28-2"><a href="#cb28-2" aria-hidden="true" tabindex="-1"></a>    [ Events.onSubmit (<span class="dt">FetchData</span> model<span class="op">.</span>userName)</span>
<span id="cb28-3"><a href="#cb28-3" aria-hidden="true" tabindex="-1"></a>    , <span class="kw">class</span> “search<span class="op">-</span>form” ]</span></code></pre></div>
<p><strong>We are (almost) done!</strong></p>
<p><a href="https://gist.github.com/turboMaCk/ab2ef6e7f9ac393645faa0c6754dda29#file-repos-elm">This</a> is final version of our new implementation.</p>
<h1 id="load-app-in-html">Load app in Html</h1>
<p>Last step is to make new version of application work with Html.
Just follow upgrading guide. This how mine index.html looks like:</p>
<div class="sourceCode" id="cb29"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb29-1"><a href="#cb29-1" aria-hidden="true" tabindex="-1"></a><span class="dt">&lt;!DOCTYPE</span> HTML<span class="dt">&gt;</span></span>
<span id="cb29-2"><a href="#cb29-2" aria-hidden="true" tabindex="-1"></a><span class="dt">&lt;</span><span class="kw">html</span><span class="dt">&gt;</span></span>
<span id="cb29-3"><a href="#cb29-3" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&lt;</span><span class="kw">head</span><span class="dt">&gt;</span></span>
<span id="cb29-4"><a href="#cb29-4" aria-hidden="true" tabindex="-1"></a>        <span class="dt">&lt;</span><span class="kw">meta</span><span class="ot"> charset</span><span class="op">=</span><span class="st">”UTF-8</span><span class="er">&quot;</span><span class="dt">&gt;</span></span>
<span id="cb29-5"><a href="#cb29-5" aria-hidden="true" tabindex="-1"></a>        <span class="dt">&lt;</span><span class="kw">title</span><span class="dt">&gt;</span>Github repository browser<span class="dt">&lt;/</span><span class="kw">title</span><span class="dt">&gt;</span></span>
<span id="cb29-6"><a href="#cb29-6" aria-hidden="true" tabindex="-1"></a>        <span class="dt">&lt;</span><span class="kw">link</span><span class="ot"> href</span><span class="op">=</span><span class="st">’https://fonts.googleapis.com/css?family</span><span class="er">=</span><span class="st">Open+Sans</span><span class="er">&#39;</span><span class="ot"> rel</span><span class="op">=</span><span class="st">’stylesheet’</span><span class="ot"> type</span><span class="op">=</span><span class="st">’text/css’</span><span class="dt">&gt;</span></span>
<span id="cb29-7"><a href="#cb29-7" aria-hidden="true" tabindex="-1"></a>        <span class="dt">&lt;</span><span class="kw">link</span><span class="ot"> href</span><span class="op">=</span><span class="st">’https://fonts.googleapis.com/css?family</span><span class="er">=</span><span class="st">Lato:100italic</span><span class="er">&#39;</span><span class="ot"> rel</span><span class="op">=</span><span class="st">’stylesheet’</span><span class="ot"> type</span><span class="op">=</span><span class="st">’text/css’</span><span class="dt">&gt;</span></span>
<span id="cb29-8"><a href="#cb29-8" aria-hidden="true" tabindex="-1"></a>        <span class="dt">&lt;</span><span class="kw">link</span><span class="ot"> rel</span><span class="op">=</span><span class="st">”stylesheet”</span><span class="ot"> href</span><span class="op">=</span><span class="st">”dist/styles/main.css”</span><span class="dt">&gt;</span></span>
<span id="cb29-9"><a href="#cb29-9" aria-hidden="true" tabindex="-1"></a>        <span class="dt">&lt;</span><span class="kw">script</span><span class="ot"> type=</span><span class="st">”text/javascript”</span><span class="ot"> src</span><span class="op">=</span><span class="st">”dist/Repos.js”</span><span class="dt">&gt;&lt;/</span><span class="kw">script</span><span class="dt">&gt;</span></span>
<span id="cb29-10"><a href="#cb29-10" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&lt;/</span><span class="kw">head</span><span class="dt">&gt;</span></span>
<span id="cb29-11"><a href="#cb29-11" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&lt;</span><span class="kw">body</span><span class="dt">&gt;</span></span>
<span id="cb29-12"><a href="#cb29-12" aria-hidden="true" tabindex="-1"></a>        <span class="dt">&lt;</span><span class="kw">script</span><span class="ot"> type=</span><span class="st">”text/javascript”</span><span class="dt">&gt;</span></span>
<span id="cb29-13"><a href="#cb29-13" aria-hidden="true" tabindex="-1"></a>            <span class="kw">var</span> app <span class="op">=</span> Elm<span class="op">.</span><span class="at">Repos</span><span class="op">.</span><span class="fu">fullscreen</span>()<span class="op">;</span></span>
<span id="cb29-14"><a href="#cb29-14" aria-hidden="true" tabindex="-1"></a>        <span class="dt">&lt;/</span><span class="kw">script</span><span class="dt">&gt;</span></span>
<span id="cb29-15"><a href="#cb29-15" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&lt;/</span><span class="kw">body</span><span class="dt">&gt;</span></span>
<span id="cb29-16"><a href="#cb29-16" aria-hidden="true" tabindex="-1"></a><span class="dt">&lt;/</span><span class="kw">html</span><span class="dt">&gt;</span></span></code></pre></div>
<p>Nothing too fancy. As you can see there is new api for rendering app in fullscreen.</p>
<p>just change:</p>
<div class="sourceCode" id="cb30"><pre class="sourceCode js"><code class="sourceCode javascript"><span id="cb30-1"><a href="#cb30-1" aria-hidden="true" tabindex="-1"></a><span class="kw">var</span> app <span class="op">=</span> Elm<span class="op">.</span><span class="fu">fullscreen</span>(Elm<span class="op">.</span><span class="at">Repos</span>)<span class="op">;</span></span></code></pre></div>
<p>to new version:</p>
<div class="sourceCode" id="cb31"><pre class="sourceCode js"><code class="sourceCode javascript"><span id="cb31-1"><a href="#cb31-1" aria-hidden="true" tabindex="-1"></a><span class="kw">var</span> app <span class="op">=</span> Elm<span class="op">.</span><span class="at">Repos</span><span class="op">.</span><span class="fu">fullscreen</span>()<span class="op">;</span></span></code></pre></div>
<p>That’s it. We are done!</p>
<h1 id="or-not-edited-on-may-28th">Or not? (edited on May 28th)</h1>
<p>As <a href="https://www.reddit.com/user/jediknight">jediknight</a> pointed out in <a href="https://www.reddit.com/r/elm/comments/4jhaxf/elm_017_successful_upgrade_of_real_world_app_and/">discussion on reddit</a> there is actually much nicer way how to create model msg tuple using <code>!</code> infix function!
I recommend to use it since it adds some extra abstraction to your actions.
This function takes two a arguments — model (whatever) and List of Msg. Let’s see how we can use it.</p>
<p>this is on of our old update branches:</p>
<div class="sourceCode" id="cb32"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb32-1"><a href="#cb32-1" aria-hidden="true" tabindex="-1"></a>update msg model <span class="ot">=</span></span>
<span id="cb32-2"><a href="#cb32-2" aria-hidden="true" tabindex="-1"></a>    <span class="kw">case</span> msg <span class="kw">of</span></span>
<span id="cb32-3"><a href="#cb32-3" aria-hidden="true" tabindex="-1"></a>        <span class="dt">NoOp</span> <span class="ot">-&gt;</span></span>
<span id="cb32-4"><a href="#cb32-4" aria-hidden="true" tabindex="-1"></a>            ( model, Cmd.none )</span></code></pre></div>
<p>and this is how it looks like with use of <code>!</code> function</p>
<div class="sourceCode" id="cb33"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb33-1"><a href="#cb33-1" aria-hidden="true" tabindex="-1"></a>update msg model <span class="ot">=</span></span>
<span id="cb33-2"><a href="#cb33-2" aria-hidden="true" tabindex="-1"></a>    <span class="kw">case</span> msg <span class="kw">of</span></span>
<span id="cb33-3"><a href="#cb33-3" aria-hidden="true" tabindex="-1"></a>        <span class="dt">NoOp</span> <span class="ot">-&gt;</span></span>
<span id="cb33-4"><a href="#cb33-4" aria-hidden="true" tabindex="-1"></a>            model <span class="op">!</span> []</span></code></pre></div>
<p>As always <a href="https://gist.github.com/turboMaCk/a77498c85347eda4581b6be08be8c3ef#file-repos-elm">here</a> is shippet of whole application.</p>
<h1 id="conclusion">Conclusion</h1>
<p>I think this demonstrates one possible pattern of how to upgrade your web app written in elm to version 0.17.
We started with views. Removing all calls to code we do not need to just get initial render.
Then fixing update function and main (StartApp) code. Doing so bring us to state where we were able to get initial render.
Then we made Http work so our app was able to fetch data a render them.
We made events work so user can interact with app as before. And finally we connected our app to html.</p>
<h1 id="elm-architecture-types">Elm, Architecture, Types…</h1>
<p>Somewhere above I was taking about how hard it is to upgrade your application.
I also mentioned few examples where the difference between legacy and new API made it almost impossible to upgrade existing code bases.
I think <strong>with elm the situation is different</strong>.</p>
<p>This is on of scenarios where types really cover your back.
Thanks to the fact that elm is <a href="https://en.wikipedia.org/wiki/Strong_and_weak_typing">strongly</a> and <a href="http://stackoverflow.com/questions/1517582/what-is-the-difference-between-statically-typed-and-dynamically-typed-languages">statically</a>
typed it’s <strong>not such a big deal to introduce huge API changes</strong> as 0.17 did.
I’m not a hardcore static type fan boy. I think there are big trade offs while choosing static over dynamic typed languages.
Dynamic typing should be pretty powerful in some cases. I’m also pretty big fan of meta programming (think about Lisp(s) or Ruby).
Anyway with static typing comes some extra safety. Extra safety in terms that you no need to be afraid start aggressively rewriting parts of your code.
I think this is one thing Elm really shines in. My bets on Elm are pretty high thanks to this.
I think Elm’s community can really benefits of this nature of safety.
I expect there is <strong>bright future for Elm as language and architecture</strong>.
The potential of bringing cutting edge concepts and constantly iterating on all its building blocks can really runs over whole <strong>React</strong> and <strong>Clojure Script</strong> word.
I strongly believe that neither of these ecosystems will be able to implement experimental primitives rethink its design
and more importantly bring all of this easily to large scale production applications as Elm can.</p>
<p>Thanks to everyone in this community for making all of this happened. I’m super excited about what came next.</p>]]></description>
    <pubDate>Sun, 15 May 2016 00:00:00 UT</pubDate>
    <guid>http://turbomack.github.iuo/posts/2016-05-15-eml-0.17-upgrade.html</guid>
    <dc:creator>Marek Fajkus</dc:creator>
</item>

    </channel>
</rss>
